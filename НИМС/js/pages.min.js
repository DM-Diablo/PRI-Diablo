/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const root = '.-tab ';
    const state = {};

    exports.init = () => {
        //exports.content = queryEl(root);
    };

    exports.refresh = () => {

    };
})(this.Template = {});

/*Copyright 2015-2018 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const state = {};

    state.entities = ['characters', 'stories', 'groups', 'players'];

    const root = '.organizer-management-tab ';

    let removePermission, assignPermission;

    exports.init = () => {
        const createUserDialog = UI.createModalDialog(root, createUser, {
            bodySelector: 'create-organizer-body',
            dialogTitle: 'admins-creating-user',
            actionButtonTitle: 'common-create',
        });
        listen(qe(`${root}.create.user`), 'click', () => createUserDialog.showDlg());
        
        const changePasswordDialog = UI.createModalDialog(root, changePassword, {
            bodySelector: 'modal-prompt-body',
            dialogTitle: 'admins-enter-new-password',
            actionButtonTitle: 'common-replace',
        });
        listen(qe(`${root}.user.change-password`), 'click', () => {
            qee(changePasswordDialog, '.entity-input').value = '';
            changePasswordDialog.showDlg();
        });
        
        listen(queryEl(`${root}.remove-user-button`), 'click', removeOrganizer);

        listen(queryEl(`${root}.assign-permission-button`), 'click', assignPermission);
        listen(queryEl(`${root}.remove-permission-button`), 'click', removePermission);
        listen(queryEl(`${root}.assign-admin-button`), 'click', assignNewAdmin);
        listen(queryEl(`${root}.remove-editor-button`), 'click', removeEditor);
        listen(queryEl(`${root}.assign-editor-button`), 'click', assignEditor);
        
        state.entities.forEach(type => {
            listen(queryEl(`${root} .entity-filter.${type}`), 'input', filterList(`.entity-list.${type}`));
        });

        queryElEls(queryEl(root), '.adaptationRights').map(listen(R.__, 'click', changeAdaptationRightsMode));
        
        exports.content = queryEl(root);
    };

    exports.refresh = () => {
        DBMS.getManagementInfo((err, managementInfo) => {
            if (err) { Utils.handleError(err); return; }
            PermissionInformer.isAdmin((err2, isAdmin) => {
                if (err2) { Utils.handleError(err2); return; }
                PermissionInformer.isEditor((err3, isEditor) => {
                    if (err3) { Utils.handleError(err3); return; }
                    PermissionInformer.getEntityNamesArray('character', false, (err4, characterNames) => {
                        if (err4) { Utils.handleError(err4); return; }
                        PermissionInformer.getEntityNamesArray('story', false, (err5, storyNames) => {
                            if (err5) { Utils.handleError(err5); return; }
                            PermissionInformer.getEntityNamesArray('group', false, (err6, groupNames) => {
                                if (err6) { Utils.handleError(err6); return; }
                                PermissionInformer.getEntityNamesArray('player', false, (err7, playerNames) => {
                                    if (err7) { Utils.handleError(err7); return; }
                                    const names = {
                                        characters: characterNames,
                                        groups: groupNames,
                                        stories: storyNames,
                                        players: playerNames,
                                    };
                                    if (!isAdmin && isEditor) {
                                        R.keys(names).forEach((entity) => {
                                            names[entity] = names[entity].filter(R.prop('isOwner'));
                                        });
                                    }
                                    rebuildInterface(names, managementInfo, isAdmin);
                                    Utils.enable(exports.content, 'adminOnly', isAdmin);
                                    Utils.enable(exports.content, 'editorOrAdmin', isAdmin || isEditor);
                                });
                            });
                        });
                    });
                });
            });
        });
    };

    function rebuildInterface(names, managementInfo, isAdmin) {
        const { usersInfo } = managementInfo;

        const userNames = Object.keys(usersInfo).sort(CommonUtils.charOrdA);

        const selectors = [];
        selectors.push(queryEl(`${root}.change-password-user-select`));
//        selectors.push(queryEl(`${root}.user-permission-select`));
//        selectors.push(queryEl(`${root}.assign-editor-select`));

        const data = arr2Select2(userNames)
        selectors.forEach((selector) => {
            clearEl(selector);
            $(selector).select2(data);
//            Utils.rebuildSelectorArr(selector, userNames);
        });
        
        Utils.rebuildSelectorArr(queryEl(`${root}.user-permission-select`), userNames);

        const clone = userNames.slice(0);
        clone.splice(userNames.indexOf(managementInfo.admin), 1);
//        let selector = queryEl(`${root}.assign-admin-select`);
//        Utils.rebuildSelectorArr(selector, clone);
        
//        const data = getSelect2Data(allGroupNames);
//        clearEl(queryEl(`${root}.save-entity-select`));
//        $(`${root}.save-entity-select`).select2(data);

//        selector = queryEl(`${root}.remove-user-select`);
//        Utils.rebuildSelectorArr(selector, clone);

        state.entities.forEach((entity) => {
            Utils.rebuildSelector(queryEl(`${root}.permission-selector__${entity}`), names[entity]);
        });

        addEl(clearEl(queryEl(`${root}.current-admin-label`)), makeText(managementInfo.admin));

        const span = clearEl(queryEl(`${root}.current-editor-label`));
        if (managementInfo.editor) {
            addEl(span, makeText(managementInfo.editor));
        }

        getEl(`adaptationRights${managementInfo.adaptationRights}`).checked = true;

        state.entities.forEach((entity) => {
//            Utils.rebuildSelector(queryEl(`${root}.permission-selector__${entity}`), names[entity]);
            addEls(
                clearEl(queryEl(`${root} .entity-list.${entity}`)),
                names[entity].map(entity2el(isAdmin, entity))
            );
        });
        
        addEls(
            clearEl(queryEl(`${root} .entity-list.users`)),
            userNames.map(user2el)
        );
        buildPermissionList(names, usersInfo);
    }
    
    const entity2el = R.curry((isAdmin, type, name) => {
        const el = qmte(`.profile-item-tmpl`);
        el.profileName = name.value;
        addEl(qee(el, '.primary-name'), makeText(name.displayName));
        const btn = qee(el, '[role=button]');
        setAttr(btn, 'profile-name', name.value);
        setAttr(btn, 'primary-name', name.displayName);
        setAttr(btn, 'button-type', 'entity');
        setAttr(btn, 'profile-type', type);
        if(name.isOwner || isAdmin){
            listen(btn, 'dragstart', onDragStart);
            listen(btn, 'drop', onDrop);
            listen(btn, 'dragover', allowDrop);
            listen(btn, 'dragenter', handleDragEnter);
            listen(btn, 'dragleave', handleDragLeave);
            listen(btn, 'click', e => toggleClass(btn, 'btn-primary'));
        } else {
            Utils.enableEl(btn, false);
        }
        return el;
    });
    
    const user2el = R.curry((name) => {
        const el = wrapEl('div', qte(`.profile-item-tmpl`));
//        el.profileName = name.value;
        addEl(qee(el, '.primary-name'), makeText(name));
        setAttr(el, 'profile-name', name);
        setAttr(el, 'button-type', 'user');
//        setAttr(el, 'primary-name', name.displayName);
//        setAttr(el, 'profile-type', type);
        listen(el, 'dragstart', onDragStart);
        listen(el, 'drop', onDrop);
        listen(el, 'dragover', allowDrop);
        listen(el, 'dragenter', handleDragEnter);
        listen(el, 'dragleave', handleDragLeave);
        return el;
    });

    // eslint-disable-next-line no-var,vars-on-top
    var onDragStart = function(event) {
        if(getAttr(this, 'button-type') === 'entity'){
            addClass(this, 'btn-primary');
        }
        console.log(`onDragStart ${this.profileName}`);
        event.dataTransfer.setData('data', JSON.stringify({
            name: getAttr(this, 'profile-name'),
            type: getAttr(this, 'profile-type'),
            buttonType: getAttr(this, 'button-type'),
        }));
        event.dataTransfer.effectAllowed = 'move';
    };

    // eslint-disable-next-line no-var,vars-on-top
    var onDrop = function(event) {
        removeClass(this, 'over');
        console.log(`onDrop ${this.profileName}${event.dataTransfer.getData('data')}`);
        if (event.stopPropagation) {
            event.stopPropagation(); // stops the browser from redirecting.
        }
        const thatData = JSON.parse(event.dataTransfer.getData('data'));
        if (thatData.type === getAttr(this, 'profile-type')) {
            return;
        }
        const type1 = getAttr(this, 'button-type');
        const type2 = thatData.buttonType;
        
        if(type1 !== type2){
            const userName = type1 === 'user' ? getAttr(this, 'profile-name') : thatData.name;
//            const entityBtn =  type1 === 'user' ? 
            
//            console.log(user);
            const btns = qes(`${root} .rights-panel .btn-primary[role=button]`);
            const selected = btns.map( btn => ({
                type: getAttr(btn, 'profile-type'),
                name: getAttr(btn, 'profile-name'),
            }));
            const names = R.mapObjIndexed(arr => arr.map(R.prop('name')), R.groupBy(R.prop('type'), selected));
            btns.forEach(btn => removeClass(btn, 'btn-primary'))
            
            DBMS['assignPermission'](userName, names, Utils.processError(exports.refresh));
//            DBMS[action](userName, names, Utils.processError(exports.refresh));
//        };
//    }
//
//    removePermission = permissionAction('removePermission');
//    assignPermission = permissionAction('assignPermission');
        }

//        createBinding([thatData, {
//            name: getAttr(this, 'profile-name'),
//            type: getAttr(this, 'profile-type'),
//        }]);
    };

    // eslint-disable-next-line no-var,vars-on-top
    var allowDrop = function(event) {
        console.log(`allowDrop ${this.profileName}`);
        event.preventDefault();
    };

    function handleDragEnter(event) {
        addClass(this, 'over');
    }

    function handleDragLeave(event) {
        removeClass(this, 'over');
    }

    function buildPermissionList(names, usersInfo) {
        const permissionTable = clearEl(queryEl(`${root}.permission-table`));
        const treeRoot = makeEl('ul');
        addEl(permissionTable, treeRoot);

        R.keys(names).forEach((entity) => {
            names[entity] = names[entity].map(R.prop('value'));
        });

        R.values(usersInfo).forEach((userInfo) => {
            R.keys(userInfo).forEach((entity) => {
                names[entity] = R.difference(names[entity], userInfo[entity]);
            });
        });

        usersInfo[getL10n('admins-have-not-owner')] = names;

        const headers = {
            characters: getL10n('admins-characters'),
            stories: getL10n('admins-stories'),
            groups: getL10n('admins-groups'),
            players: getL10n('admins-players'),
        };

        function liMaker(text) {
            return addEl(makeEl('li'), makeText(text));
        }

        function makeEntityLists(userInfo) {
            return state.entities.reduce((result, entity) => {
                result.push(liMaker(headers[entity]));
                result.push(addEls(makeEl('ol'), userInfo[entity].sort(CommonUtils.charOrdA).map(liMaker)));
                return result;
            }, []);
        }

        const userNames = Object.keys(usersInfo).sort(CommonUtils.charOrdA);
        addEls(treeRoot, userNames.reduce((result, userName) => {
            result.push(liMaker(userName));
            result.push(addEls(makeEl('ol'), makeEntityLists(usersInfo[userName])));
            return result;
        }, []));
    }

    function createUser(dialog) {
        return () => {
            const userNameInput = qee(dialog,`.create-user-name-input`);
            const userPasswordInput = qee(dialog,`.create-user-password-input`);
            DBMS.createOrganizer(userNameInput.value.trim(), userPasswordInput.value, (err) => {
                if (err) {
                    setError(dialog, err);
                } else {
                    userNameInput.value = '';
                    userPasswordInput.value = '';
                    dialog.hideDlg();
                    exports.refresh();
                }
            });
        };
    }
    
    function changePassword(dialog) {
        return () => {
            const toInput = qee(dialog, '.entity-input');
            const newPassword = toInput.value;
            const userName = queryEl(`${root}.change-password-user-select`).value.trim();
            DBMS.changeOrganizerPassword(userName, newPassword, (err) => {
                if (err) {
                    setError(dialog, err);
                } else {
                    dialog.hideDlg();
                    exports.refresh();
                }
            });
        };
    }


    function changeOrganizerPassword() {
        const userName = queryEl(`${root}.change-password-user-select`).value.trim();
        const passwordInput = queryEl(`${root}.change-password-password-input`);
        DBMS.changeOrganizerPassword(userName, passwordInput.value, Utils.processError(() => {
            queryEl(`${root}.change-password-password-input`).value = '';
            exports.refresh();
        }));
    }

    function removeOrganizer() {
//        const name = queryEl(`${root}.remove-user-select`).value.trim();
        const name = queryEl(`${root}.change-password-user-select`).value.trim();
        Utils.confirm(strFormat(getL10n('admins-confirm-user-remove'), [name]), () => {
            DBMS.removeOrganizer(name, Utils.processError(exports.refresh));
        });
    }

    const getSelectedOptions = sel => nl2array(queryEl(sel).selectedOptions).map(opt => opt.value);

    function permissionAction(action) {
        return () => {
            const userName = queryEl(`${root}.user-permission-select`).value.trim();

            // TODO remove this check
            if (userName === '') {
                Utils.alert(getL10n('admins-user-is-not-selected'));
                return;
            }

            const names = {};
            state.entities.forEach((entity) => {
                names[entity] = getSelectedOptions(`${root}.permission-selector__${entity}`);
            });

            DBMS[action](userName, names, Utils.processError(exports.refresh));
        };
    }

    removePermission = permissionAction('removePermission');
    assignPermission = permissionAction('assignPermission');

    function assignNewAdmin() {
        const userName = queryEl(`${root}.change-password-user-select`).value.trim();
        Utils.confirm(strFormat(getL10n('admins-confirm-admin-assignment'), [userName]), () => {
            DBMS.assignAdmin(userName, Utils.processError(exports.refresh));
        });
    }
    function removeEditor() {
        DBMS.removeEditor(Utils.processError(exports.refresh));
    }
    function assignEditor() {
        const userName = queryEl(`${root}.change-password-user-select`).value.trim();
        Utils.confirm(strFormat(getL10n('admins-confirm-editor-assignment'), [userName]), () => {
            DBMS.assignEditor(userName, Utils.processError(exports.refresh));
        });
    }
    function changeAdaptationRightsMode(event) {
        DBMS.changeAdaptationRightsMode(event.target.value, Utils.processError());
    }
    
    // eslint-disable-next-line no-var,vars-on-top
    var filterList = sel => (event) => {
        const str = event.target.value.toLowerCase();

        const els = queryEls(`${root} ${sel} [primary-name]`);
        els.forEach((el) => {
            const isVisible = getAttr(el, 'primary-name').toLowerCase().indexOf(str) !== -1;
            hideEl(el, !isVisible);
        });
    };
})(this.OrganizerManagement = {});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const state = {};

    const root = '.player-management-tab ';

    exports.init = () => {
        const createUserDialog = UI.createModalDialog(root, createUser, {
            bodySelector: 'create-organizer-body',
            dialogTitle: 'admins-creating-player',
            actionButtonTitle: 'common-create',
        });
        listen(qe(`${root}.create.player`), 'click', () => createUserDialog.showDlg());
        
        const createPlayerAccountDialog = UI.createModalDialog(root, createUserAccount, {
            bodySelector: 'create-player-account-body',
            dialogTitle: 'admins-creating-player-account',
            actionButtonTitle: 'common-create',
        });
        listen(qe(`${root}.create.player-account`), 'click', () => createPlayerAccountDialog.showDlg());
        
        const changePasswordDialog = UI.createModalDialog(root, changePassword, {
            bodySelector: 'modal-prompt-body',
            dialogTitle: 'admins-enter-new-password',
            actionButtonTitle: 'common-replace',
        });
        listen(qe(`${root}.user.change-password`), 'click', () => {
            qee(changePasswordDialog, '.entity-input').value = '';
            changePasswordDialog.showDlg();
        });
        
        
//        listen(queryEl(`${root}.create-user-button`), 'click', createUser);
//        listen(queryEl(`${root}.create-login-button`), 'click', createLogin);
//        listen(queryEl(`${root}.change-password-button`), 'click', changePassword);
        listen(queryEl(`${root}.remove-user-button`), 'click', removeUser);
        listen(queryEl(`${root}.welcome-text-area`), 'change', setWelcomeText);
        queryElEls(queryEl(root), '.playerOptions').map(listen(R.__, 'change', setPlayerOption));
        
        $(`${root}.change-password-user-select`).select2().on('change', (event) => {
            const player = event.target.value;
            const yourPlayers = state.playerNames.filter(R.prop('isOwner')).map(R.prop('value'));
            const isPlayerEditable = R.contains(player, yourPlayers);
            Utils.enableEl(qe(`${root}.user.change-password`), isPlayerEditable);
            Utils.enableEl(qe(`${root}.remove-user-button`), isPlayerEditable);
        });


        exports.content = queryEl(root);
    };

    exports.refresh = () => {
        PermissionInformer.getEntityNamesArray('player', false, (err, playerNames) => {
            if (err) { Utils.handleError(err); return; }
            DBMS.getPlayerLoginsArray((err2, playerLogins) => {
                if (err2) { Utils.handleError(err2); return; }
                DBMS.getWelcomeText((err3, text) => {
                    if (err3) { Utils.handleError(err3); return; }
                    DBMS.getPlayersOptions((err4, playersOptions) => {
                        if (err4) { Utils.handleError(err4); return; }
                        PermissionInformer.isAdmin((err5, isAdmin) => {
                            if (err5) { Utils.handleError(err5); return; }
                            // eslint-disable-next-line prefer-destructuring
                            R.toPairs(playersOptions).map(pair => (getEl(pair[0]).checked = pair[1]));
    
                            queryEl(`${root}.welcome-text-area`).value = text;
                            const playerHasLogin = R.compose(R.contains(R.__, playerLogins), R.prop('value'));
                            const hasLoginObj = R.groupBy(playerHasLogin, playerNames);
                            
                            state.playerNames = playerNames;
                            
                            const noAccounts = (hasLoginObj.false || []);
                            noAccounts.sort(Utils.charOrdAObject);
                            $(clearEl(queryEl(`${root}.create-login-name-select`))).select2(getSelect2Data(noAccounts));
    //                        fillSelector(clearEl(queryEl(`${root}.create-login-name-select`)), (hasLoginObj.false || [])
    //                            .sort(Utils.charOrdAObject).map(remapProps4Select));
                            const hasAccounts = (hasLoginObj.true || []);
//                            hasAccounts.sort(Utils.charOrdAObject);
                            $(clearEl(queryEl(`${root}.change-password-user-select`))).select2(getSelect2Data(hasAccounts));
                            
                            Utils.enable(exports.content, 'adminOnly', isAdmin);
                            
                            Utils.enableEl(qe(`${root}.change-password-user-select`), hasAccounts.length > 0);
                            Utils.enableEl(qe(`${root}.user.change-password`), hasAccounts.length > 0);
                            Utils.enableEl(qe(`${root}.remove-user-button`), hasAccounts.length > 0);
    //                        fillSelector(clearEl(queryEl(`${root}.change-password-user-select`)), (hasLoginObj.true || [])
    //                            .sort(Utils.charOrdAObject).map(remapProps4Select));
    //                        fillSelector(clearEl(queryEl(`${root}.remove-user-select`)), (hasLoginObj.true || [])
//                            .sort(Utils.charOrdAObject).map(remapProps4Select));
                        });
                    });
                });
            });
        });
    };

    function createUser(dialog) {
        return () => {
            const userNameInput = qee(dialog,`.create-user-name-input`);
            const userPasswordInput = qee(dialog,`.create-user-password-input`);
            DBMS.createPlayer(userNameInput.value.trim(), userPasswordInput.value, (err) => {
                if (err) {
                    setError(dialog, err);
                } else {
                    PermissionInformer.refresh((err2) => {
                        if (err2) { Utils.handleError(err2); return; }
                        userNameInput.value = '';
                        userPasswordInput.value = '';
                        dialog.hideDlg();
                        exports.refresh();
                    });
                }
            });
        };
    }
    
    function createUserAccount(dialog) {
        return () => {
            const userNameSelect = qee(dialog,`.create-login-name-select`);
            const passwordInput = qee(dialog,`.create-login-password-input`);
            DBMS.createPlayerLogin(userNameSelect.value, passwordInput.value, (err) => {
                if (err) {
                    setError(dialog, err);
                } else {
                    passwordInput.value = '';
                    dialog.hideDlg();
                    exports.refresh();
                }
            });
        };
    }

    function createLogin() {
        const userNameSelect = queryEl(`${root}.create-login-name-select`);
        const passwordInput = queryEl(`${root}.create-login-password-input`);
        DBMS.createPlayerLogin(userNameSelect.value, passwordInput.value, Utils.processError(() => {
            passwordInput.value = '';
            exports.refresh();
        }));
    }

//    function changePassword() {
//        const userNameSelect = queryEl(`${root}.change-password-user-select`);
//        const passwordInput = queryEl(`${root}.change-password-password-input`);
//        DBMS.changePlayerPassword(userNameSelect.value, passwordInput.value, Utils.processError(() => {
//            passwordInput.value = '';
//            exports.refresh();
//        }));
//    }
    
    function changePassword(dialog) {
        return () => {
            const toInput = qee(dialog, '.entity-input');
            const newPassword = toInput.value;
            const userName = queryEl(`${root}.change-password-user-select`).value.trim();
            DBMS.changePlayerPassword(userName, newPassword, (err) => {
                if (err) {
                    setError(dialog, err);
                } else {
                    dialog.hideDlg();
                    exports.refresh();
                }
            });
        };
    }

    function removeUser() {
        const name = queryEl(`${root}.change-password-user-select`).value.trim();
        Utils.confirm(strFormat(getL10n('admins-confirm-user-account-remove'), [name]), () => {
            DBMS.removePlayerLogin(name, Utils.processError(exports.refresh));
        });
//        const userNameSelect = queryEl(`${root}.change-password-user-select`);
//        DBMS.removePlayerLogin(userNameSelect.value, Utils.processError(exports.refresh));
    }

    function setWelcomeText(event) {
        DBMS.setWelcomeText(event.target.value, Utils.processError());
    }

    function setPlayerOption(event) {
        DBMS.setPlayerOption(event.target.value, event.target.checked, Utils.processError());
    }
})(this.PlayerManagement = {});

/*Copyright 2015, 2018 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */


'use strict';

((exports) => {
    const root = '.adaptations-tab ';

    exports.init = () => {
        listen(getEl('events-storySelector'), 'change', updateAdaptationSelectorDelegate);
        listen(getEl('events-characterSelector'), 'change', showPersonalStoriesByCharacters);
        listen(getEl('events-eventSelector'), 'change', showPersonalStoriesByEvents);
        listen(getEl('finishedStoryCheckbox'), 'change', exports.refresh);
        queryEls('.adaptations-tab input[name=adaptationFilter]').map(listen(R.__, 'change', updateFilter));
        exports.content = queryEl(root);
    };

    exports.refresh = () => {
        const selector = clearEl(getEl('events-storySelector'));
        clearEl(getEl('events-characterSelector'));
        clearEl(getEl('events-eventSelector'));
        clearEl(getEl('personalStories'));

        PermissionInformer.getEntityNamesArray('story', false, (err, allStoryNames) => {
            if (err) { Utils.handleError(err); return; }
            DBMS.getFilteredStoryNames(getEl('finishedStoryCheckbox').checked, (err2, storyNames) => {
                if (err2) { Utils.handleError(err2); return; }
                
                showEl(qe(`${root} .alert`), storyNames.length === 0);
                showEl(qe(`${root} .adaptations-content`), storyNames.length !== 0);
                
                if (storyNames.length <= 0) { return; }

                const selectedStoryName = getSelectedStoryName(storyNames);

                const filteredArr = R.indexBy(R.prop('storyName'), storyNames);
                
                const storyNames2 = allStoryNames.filter(story => R.contains(story.value, R.keys(filteredArr))).map( story => {
                    const elem = filteredArr[story.value];
                    elem.displayName = story.displayName;
                    elem.value = story.value;
                    return elem;
                });

                let option;
                storyNames2.forEach((storyName) => {
                    option = addEl(makeEl('option'), (makeText(storyName.displayName)));
                    addClass(option, getIconClass(storyName));
                    setProp(option, 'selected', storyName.value === selectedStoryName);
                    setProp(option, 'storyInfo', storyName.value);
                    addEl(selector, option);
                });
                setAttr(selector, 'size', Math.min(storyNames2.length, 10));
                showPersonalStories(selectedStoryName);
            });
        });
    };

    function updateAdaptationSelectorDelegate(event) {
        clearEl(getEl('personalStories'));
        const storyName = event.target.selectedOptions[0].storyInfo;
        updateSettings('storyName', storyName);
        updateSettings('characterNames', null);
        updateSettings('eventIndexes', null);
        showPersonalStories(storyName);
    }

    function updateAdaptationSelector(story, allCharacters) {
        const characterSelector = clearEl(getEl('events-characterSelector'));
        const eventSelector = clearEl(getEl('events-eventSelector'));

        let characterArray = getStoryCharacterCompleteness(story);
        let eventArray = getStoryEventCompleteness(story);

        const showOnlyUnfinishedStories = getEl('finishedStoryCheckbox').checked;
        if (showOnlyUnfinishedStories) {
            characterArray = characterArray.filter(elem => !elem.isFinished || elem.isEmpty);
            eventArray = eventArray.filter(elem => !elem.isFinished || elem.isEmpty);
        }

        const characterNames = getCharacterNames(characterArray);
        const eventIndexes = getEventIndexes(eventArray);

        const map = CommonUtils.arr2map(allCharacters, 'value');

        characterArray.forEach((elem) => {
            elem.displayName = map[elem.characterName].displayName;
            elem.value = map[elem.characterName].value;
        });

        characterArray.sort(Utils.charOrdAObject);

        let option;
        characterArray.forEach((elem) => {
            option = addEl(makeEl('option'), (makeText(elem.displayName)));
            addClass(option, getIconClass(elem));
            setProp(option, 'selected', characterNames.indexOf(elem.value) !== -1);
            setProp(option, 'storyInfo', story.name);
            setProp(option, 'characterName', elem.value);
            addEl(characterSelector, option);
        });
        setAttr(characterSelector, 'size', characterArray.length);

        eventArray.forEach((elem) => {
            option = addEl(makeEl('option'), (makeText(elem.name)));
            addClass(option, getIconClass(elem));
            setProp(option, 'selected', eventIndexes.indexOf(elem.index) !== -1);
            setProp(option, 'storyInfo', story.name);
            setProp(option, 'eventIndex222', elem.index);
            addEl(eventSelector, option);
        });
        setAttr(eventSelector, 'size', eventArray.length);

        const { selectedFilter } = DBMS.getSettings().Adaptations;
        getEl(selectedFilter).checked = true;
        updateFilter({
            target: {
                id: selectedFilter
            }
        });
    }

    function updateFilter(event) {
        updateSettings('selectedFilter', event.target.id);
        const byCharacter = event.target.id === 'adaptationFilterByCharacter';
        hideEl(getEl('events-characterSelectorDiv'), !byCharacter);
        hideEl(getEl('events-eventSelectorDiv'), byCharacter);
        if (byCharacter) {
            showPersonalStoriesByCharacters();
        } else {
            showPersonalStoriesByEvents();
        }
    }

    function showPersonalStoriesByCharacters() {
        const eventRows = queryElEls(exports.content, '.eventRow-dependent');
        eventRows.map(removeClass(R.__, 'hidden'));
        nl2array(queryElEls(exports.content, 'div[dependent-on-character]')).map(addClass(R.__, 'hidden'));

        const characterNames = nl2array(getEl('events-characterSelector').selectedOptions).map(opt => opt.characterName);
        characterNames.forEach(name => queryElEls(exports.content, `div[dependent-on-character="${name}"]`).map(removeClass(R.__, 'hidden')));
        eventRows.map(row => hideEl(row, R.intersection(row.dependsOnCharacters, characterNames).length === 0));
        
        updateSettings('characterNames', characterNames);
    }

    function showPersonalStoriesByEvents() {
        queryElEls(exports.content, 'div[dependent-on-character]').map(removeClass(R.__, 'hidden'));
        queryElEls(exports.content, '.eventRow-dependent').map(addClass(R.__, 'hidden'));

        const eventIndexes = nl2array(getEl('events-eventSelector').selectedOptions).map(opt => opt.eventIndex222);
        eventIndexes.forEach(index => removeClass(getEls(`${index}-dependent`)[0], 'hidden'));
        updateSettings('eventIndexes', eventIndexes);
    }

    function getStoryCharacterCompleteness(story) {
        return R.keys(story.characters).map(elem => ({
            characterName: elem,
            isFinished: _isStoryFinishedForCharacter(story, elem),
            isEmpty: _isStoryEmptyForCharacter(story, elem)
        }));
    }

    function _isStoryEmptyForCharacter(story, characterName) {
        return story.events.every(event => event.characters[characterName] === undefined);
    }

    function _isStoryFinishedForCharacter(story, characterName) {
        return story.events.filter(event => event.characters[characterName] !== undefined)
            .every(event => event.characters[characterName].ready === true);
    }

    function getStoryEventCompleteness(story) {
        return story.events.map((event, i) => ({
            name: event.name,
            index: i,
            isFinished: _isEventReady(event),
            isEmpty: Object.keys(event.characters).length === 0
        }));
    }

    function _isEventReady(event) {
        return R.values(event.characters).every(character => character.ready);
    }

    function showPersonalStories(storyName) {
        DBMS.getMetaInfo((err, metaInfo) => {
            if (err) { Utils.handleError(err); return; }
            DBMS.getStory(storyName, (err2, story) => {
                if (err2) { Utils.handleError(err2); return; }
                PermissionInformer.isEntityEditable('story', storyName, (err3, isStoryEditable) => {
                    if (err3) { Utils.handleError(err3); return; }
                    PermissionInformer.getEntityNamesArray('character', false, (err4, allCharacters) => {
                        if (err4) { Utils.handleError(err4); return; }

                        const characterNames = R.keys(story.characters);
                        const adaptations = characterNames.map(characterName => ({
                            characterName,
                            storyName
                        }));
                        PermissionInformer.areAdaptationsEditable(adaptations, (err5, areAdaptationsEditable) => {
                            if (err5) { Utils.handleError(err5); return; }
                            story.events.forEach((item, i) => (item.index = i));
                            buildAdaptationInterface(
                                storyName, characterNames, story.events, areAdaptationsEditable,
                                metaInfo
                            );
                            updateAdaptationSelector(story, allCharacters);
                            Utils.enable(exports.content, 'isStoryEditable', isStoryEditable);
                            Utils.enable(exports.content, 'notEditable', false);
                        });
                    });
                });
            });
        });
    }

    function buildAdaptationInterface(storyName, characterNames, events, areAdaptationsEditable, metaInfo) {
        const div = clearEl(getEl('personalStories'));
        if(events.length === 0) {
            const alert = qmte('.alert-block-tmpl');
            addEl(alert, makeText(L10n.get('advices', 'no-events-in-story')));
            addClass(alert, 'margin-bottom-8');
            addEl(div, alert);
        }
        if(characterNames.length === 0) {
            const alert = qmte('.alert-block-tmpl');
            addEl(alert, makeText(L10n.get('advices', 'no-characters-in-story')));
            addClass(alert, 'margin-bottom-8');
            addEl(div, alert);
        }
        const adaptationsNum = R.flatten(events.map(event => R.keys(event.characters))).length;
        if(adaptationsNum === 0) {
            const alert = qmte('.alert-block-tmpl');
            addEl(alert, makeText(L10n.get('advices', 'no-adaptations-in-story')));
            addClass(alert, 'margin-bottom-8');
            addEl(div, alert);
        }
        
        addEls(div, events.map((event) => {
            const row = qmte(`${root} .adaptation-row-tmpl`);
            addClass(row, `${event.index}-dependent`);
            row.dependsOnCharacters = R.keys(event.characters);
            addEl(qee(row, '.eventMainPanelRow-left'), exports.makeOriginCard(event, metaInfo, storyName, {

                showTimeInput: true,
                showTextInput: true,
                cardTitle: event.name
            }));
            addEls(qee(row, '.events-eventsContainer'), characterNames
                .filter(characterName => event.characters[characterName])
                .map((characterName) => {
                    const isEditable = areAdaptationsEditable[`${storyName}-${characterName}`];
                    return exports.makeAdaptationCard(isEditable, event, storyName, characterName, {
                        showFinishedButton: true,
                        showTimeInput: true,
                        showTextInput: true,
                        cardTitle: characterName
                    });
                }));

            return row;
        }));
    }

    exports.makeOriginCard = (event, metaInfo, storyName, opts) => {
        const card = qmte(`${root} .origin-tmpl`);
        addEl(qee(card, '.card-title'), makeText(opts.cardTitle));
        const textInput = qee(card, '.text-input');
        const timeInput = qee(card, '.time-input');
        const lockButton = qee(card, 'button.locked');

        if (opts.showTimeInput === true) {
            UI.makeEventTimePicker2(timeInput, {
                eventTime: event.time,
                index: event.index,
                preGameDate: metaInfo.preGameDate,
                date: metaInfo.date,
                onChangeDateTimeCreator: onChangeDateTimeCreator(storyName)
            });
        } else {
            addClass(timeInput, 'hidden');
        }

        if (opts.showTextInput === true) {
            textInput.value = event.text;
            textInput.dataKey = JSON.stringify([storyName, event.index]);
            listen(textInput, 'change', onChangeOriginText);
        } else {
            addClass(textInput, 'hidden');
        }

        if (opts.showLockButton === true) {
            listen(lockButton, 'click', onOriginLockClick(timeInput, textInput));
            Utils.enableEl(timeInput, false);
            Utils.enableEl(textInput, false);
            L10n.localizeStatic(card);
        } else {
            addClass(lockButton, 'hidden');
        }

        return card;
    };

    function onOriginLockClick(timeInput, textInput) {
        return (event) => {
            const { target } = event;
            const isLocked = hasClass(target, 'btn-primary');
            setClassByCondition(target, 'btn-primary', !isLocked);
            setClassByCondition(target, 'locked', !isLocked);
            setClassByCondition(target, 'unlocked', isLocked);
            Utils.enableEl(timeInput, isLocked);
            Utils.enableEl(textInput, isLocked);
        };
    }

    exports.makeAdaptationCard = R.curry((isEditable, event, storyName, characterName, opts) => {
        const card = qmte(`${root} .adaptation-tmpl`);
        setAttr(card, 'dependent-on-character', characterName);

        addEl(qee(card, '.card-title'), makeText(opts.cardTitle));
        const textInput = qee(card, '.text-input');
        const timeInput = qee(card, '.time-input');
        const finishedButton = qee(card, 'button.finished');
        const id = JSON.stringify([storyName, event.index, characterName]);

        if (opts.showTimeInput === true) {
            UI.populateAdaptationTimeInput(timeInput, storyName, event, characterName, isEditable);
        } else {
            addClass(timeInput, 'hidden');
        }

        if (opts.showTextInput === true) {
            setClassByCondition(textInput, 'notEditable', !isEditable);
            textInput.value = event.characters[characterName].text;
            textInput.dataKey = JSON.stringify([storyName, event.index, characterName]);
            listen(textInput, 'change', onChangeAdaptationText);
        } else {
            addClass(textInput, 'hidden');
        }

        if (opts.showFinishedButton === true) {
            const isFinished = event.characters[characterName].ready;
            setClassByCondition(finishedButton, 'notEditable', !isEditable);
            setClassIf(finishedButton, 'btn-primary', isFinished);
            finishedButton.id = id;
            const enableInputs = (value) => {
                Utils.enableEl(textInput, !value);
                Utils.enableEl(timeInput, !value);
            };
            enableInputs(isFinished);
            listen(finishedButton, 'click', UI.onChangeAdaptationReadyStatus2(enableInputs));
            L10n.localizeStatic(card);
        } else {
            addClass(finishedButton, 'hidden');
        }

        return card;
    });

    // eslint-disable-next-line no-var,vars-on-top
    var onChangeDateTimeCreator = R.curry((storyName, myInput) => (dp, input) => {
        DBMS.setEventOriginProperty(storyName, myInput.eventIndex, 'time', input.val(), Utils.processError());
        removeClass(myInput, 'defaultDate');
    });

    function onChangeOriginText(event) {
        const dataKey = JSON.parse(event.target.dataKey);
        const text = event.target.value;
        DBMS.setEventOriginProperty(dataKey[0], dataKey[1], 'text', text, Utils.processError());
    }

    function onChangeAdaptationText(event) {
        const dataKey = JSON.parse(event.target.dataKey);
        const text = event.target.value;
        DBMS.setEventAdaptationProperty(dataKey[0], dataKey[1], dataKey[2], 'text', text, Utils.processError());
    }

    function getIconClass(object) {
        if (object.isEmpty) return 'fa-icon empty select-icon-padding';
        if (object.isFinished) return 'fa-icon finished select-icon-padding';
        return 'fa-icon finished transparent-icon select-icon-padding';
    }

    function updateSettings(name, value) {
        const settings = DBMS.getSettings();
        settings.Adaptations[name] = value;
    }

    function getSelectedStoryName(storyNames) {
        const storyNamesOnly = storyNames.map(R.prop('storyName'));

        const settings = DBMS.getSettings();
        if (!settings.Adaptations) {
            settings.Adaptations = {
                storyName: storyNamesOnly[0],
                characterNames: null,
                eventIndexes: null,
                selectedFilter: 'adaptationFilterByCharacter'
            };
        }
        let { storyName } = settings.Adaptations;
        if (storyNamesOnly.indexOf(storyName) === -1) {
            // eslint-disable-next-line prefer-destructuring
            settings.Adaptations.storyName = storyNamesOnly[0];
            // eslint-disable-next-line prefer-destructuring
            storyName = storyNamesOnly[0];
        }
        return storyName;
    }

    function getNames(nameObjectArray, nameObjectProperty, settingsProperty) {
        const namesOnly = nameObjectArray.map(R.prop(nameObjectProperty));
        const names = DBMS.getSettings().Adaptations[settingsProperty];
        let existingNames;
        if (names === null) {
            existingNames = namesOnly;
        } else {
            existingNames = names.filter(name => namesOnly.indexOf(name) !== -1);
        }

        updateSettings(settingsProperty, existingNames);
        return existingNames;
    }

    function getCharacterNames(characterArray) {
        return getNames(characterArray, 'characterName', 'characterNames');
    }

    function getEventIndexes(eventArray) {
        return getNames(eventArray, 'index', 'eventIndexes');
    }
})(this.Adaptations = {});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const state = {};
    const root = '.briefing-export-tab ';

    state.templates = {};
    state.customDocxTemplate = null;

    let generateSingleDocx, generateSingleTxt, refreshStorySetSelect, refreshCharacterSetSelect;

    exports.init = () => {
//        listen(getEl('makeDefaultTextBriefings'), 'click', () => {
//            resolveTextTemplate((textTemplate) => {
//                makeTextBriefings('txt', generateSingleTxt(textTemplate));
//            });
//        });

        listen(getEl('makeCustomTextBriefings'), 'click', () => {
            makeTextBriefings(getEl('textTypeSelector').value, generateSingleTxt(getEl('templateArea').value));
        });
        listen(getEl('makeMarkdownBriefings'), 'click', () => {
            makeTextBriefings('html', R.compose(data => markdownit('commonmark').render(data), generateSingleTxt(getEl('templateArea').value)));
        });

        listen(getEl('docxBriefings'), 'change', readTemplateFile);
        listen(getEl('docxBriefings'), 'focus', (e) => {
            e.target.value = '';
            state.customDocxTemplate = null;
        });

        listen(getEl('makeDocxBriefings'), 'click', () => {
            if (state.customDocxTemplate === null) {
                Utils.alert(getL10n('briefings-custom-docx-template-is-missing'));
            } else {
                exportDocxByTemplate(state.customDocxTemplate);
            }
        });


        let els = queryElEls(document, `${root} input[name=exportCharacterSelection]`);
        els.map(listen(R.__, 'change', onCharacterSelectionChange));
        getEl('exportAllCharacters').checked = true;

        els = queryElEls(document, `${root} input[name=exportStorySelection]`);
        els.map(listen(R.__, 'change', onStorySelectionChange));
        getEl('exportAllStories').checked = true;

        const el = getEl('briefingNumberSelector');
        Constants.briefingNumber.forEach(R.compose(addEl(el), makeOpt));
        listen(el, 'change', refreshCharacterRangeSelect);

        state.briefingNumberSelector = el;
        state.briefingIntervalSelector = getEl('briefingIntervalSelector');
        state.characterSetSelector = getEl('characterSetSelector');
        state.storySetSelector = getEl('storySetSelector');

        getEl('makeBriefingsByTime '.trim()).addEventListener('click', makeExport('templateByTime'));
        getEl('makeBriefingsByStory'.trim()).addEventListener('click', makeExport('templateByStory'));
        getEl('makeInventoryList   '.trim()).addEventListener('click', makeExport('inventoryTemplate'));

        UI.initTabPanel('exportModeButton', 'exportContainer');

        listen(getEl('previewTextOutput'), 'click', previewTextOutput);
        getEl('textBriefingPreviewArea').value = '';

        listen(getEl('showRawData'), 'click', previewTextDataAsIs);

        listen(getEl('convertToDocxTemplate'), 'click', convertToDocxTemplate);
        listen(getEl('generateByDocxTemplate'), 'click', generateByDocxTemplate);

        exports.content = queryEl(root);
    };

    exports.refresh = () => {
        resolveTextTemplate((textTemplate) => {
            getEl('templateArea').value = textTemplate;
            refreshCharacterRangeSelect();
            refreshCharacterSetSelect();
            refreshStorySetSelect();
        });
    };

    function resolveTextTemplate(callback) {
        DBMS.getProfileStructure('character', (err, profileSettings) => {
            if (err) { Utils.handleError(err); return; }
            const func = R.compose(R.join(''), R.insert(1, R.__, ['{{profileInfo-', '}}\n']), R.prop('name'));
            const filter = R.compose(R.equals(true), R.prop('doExport'));
            const value = profileSettings.filter(filter).map(func).join('');

            callback(R.replace(/\{0\}/g, value, TEXT_TEMPLATE));
        });
    }

    function onCharacterSelectionChange(event) {
        const exportCharacterRange = event.target.id === 'exportCharacterRange';
        const exportCharacterSet = event.target.id === 'exportCharacterSet';
        hideEl(getEl('characterRangeSelect'), !exportCharacterRange);
        hideEl(getEl('characterSetSelect'), !exportCharacterSet);
    }

    function onStorySelectionChange(event) {
        const exportStorySet = event.target.id === 'exportStorySet';
        hideEl(getEl('storySetSelect'), !exportStorySet);
    }

    function getSelectedUsers() {
        const { id } = getSelectedRadio(qe(root), 'input[name=exportCharacterSelection]');
        switch (id) {
        case 'exportAllCharacters':
            return null;
        case 'exportCharacterRange':
            return JSON.parse(state.briefingIntervalSelector.selectedOptions[0].value);
        case 'exportCharacterSet':
            return nl2array(state.characterSetSelector.selectedOptions).map(opt => opt.value);
        default:
            Utils.alert(`unexpected id: ${id}`);
        }
        return null;
    }

    function getSelectedStories() {
        const { id } = getSelectedRadio(qe(root), 'input[name=exportStorySelection]');
        switch (id) {
        case 'exportAllStories':
            return null;
        case 'exportStorySet':
            return nl2array(state.storySetSelector.selectedOptions).map(opt => opt.value);
        default:
            Utils.alert(`unexpected id: ${id}`);
        }
        return null;
    }

    function refreshCharacterRangeSelect() {
        const selector = clearEl(state.briefingIntervalSelector);
        const num = Number(state.briefingNumberSelector.value);

        let chunks;
        PermissionInformer.getEntityNamesArray('character', false, (err, names) => {
            if (err) { Utils.handleError(err); return; }
            if (names.length > 0) {
                chunks = R.splitEvery(num, names);
                const data = chunks.map(chunk => ({
                    id: JSON.stringify(chunk.map(nameInfo => nameInfo.value)),
                    text: chunk.length === 1 ? chunk[0].displayName :
                        `${chunk[0].displayName} - ${chunk[chunk.length - 1].displayName}`
                }));

                $(`#${state.briefingIntervalSelector.id}`).select2({ data });
            }
        });
    }


    function refreshSetSelect(entityType, selectorName) {
        const multiSel = clearEl(state[selectorName]);
        PermissionInformer.getEntityNamesArray(entityType, false, (err, names) => {
            if (err) { Utils.handleError(err); return; }
            if (names.length > 0) {
                fillSelector(multiSel, names.map(remapProps4Select));
                setAttr(multiSel, 'size', names.length > 15 ? 15 : names.length);
            }
        });
    }

    refreshStorySetSelect = () => refreshSetSelect('story', 'storySetSelector');
    refreshCharacterSetSelect = () => refreshSetSelect('character', 'characterSetSelector');

    function makeExport(type) {
        return () => {
            if (!state.templates[type]) {
                state.templates[type] = atob(templatesArr[type]);
            }
            exportDocxByTemplate(state.templates[type]);
        };
    }

    function postprocessCheckboxes(briefingData, profileStructure, prefix, arrName) {
        const checkboxNames = profileStructure.filter(item => item.type === 'checkbox').map(R.prop('name'));
        briefingData.briefings.forEach((charData) => {
            if (charData[arrName] === undefined) return;
            charData[arrName].forEach((element) => {
                if (checkboxNames.indexOf(element.itemName) !== -1) {
                    element.value = constL10n(Constants[element.value]);
                    element.splittedText = [{ string: element.value }];
                }
            });
            checkboxNames.forEach((name) => {
                charData[prefix + name] = constL10n(Constants[charData[prefix + name]]);
            });
        });
    }

    function getBriefingData(callback) {
        DBMS.getBriefingData(getSelectedUsers(), getSelectedStories(), getEl('exportOnlyFinishedStories').checked, (err, briefingData) => {
            if (err) { Utils.handleError(err); return; }
            // some postprocessing
            DBMS.getProfileStructure('character', (err2, characterProfileStructure) => {
                if (err2) { Utils.handleError(err2); return; }
                DBMS.getProfileStructure('player', (err3, playerProfileStructure) => {
                    if (err3) { Utils.handleError(err3); return; }
                    postprocessCheckboxes(briefingData, characterProfileStructure, 'profileInfo-', 'profileInfoArray');
                    postprocessCheckboxes(briefingData, playerProfileStructure, 'playerInfo-', 'playerInfoArray');
                    callback(null, briefingData);
                });
            });
        });
    }

    function exportDocxByTemplate(template) {
        getBriefingData((err, briefingData) => {
            if (err) { Utils.handleError(err); return; }
            generateBriefings(briefingData, 'docx', generateSingleDocx('blob', template), generateSingleDocx('Uint8Array', template));
        });
    }

    function convertToDocxTemplate() {
        const docxTemplate = makeDocxTemplate('blob');
        Utils.confirm(getL10n('briefings-save-file'), () => {
            saveAs(docxTemplate, FileUtils.makeFileName('template', 'docx'));
        });
    }

    function generateByDocxTemplate() {
        exportDocxByTemplate(makeDocxTemplate('Uint8Array'));
    }

    function makeDocxTemplate(type) {
        let template = getEl('templateArea').value;

        const replaceBrackets = R.pipe(R.replace(/{{{/g, '{'), R.replace(/}}}/g, '}'), R.replace(/{{/g, '{'), R.replace(/}}/g, '}'));
        template = replaceBrackets(template).split('\n').map(string => ({ string }));

        if (!state.templates.genericTemplate) {
            state.templates.genericTemplate = atob(templatesArr.genericTemplate);
        }

        const doc = new window.Docxgen(state.templates.genericTemplate);
        doc.setData({
            splittedText: template
        });
        doc.render();
        return doc.getZip().generate({
            type
        });
    }
    function previewTextDataAsIs() {
        getBriefingData((err, briefingData) => {
            if (err) { Utils.handleError(err); return; }
            getEl('textBriefingPreviewArea').value = JSON.stringify(briefingData, null, '  ');
        });
    }

    function previewTextOutput() {
        getBriefingData((err, data) => {
            if (err) { Utils.handleError(err); return; }
            getEl('textBriefingPreviewArea').value = generateSingleTxt(getEl('templateArea').value, data);
        });
    }

    function makeTextBriefings(fileType, delegate) {
        getBriefingData((err, briefingData) => {
            if (err) { Utils.handleError(err); return; }
            generateBriefings(briefingData, fileType, (data) => {
                const result = delegate(data);
                return new Blob([result], {
                    type: 'text/plain;charset=utf-8'
                });
            }, delegate);
        });
    }

    function readTemplateFile(evt) {
        // Retrieve the first (and only!) File from the FileList object
        const f = evt.target.files[0];

        if (f) {
            const r = new FileReader();
            r.onload = (e) => {
                state.customDocxTemplate = e.target.result;
                Utils.alert(getL10n('briefings-template-is-loaded'));
            };
            r.readAsBinaryString(f);
        } else {
            Utils.alert(getL10n('briefings-error-on-template-uploading'));
        }
    }

    function updateStatus(text) {
        const exportStatus = getEl('exportStatus');
        clearEl(exportStatus);
        exportStatus.appendChild(makeText(text));
    }

    function generateBriefings(briefingData, fileType, oneFileDelegate, separateFileDelegate) {
        const toSeparateFiles = getEl('toSeparateFileCheckbox').checked;

        const fileName = 'characterSheets';

        let out, archive;
        updateStatus(getL10n('briefings-save-preparing'));
        try {
            if (toSeparateFiles) {
                const zip = new JSZip();
                const content = zip.generate();
                updateStatus(getL10n('briefings-start-saving'));

                const res = makeArchiveData(briefingData, separateFileDelegate);
                R.keys(res).forEach((key) => {
                    zip.file(`${key}.${fileType}`, res[key]);
                });

                updateStatus(getL10n('briefings-archiving'));
                archive = zip.generate({ type: 'blob' });
                updateStatus(getL10n('briefings-archive-is-ready'));
                saveFile('briefings-save-archive', archive, fileName, 'zip');
            } else {
                updateStatus(getL10n('briefings-start-saving'));
                out = oneFileDelegate(briefingData);
                updateStatus(getL10n('briefings-file-is-ready'));
                saveFile('briefings-save-file', out, fileName, fileType);
            }
        } catch (err) {
            Utils.alert(getL10n('briefings-error-on-generating-briefings'));
            console.log(err);
        }
    }

    function saveFile(msgKey, out, fileName, extension) {
        Utils.confirm(getL10n(msgKey), () => {
            saveAs(out, FileUtils.makeFileName(fileName, extension));
        });
    }

    function makeArchiveData(briefingData, generateSingleDelegate) {
        const res = {};
        briefingData.briefings.forEach((briefing, i) => {
            const name = briefing.charName + (briefing.playerName ? `_${briefing.playerName}` : '')
            res[name] = generateSingleDelegate({
                gameName: briefingData.gameName,
                briefings: [briefing]
            });
            updateStatus(strFormat(getL10n('briefings-save-status'), [i + 1, briefingData.briefings.length]));
        });
        return res;
    }

    generateSingleDocx = R.curry((type, template, data) => {
        const doc = new window.Docxgen(template);
        doc.setData(data);
        doc.render(); // apply them (replace all occurences of {first_name} by
        // Hipp, ...)
        const out = doc.getZip().generate({
            type
        });
        return out;
    });

    generateSingleTxt = R.curry((template, data) => {
        try {
            return Mustache.render(template, data);
        } catch (err) {
            Utils.alert(strFormat(getL10n('briefings-template-error'), [err.message]));
            throw err;
        }
    });
})(this.BriefingExport = {});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const state = {};
    const root = '#briefingPreviewDiv ';
    const settingsPath = 'BriefingPreview';
    const l10n = L10n.get('briefings');

    exports.init = () => {
        $('#briefingCharacter').select2().on('change', buildContentDelegate);

        let button = getEl('eventGroupingByStoryRadio');
        listen(button, 'change', exports.refresh);
        button.checked = true;

        button = getEl('adaptationsModeRadio');
        listen(button, 'change', exports.refresh);
        button.checked = true;

        listen(getEl('eventGroupingByTimeRadio'), 'change', exports.refresh);
        listen(getEl('proofreadingModeRadio'), 'change', exports.refresh);
        listen(getEl('hideAllPanelsCheckbox'), 'change', exports.refresh);
        listen(getEl('disableHeadersCheckbox'), 'change', exports.refresh);

        getEl('hideAllPanelsCheckbox').checked = true;
        
//        listen(getEl('contentArea'), 'scroll', updateGutterScrollPos);
//        listen(getEl('contentArea'), 'resize', rebuildGutter);
        
        initPanelsArr();

        exports.content = getEl('briefingPreviewDiv');
    };
    
//    function updateGutterScrollPos (){
//        let doc = getEl('contentArea');
//        let position = qe(`${root} .gutter-scroll-position`);
//        position.style.top = (doc.scrollTop)/doc.scrollHeight*100 + '%';
//        position.style.height = (doc.clientHeight)/doc.scrollHeight*100 + '%';
//    }
//    
//    function rebuildGutter() {
//        let doc = getEl('contentArea');
//        const gutter = clearEl(qe(`${root} .gutter`));
//        const scrollPos = addClass(makeEl('div'), 'gutter-scroll-position');
//        addEl(gutter, scrollPos);
//        updateGutterScrollPos();
//        
//        const btn = makeEl('button');
//        btn.style.top = '0%';
////        const title = qee(panel, '.panel-title').innerHTML.trim();
//        setAttr(btn, 'title', l10n('to-page-top'));
//        listen(btn, 'click', () => {
//            doc.scrollTop = 0;
////            panel.scrollIntoView();
//        });
//        addEl(gutter, btn);
//        
//        const panels = qees(doc, '#briefingContent > .panel');
//        addEls(gutter, panels.map(panel => {
//            const btn = makeEl('button');
//            btn.style.top = (panel.offsetTop)/doc.scrollHeight*100 + '%';
//            
//            const panelTitle = qee(panel, '.panel-title');
//            const title = panelTitle.innerText || panelTitle.textContent;
//            setAttr(btn, 'title', title);
//            listen(btn, 'click', () => {
//                doc.scrollTop = panel.offsetTop - 40;
////                panel.scrollIntoView();
//            });
//            return btn;
//        }));
//        
//    }

    exports.refresh = () => {
        clearEl(getEl('briefingCharacter'));
        clearEl(getEl('briefingContent'));

        DBMS.getProfileStructure('character', (err, characterProfileStructure) => {
            if (err) { Utils.handleError(err); return; }
            DBMS.getProfileStructure('player', (err2, playerProfileStructure) => {
                if (err2) { Utils.handleError(err2); return; }
                state.characterProfileStructure = characterProfileStructure;
                state.playerProfileStructure = playerProfileStructure;
                PermissionInformer.getEntityNamesArray('character', false, (err3, names) => {
                    if (err3) { Utils.handleError(err3); return; }
                    
                    showEl(qe(`${root} .alert`), names.length === 0);
                    showEl(qe(`${root} > div > div > .panel`), names.length !== 0);
                    showEl(qe(`${root} #briefingCharacter`), names.length !== 0);
                    
                    if (names.length > 0) {
                        const characterName = UI.checkAndGetEntitySetting(settingsPath, names);
                        const data = getSelect2Data(names);
                        // this call trigger buildContent
                        $('#briefingCharacter').select2(data).val(characterName).trigger('change');
                    }
                });
            });
        });
    };

    function buildContentDelegate(event) {
        buildContent(event.target.value);
    }

    function buildContent(characterName) {
        UI.updateEntitySetting(settingsPath, characterName);
        const content = clearEl(getEl('briefingContent'));
        let index = 0;
        const data = {
            characterName
        };
        function buildContentInner() {
            if (index < state.panels.length) {
                index++;
                state.panels[index - 1].load(data, buildContentInner);
            } else {
                state.panels.map(R.prop('make')).forEach((make) => {
                    make(content, data);
                });
//                rebuildGutter();
            }
        }
        buildContentInner();
    }

    function getFlags() {
        return {
            isAdaptationsMode: getEl('adaptationsModeRadio').checked,
            isGroupingByStory: getEl('eventGroupingByStoryRadio').checked,
            disableHeaders: getEl('disableHeadersCheckbox').checked,
            hideAllPanels: getEl('hideAllPanelsCheckbox').checked
        };
    }

    function initPanelsArr(){
        state.panels = [{
            name: 'storyRights',
            load(data, callback) {
                PermissionInformer.getEntityNamesArray('story', true, (err, userStoryNames) => {
                    if (err) { Utils.handleError(err); return; }
                    data.userStoryNamesMap = R.indexBy(R.prop('value'), userStoryNames);
                    callback();
                });
            },
            make(el, data) {}
        }, {
            name: 'characterProfile',
            load(data, callback) {
                DBMS.getProfile('character', data.characterName, (err, profile) => {
                    if (err) { Utils.handleError(err); return; }
                    data.profile = profile;
                    callback();
                });
            },
            make(el, data) {
                const label = strFormat(getL10n('briefings-character-profile'), [data.characterName]);
                addEl(el, makePanel(
                    makeText(label),
                    UI.makeProfileTable(state.characterProfileStructure, data.profile), getFlags().hideAllPanels
                ));
            }
        }, {
            name: 'playerProfile',
            load(data, callback) {
                DBMS.getProfileBinding('character', data.characterName, (err, binding) => {
                    if (err) { Utils.handleError(err); return; }
                    if (binding[1] === '') {
                        callback();
                    } else {
                        DBMS.getProfile('player', binding[1], (err2, playerProfile) => {
                            if (err2) { Utils.handleError(err2); return; }
                            data.playerProfile = playerProfile;
                            // eslint-disable-next-line prefer-destructuring
                            data.playerName = binding[1];
                            callback();
                        });
                    }
                });
            },
            make(el, data) {
                if (data.playerProfile) {
                    const label = strFormat(getL10n('briefings-player-profile'), [data.playerName]);
                    addEl(el, makePanel(
                        makeText(label),
                        UI.makeProfileTable(state.playerProfileStructure, data.playerProfile), getFlags().hideAllPanels
                    ));
                }
            }
        }, {
            name: 'inventory',
            load(data, callback) {
                DBMS.getAllInventoryLists(data.characterName, (err, allInventoryLists) => {
                    if (err) { Utils.handleError(err); return; }
                    data.allInventoryLists = allInventoryLists.sort(CommonUtils.charOrdAFactory(R.compose(R.toLower, R.prop('storyName'))));
                    callback();
                });
            },
            make(el, data) {
                addEl(el, makePanel(
                        makeText(`${getL10n('briefings-inventory')} (${data.allInventoryLists.length})`),
                        makeInventoryContent(
                                data.allInventoryLists,
                                data.characterName, data.userStoryNamesMap
                        ), getFlags().hideAllPanels
                ));
            }
        }, {
            name: 'groups',
            load(data, callback) {
                DBMS.getCharacterGroupTexts(data.characterName, (err, groupTexts) => {
                    if (err) { Utils.handleError(err); return; }
                    data.groupTexts = groupTexts;
                    callback();
                });
            },
            make(el, data) {
                addEl(el, makePanel(
                        makeText(`${getL10n('header-groups')} (${data.groupTexts.length})`),
                        makeGroupContent(data.groupTexts), getFlags().hideAllPanels
                ));
            }
        }, {
            name: 'relations',
            load: Relations.load,
            make(el, data) {
                const label = `${getL10n('header-relations')} (${data.relationsSummary.relations.length})`;
                const content = RelationsPreview.makeRelationsContent(
                        data, getFlags().isAdaptationsMode,
                        state.characterProfileStructure, exports.refresh
                );
                addEl(el, makePanel(makeText(label), content, getFlags().hideAllPanels));
            }
        }, {
            name: 'stories',
            load(data, callback) {
                callback();
            },
            make(el, data) {
                const flags = getFlags();
                if (flags.isGroupingByStory) {
                    showEventsByStory(el, data.characterName, data.userStoryNamesMap, flags);
                } else {
                    showEventsByTime(el, data.characterName, data.userStoryNamesMap, flags);
                }
            }
        }];
    }

    function onBuildContentFinish() {
        UI.initTextAreas(`${root} #briefingContent textarea`);
        UI.refreshTextAreas(`${root} #briefingContent textarea`);
        Utils.enable(exports.content, 'notEditable', false);
    }


    function makePanel(title, content, hideAllPanels) {
        const panelInfo = UI.makePanelCore(title, content);
        UI.attachPanelToggler(panelInfo.a, panelInfo.contentDiv, (event, togglePanel) => {
            togglePanel();
//            rebuildGutter();
            UI.refreshTextAreas(`${root} #briefingContent textarea`);
        });
        if (hideAllPanels) {
            panelInfo.a.click();
        }
        return panelInfo.panel;
    }

    function makeGroupContent(groupTexts) {
        return addEls(makeEl('div'), groupTexts.map((groupText) => {
            const div = makeEl('div');
            addEl(div, addEl(makeEl('h4'), makeText(groupText.groupName)));
            const span = addEl(makeEl('textarea'), makeText(groupText.text));
            setAttr(span, 'disabled', 'disabled');
            addClasses(span, ['briefingTextSpan', 'form-control']);
            return addEl(div, span);
        }));
    }

    function makeInventoryContent(allInventoryLists, characterName, userStoryNamesMap) {
        const container = qmte('.profile-editor-container-tmpl');
        return addEls(container, allInventoryLists.map((elem) => {
            const input = makeEl('input');
            input.value = elem.inventory;
            input.storyName = elem.storyName;
            input.characterName = characterName;
            addClasses(input, ['inventoryInput', 'form-control']);
            if (!userStoryNamesMap[elem.storyName]) {
                addClass(input, 'notEditable');
            }
            listen(input, 'change', updateCharacterInventory);

            const row = qmte('.profile-editor-row-tmpl');
            addEl(qee(row, '.profile-item-name'), makeText(elem.storyName));
            addEl(qee(row, '.profile-item-input'), input);
            return row;
        }));
    }

    function showEventsByTime(content, characterName, userStoryNamesMap, flags) {
        DBMS.getCharacterEventsByTime(characterName, (err, allEvents) => {
            if (err) { Utils.handleError(err); return; }
            const adaptations = allEvents.map(event => ({
                characterName,
                storyName: event.storyName
            }));

            PermissionInformer.areAdaptationsEditable(adaptations, (err2, areAdaptationsEditable) => {
                if (err2) { Utils.handleError(err2); return; }

                DBMS.getMetaInfo((err3, metaInfo) => {
                    if (err3) { Utils.handleError(err3); return; }

                    const opts = {
                        userStoryNamesMap,
                        areAdaptationsEditable,
                        showStoryName: true,
                        metaInfo
                    };

                    const splitConstant = 5;

                    addEls(content, R.splitEvery(splitConstant, allEvents).map((subPart, i) => {
                        const eventContent = addEls(makeEl('div'), subPart.map((event, j) => {
                            opts.index = (i * splitConstant) + 1 + j;
                            return showEvent(event, characterName, opts, flags);
                        }));

                        let name;
                        if (flags.disableHeaders) {
                            name = makeText(strFormat(getL10n('briefings-events-header'), [(i * splitConstant) + 1, (i * splitConstant) + subPart.length]));
                        } else {
                            name = addEls(makeEl('div'), subPart.map(event => getEventHeaderDiv(event, true)));
                        }
                        return makePanel(name, eventContent, flags.hideAllPanels);
                    }));
                    onBuildContentFinish();
                });
            });
        });
    }

    function getStoryHeader(elem, i, disableHeaders) {
        let name;
        if (disableHeaders) {
            name = strFormat(getL10n('briefings-story-header'), [i + 1]);
        } else {
            name = elem.storyName;
        }
        return makeText(`${name} (${elem.events.length})`);
    }

    function showEventsByStory(content, characterName, userStoryNamesMap, flags) {
        DBMS.getCharacterEventGroupsByStory(characterName, (err, eventGroups) => {
            if (err) { Utils.handleError(err); return; }
            const adaptations = eventGroups.map(elem => ({
                characterName,
                storyName: elem.storyName
            }));
            PermissionInformer.areAdaptationsEditable(adaptations, (err2, areAdaptationsEditable) => {
                if (err2) { Utils.handleError(err2); return; }
                DBMS.getMetaInfo((err3, metaInfo) => {
                    if (err3) { Utils.handleError(err3); return; }
                    const opts = {
                        userStoryNamesMap,
                        areAdaptationsEditable,
                        showStoryName: false,
                        metaInfo
                    };

                    addEls(content, eventGroups.map((elem, i) => {
                        const storyContent = addEls(makeEl('div'), elem.events.map((event, j) => {
                            opts.index = j + 1;
                            return showEvent(event, characterName, opts, flags);
                        }));
                        return makePanel(
                            getStoryHeader(elem, i, flags.disableHeaders), storyContent,
                            flags.hideAllPanels
                        );
                    }));
                    onBuildContentFinish();
                });
            });
        });
    }

    function getEventHeaderDiv(event, showStoryName) {
        const eventName = addEl(makeEl('span'), makeText(strFormat('{0} {1}', [showStoryName ? `${event.storyName}:` : '', event.name])));
        const eventTime = addClass(addEl(makeEl('span'), makeText(event.time)), 'previewEventTime');
        return addEls(makeEl('div'), [eventTime, eventName]);
    }

    function showEvent(event, characterName, opts, flags) {
        const { isAdaptationsMode } = flags;
        const showAll = isAdaptationsMode;
        const storyName = event.storyName;
        const isStoryEditable = opts.userStoryNamesMap[storyName] !== undefined;
        const showAdaptationText = event.characters[characterName].text !== '';
        const showSubjectiveTime = event.characters[characterName].time !== '';

        const eventDiv = qmte('.adaptation-row-tmpl');
        const originCard = Adaptations.makeOriginCard(event, opts.metaInfo, event.storyName, {
            cardTitle: flags.disableHeaders ? L10n.format('briefings', 'event-header', [opts.index]) : event.name,
            showTimeInput: showAll || !showSubjectiveTime,
            showLockButton: true,
            showTextInput: showAll || !showAdaptationText
        });
        if(!isStoryEditable){
            qees(originCard, '.isStoryEditable').forEach(addClass(R.__, 'notEditable'));
        }
        addEl(qee(eventDiv, '.eventMainPanelRow-left'), originCard);
        const isEditable = opts.areAdaptationsEditable[`${event.storyName}-${characterName}`];
        const adaptationsCard = Adaptations.makeAdaptationCard(
            isEditable, event,
            event.storyName, characterName, {
                cardTitle: '',
                showTimeInput: showAll || showSubjectiveTime,
                showFinishedButton: true,
                showTextInput: showAll || showAdaptationText
            }
        );
        addEl(qee(eventDiv, '.eventMainPanelRow-left'), adaptationsCard);
        return eventDiv;
    }

    function updateCharacterInventory(event) {
        const {
            storyName, characterName, value
        } = event.target;
        DBMS.updateCharacterInventory(storyName, characterName, value, Utils.processError());
    }
})(this.BriefingPreview = {});

/*Copyright 2018 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const root = '.relations-tab ';
    const state = {};
    const settingsPath = 'Relations';

    exports.init = () => {
        $(`${root} .character-select`).select2().on('change', buildContent);
        exports.content = queryEl(root);
    };

    exports.refresh = () => {
        clearEl(queryEl(`${root} .character-select`));
        clearEl(queryEl(`${root} .panel-body`));

        DBMS.getProfileStructure('character', (err, characterProfileStructure) => {
            if (err) { Utils.handleError(err); return; }
            state.characterProfileStructure = characterProfileStructure;
            PermissionInformer.getEntityNamesArray('character', false, (err3, names) => {
                if (err3) { Utils.handleError(err3); return; }
                
                showEl(qe(`${root} .alert`), names.length < 2);
                showEl(qe(`${root} > .panel`), names.length > 1);
                
                if (names.length > 0) {
                    const characterName = UI.checkAndGetEntitySetting(settingsPath, names);
                    const data = getSelect2Data(names);
                    // this call trigger buildContent
                    $(`${root} .character-select`).select2(data).val(characterName).trigger('change');
                }
            });
        });
    };

    function buildContent(event) {
        clearEl(queryEl(`${root} .panel-body`));
        const characterName = event.target.value;
        UI.updateEntitySetting(settingsPath, characterName);
        state.data = {};
        state.data.characterName = characterName;
        exports.load(state.data, buildContentInner);
    }

    function buildContentInner() {
        const content = RelationsPreview.makeRelationsContent(
            state.data, true, state.characterProfileStructure,
            exports.refresh
        );
        addEl(queryEl(`${root} .panel-body`), content);
        UI.initTextAreas(`${root} .panel-body textarea`);
        UI.refreshTextAreas(`${root} .panel-body textarea`);
    }

    exports.load = (data, callback) => {
        DBMS.getAllProfiles('character', (err, profiles) => {
            if (err) { Utils.handleError(err); return; }
            DBMS.getRelationsSummary(data.characterName, (err2, relationsSummary) => {
                if (err2) { Utils.handleError(err2); return; }
                DBMS.getExtendedProfileBindings((err3, profileBindings) => {
                    if (err3) { Utils.handleError(err3); return; }
                    PermissionInformer.getEntityNamesArray('character', false, (err4, characterNamesArray) => {
                        if (err4) { Utils.handleError(err4); return; }
                        data.relationsSummary = relationsSummary;
                        data.characterNamesArray = characterNamesArray;
                        data.profiles = profiles;
                        data.profileBindings = R.fromPairs(profileBindings);
                        callback();
                    });
                });
            });
        });
    };
})(this.Relations = {});

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const relationTableHeader = ['character-name', 'direct-relation', 'relation-origin', 'reverse-relation'];
    const partialTableHeader = ['character-name', 'direct-relation'];

    let makeNewRow;
    const l10n = L10n.get('briefings');

    const findRel = R.curry((fromCharacter, toCharacter, relations) => {
        const findFunc = R.curry((fromCharacter2, toCharacter2, rel) =>
            rel[fromCharacter2] !== undefined && rel[toCharacter2] !== undefined);
        return R.find(findFunc(fromCharacter, toCharacter), relations);
    });

    exports.makeRelationsContent = (data, isAdaptationsMode, profileSettings, externalRefresh) => {
        const {
            characterName, relationsSummary, profiles, profileBindings
        } = data;
        let { characterNamesArray } = data;

        characterNamesArray = characterNamesArray.filter(R.compose(R.not, R.equals(characterName), R.prop('value')));

        const get2ndCharName = ProjectUtils.get2ndRelChar(characterName);
        const showCharacters = relationsSummary.relations.map(get2ndCharName).sort(CommonUtils.charOrdA);
        const noRelsList = characterNamesArray.filter(R.compose(R.not, R.contains(R.__, showCharacters), R.prop('value')));
        const predicate = R.compose(R.contains(R.__, R.keys(relationsSummary.knownCharacters)), R.prop('value'));
        const [knownNoRels, unknownNoRels] = R.partition(predicate, noRelsList);

        const relationTmpl = wrapEl('div', qte('.relation-tmpl'));
        const qe = qee(relationTmpl);
        const content = qe('.relation-content');
        const getProfileItemSelect = () => qe('.profile-item-select');

        makeProfileItemSelector(qe('.profile-item-select'), profileSettings, refreshProfileItem(content, profiles));

        const makeRow = makeNewRow(
            profiles, getProfileItemSelect, isAdaptationsMode, relationsSummary.knownCharacters, profileBindings,
            externalRefresh, characterName
        );

        // filling header - need table body for callbacks
        const makeRowCallback = R.compose(addEl(content), makeRow);
        addEl(qe('.known-characters-label'), makeText(l10n('known-characters')));
        const knownBtn = addEl(qe('.add-known-character-relation'), makeText(getL10n('common-add')));
        addEl(qe('.unknown-characters-label'), makeText(l10n('unknown-characters')));
        const unknownBtn = addEl(qe('.add-unknown-character-relation'), makeText(getL10n('common-add')));
        addEl(qe('.profile-item-label'), makeText(l10n('profile-item')));
        fillCharSelector(qe('.known-characters-select'), knownBtn, knownNoRels, characterName, makeRowCallback);
        fillCharSelector(qe('.unknown-characters-select'), unknownBtn, unknownNoRels, characterName, makeRowCallback);

        // filling table
        const toCharacterFilter = toCharacter => (isAdaptationsMode ? true :
            !R.isEmpty(findRel(characterName, toCharacter, relationsSummary.relations)[characterName]));
        const findRelTmp = findRel(characterName, R.__, relationsSummary.relations);
        addEls(content, showCharacters.filter(toCharacterFilter).map(toChar => makeRow(toChar, findRelTmp(toChar))));
        return relationTmpl;
    };

    function refreshProfileItem(content, profiles) {
        return (event) => {
            const dataArr = queryElEls(content, '[toCharacter]');
            dataArr.forEach((el) => {
                const char = getAttr(el, 'toCharacter');
                const selectedName = event.target.value;
                fillProfileItemContent(el, selectedName, profiles[char][selectedName]);
            });
        };
    }

    function makeProfileItemSelector(select1, profileSettings, refresh) {
        select1 = $(select1);
        const tmpSelect = select1.select2(arr2Select2(profileSettings.map(R.prop('name')).sort()));

        select1.select2({ width: 'style' });
        tmpSelect.on('change', refresh);
        if (profileSettings[0]) {
            tmpSelect.val(profileSettings[0].name).trigger('change');
        }
    }

    makeNewRow = R.curry((
        profiles, getProfileItemSelect, isAdaptationsMode, knownCharacters, profileBindings,
        externalRefresh, fromCharacter, toCharacter, rel
    ) => {
        const stories = knownCharacters[toCharacter];
        const row = qmte('.relation-row-tmpl');
        const qe = qee(row);
        addEl(qe('.to-character-name'), makeText(`${toCharacter}/${profileBindings[toCharacter]}`));
        addEl(qe('.where-meets-label'), makeText(l10n('where-meets')));
        addEl(qe('.where-meets-content'), makeText(stories === undefined ? '' : R.keys(stories).join(', ')));
        setAttr(qe('[toCharacter]'), 'toCharacter', toCharacter);
        fillProfileItemContent(row, getProfileItemSelect().value, profiles[toCharacter][getProfileItemSelect().value]);
        listen(qe('button.remove'), 'click', (event) => {
            Utils.confirm(strFormat(l10n('are-you-sure-about-relation-removing'), [`${`${fromCharacter}-${toCharacter}`}`]), () => {
                DBMS.removeCharacterRelation(fromCharacter, toCharacter, (err) => {
                    if (err) { Utils.handleError(err); return; }
                    externalRefresh();
                });
            });
        });

        const directText = qe('.direct textarea');
        directText.value = rel[fromCharacter];
        setAttr(directText, 'placeholder', L10n.format('briefings', 'relation-from-to', [fromCharacter, toCharacter]));
        listen(directText, 'change', (event) => {
            DBMS.setCharacterRelationText(
                fromCharacter, toCharacter, fromCharacter, event.target.value,
                Utils.processError()
            );
        });

        Constants.relationEssences.forEach((name) => {
            const btn = qe(`.${name}`);
            $(btn).tooltip({
                title: L10n.format('briefings', `${name}`, [fromCharacter, toCharacter]),
                placement: 'top'
            });
            let attrName = name;
            if (rel.starter !== fromCharacter) {
                if (name === 'starterToEnder') attrName = 'enderToStarter';
                if (name === 'enderToStarter') attrName = 'starterToEnder';
            }
            setClassByCondition(btn, 'btn-primary', rel.essence.indexOf(attrName) !== -1);
            listen(btn, 'click', (event) => {
                DBMS.setRelationEssenceStatus(fromCharacter, toCharacter, attrName, !hasClass(event.target, 'btn-primary'), (err) => {
                    if (err) { Utils.handleError(err); return; }
                    toggleClass(event.target, 'btn-primary');
                });
            });
        });

        const originText = qe('.origin textarea');
        originText.value = rel.origin;
        setAttr(originText, 'placeholder', l10n('relation-origin'));
        listen(originText, 'change', (event) => {
            DBMS.setOriginRelationText(fromCharacter, toCharacter, event.target.value, Utils.processError());
        });

        const reverseText = qe('.reverse textarea');
        reverseText.value = rel[toCharacter];
        setAttr(reverseText, 'placeholder', L10n.format('briefings', 'relation-from-to', [toCharacter, fromCharacter]));
        listen(reverseText, 'change', (event) => {
            DBMS.setCharacterRelationText(
                fromCharacter, toCharacter, toCharacter,
                event.target.value, Utils.processError()
            );
        });

        const directChecked = rel.starter === fromCharacter ? rel.starterTextReady : rel.enderTextReady;
        fillFinishedButton(
            qe('.direct .finished'), JSON.stringify([fromCharacter, toCharacter]), fromCharacter,
            toCharacter, fromCharacter, directChecked, directText
        );

        const reverseChecked = rel.starter === toCharacter ? rel.starterTextReady : rel.enderTextReady;
        fillFinishedButton(
            qe('.reverse .finished'), JSON.stringify([toCharacter, fromCharacter]), fromCharacter,
            toCharacter, toCharacter, reverseChecked, reverseText
        );

        if (!isAdaptationsMode) {
            removeClass(qe('.direct'), 'col-xs-3');
            addClass(qe('.direct'), 'col-xs-9');
            addClass(qe('.origin'), 'hidden');
            addClass(qe('.reverse'), 'hidden');
        }
        L10n.localizeStatic(row);

        return row;
    });

    function fillFinishedButton(button, id, fromCharacter, toCharacter, character, checked, textarea) {
        setClassIf(button, 'btn-primary', checked);
        Utils.enableEl(textarea, !checked);
        button.id = id;
        listen(button, 'click', (event) => {
            const newValue = !hasClass(button, 'btn-primary');
            setClassByCondition(button, 'btn-primary', newValue);
            Utils.enableEl(textarea, !newValue);
            DBMS.setRelationReadyStatus(fromCharacter, toCharacter, character, newValue, Utils.processError());
        });
    }

    function fillProfileItemContent(el, profileItemName, profileItemValue) {
        addEl(clearEl(qee(el, '.profile-item-name')), makeText(profileItemName));
        addEl(clearEl(qee(el, '.profile-item-value')), makeText(profileItemValue));
    }

    function fillCharSelector(select1, button, data, fromCharacter, makeRowCallback) {
        select1 = $(select1);
        const tmpSelect = select1.select2(getSelect2Data(data));
        select1.select2({ width: 'style' });
        listen(button, 'click', () => {
            const toCharacter = select1[0].value;
            DBMS.createCharacterRelation(fromCharacter, toCharacter, (err) => {
                if (err) { Utils.handleError(err); return; }
                DBMS.getCharacterRelation(fromCharacter, toCharacter, (err2, rel) => {
                    if (err2) { Utils.handleError(err2); return; }
                    makeRowCallback(select1[0].value, rel);
                    data = data.filter(R.compose(R.not, R.equals(select1[0].value), R.prop('value')));
                    clearEl(select1[0]);
                    select1.select2(getSelect2Data(data));
                });
            });
        });
    }
})(this.RelationsPreview = {});

/*Copyright 2015-2018 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const root = '.gears-tab';
    const state = {};
    const l10n = L10n.get('gears');
    state.nodesDataset = new vis.DataSet();
    state.edgesDataset = new vis.DataSet();
    
    exports.init = () => {
        state.addNodeDialog = UI.createModalDialog(root, updateNode, {
            bodySelector: 'add-or-edit-node-body',
            dialogTitle: 'gears-add-node',
            actionButtonTitle: 'common-save',
            onCancel: onNodeCancel
        });
        
        state.editNodeDialog = UI.createModalDialog(root, updateNode, {
            bodySelector: 'add-or-edit-node-body',
            dialogTitle: 'gears-edit-node',
            actionButtonTitle: 'common-save',
            onCancel: onNodeCancel
        });
        
        state.renameEdgeDialog = UI.createModalDialog(root, renameEdge, {
            bodySelector: 'modal-prompt-body',
            dialogTitle: 'gears-rename-edge',
            actionButtonTitle: 'common-save',
        });
        
        const configureNetworkDialog = UI.createModalDialog(root, (dialog) => () => dialog.hideDlg(), {
            bodySelector: 'config-inner-body',
            dialogTitle: 'gears-configure-network',
            actionButtonTitle: 'common-close',
        });
        
        addClass(qee(configureNetworkDialog, '.modal-dialog'), 'gears-config-dialog');
        
        queryEl(`${root} .custom-physics-settings`).value = '';
        
//        document.querySelector('.nodesText').value = charExample;
//        setAttr(document.querySelector('.nodesText'),'rows', charExample.split('\n').length);
//        document.querySelector('.edgesText').value = edgesExample;
//        setAttr(document.querySelector('.edgesText'),'rows', edgesExample.split('\n').length);
        
        listen(qe(`${root} .draw-button`), 'click', exports.refresh);
        listen(qe(`${root} .get-image-button`), 'click', getImage);
        listen(qe(`${root} .download-button`), 'click', downloadCsv);
        listen(qe(`${root} .download-json-button`), 'click', downloadJSON);
        listen(qe(`${root} .download-graphml-button`), 'click', downloadYED);
        listen(qe(`${root} .clear-button`), 'click', clearNetwork);
        
        listen(queryEl(`${root} .physics-settings-button`), 'click', () => configureNetworkDialog.showDlg());
        
        listen(queryEl(`${root} .search-node`), 'change', onNodeFocus);
        
        listen(queryEl(`${root} .custom-physics-settings-button`), 'click', () => {
            const options = queryEl(`${root} .custom-physics-settings`).value;
            if(options.trim() === ''){
                return;
            }
            if(CommonUtils.startsWith(options, 'var options = ')){
                options = options.substring('var options = '.length);
            }
            try{
                options = JSON.parse(options);
            }catch(e){
                console.error(e);
                Utils.alert(l10n('error-on-settings-loading'));
                return;
            }
            state.network.setOptions(options);
        });
        
        queryEl(`${root} .physics-enabled-checkbox`).checked = false;
        listen(queryEl(`${root} .physics-enabled-checkbox`), 'change', (event) => {
            DBMS.setGearsPhysicsEnabled(event.target.checked, (err) => {
                if (err) { Utils.handleError(err); return; }
                state.network.setOptions({
                    "physics": {
                        "enabled": event.target.checked,
                        "minVelocity": 0.75
                    }
                })
            });
        });
        
        queryEl(`${root} .show-notes-checkbox`).checked = false;
        listen(queryEl(`${root} .show-notes-checkbox`), 'change', (event) => {
            DBMS.setGearsShowNotesEnabled(event.target.checked, (err) => {
                if (err) { Utils.handleError(err); return; }
                exports.refresh();
            });
        });
        
        queryEl(`${root} .big-picture-checkbox`).checked = false;
        listen(queryEl(`${root} .big-picture-checkbox`), 'change', (event) => {
            setClassByCondition(queryEl(`${root} .mynetwork > div`),'big-picture',event.target.checked);
        });
        
        state.nodesDataset.on('*', () => {
            fillSearchSelect();
        });
        exports.content = queryEl(root);
    };

    exports.refresh = () => {
        DBMS.getAllGearsData((err, data) => {
            if (err) { Utils.handleError(err); return; }
            queryEl(`${root} .show-notes-checkbox`).checked = data.settings.showNotes;
            queryEl(`${root} .physics-enabled-checkbox`).checked = data.settings.physicsEnabled;
            
            data.nodes.forEach(node => {
                node.label = makeLabel(node.name, node.notes);
            });
            state.nodesDataset.clear();
            state.nodesDataset.add(data.nodes);
            state.edgesDataset.clear();
            state.edgesDataset.add(data.edges);
            drawNetwork();
        });
    };
    
    // create a network
    function drawNetwork() {
      const container = qe(`${root} .mynetwork`);
      clearEl(queryEl(`${root} .configInner`));
      const options = {
        locale: L10n.getLocale(),
        locales: Constants.visLocales,
        manipulation: {
            addNode: function (data, callback) {
                data.label = '';
                data.name = '';
                
                qee(state.addNodeDialog, '.node-id').value = data.id;
                qee(state.addNodeDialog, '.node-name').value = data.name;
                qee(state.addNodeDialog, '.node-group').value = '';
                qee(state.addNodeDialog, '.node-notes').value = '';
                
                state.nodeData = data;
                state.nodeCallback = callback;
                
                state.addNodeDialog.showDlg();
            },
            editNode: function (data, callback) {
                qee(state.editNodeDialog, '.node-id').value = data.id;
                qee(state.editNodeDialog, '.node-name').value = data.name;
                qee(state.editNodeDialog, '.node-group').value = data.group;
                qee(state.editNodeDialog, '.node-notes').value = data.notes;
                
                state.nodeData = data;
                state.nodeCallback = function(data) {
                    callback(data);
                }.bind(this);
                
                state.editNodeDialog.showDlg();
            },
            addEdge: function (data, callback) {
                data.arrows ='to';
                data.label ='';
                if (data.from == data.to) {
                    Utils.confirm(l10n('do-you-want-to-connect-node-to-itself'), () => {
                        callback(data);
                    }, () => callback());
                }
                else {
                  callback(data);
                }
            },
            editEdge:function (data, callback) {
                callback(data);
                storeData();
            },
            deleteNode:function (data, callback) {
                callback(data);
                storeData();
            },
            deleteEdge:function (data, callback) {
                callback(data);
                storeData();
            },
        },
        physics: {
          enabled: queryEl(`${root} .physics-enabled-checkbox`).checked,
          stabilization: false
        },
        "edges": {
          "smooth": {
            "type": "discrete",
            "forceDirection": "none"
          }
        },
        configure: {
          filter:function (option, path) {
            if (path.indexOf('physics') !== -1) {
              return true;
            }
            if (path.indexOf('smooth') !== -1 || option === 'smooth') {
              return true;
            }
            return false;
          },
          container: qe(`${root} .configInner`)
        }
      };
      const data = {
        nodes: state.nodesDataset,
        edges: state.edgesDataset
      };
      state.network = new vis.Network(container, data, options);
      state.network.on('selectEdge', showEdgeLabelEditor);
      state.network.on('dragEnd', (params) => storeData());
      state.network.on('stabilized', (params) => storeData());
    }
    
    function storeData(callback){
        DBMS.setGearsData(exportNetwork(), (err) => {
            if (err) { Utils.handleError(err); return; }
            if(callback) callback();
        });
    }
    
    function exportNetwork() {
        state.network.storePositions();
        const nodePositions = state.network.getPositions();
        
        console.log(nodePositions);
        const nodes = R.clone(state.nodesDataset.get());
        const edges = state.edgesDataset.get();
        nodes.forEach(node => delete node.color);
        return {
            nodes,
            edges
        };
    }
    
    function importNetwork(data) {
        const {nodes, edges} = data;
        state.nodesDataset.clear();
        state.edgesDataset.clear();
        state.nodesDataset.update(nodes);
        state.edgesDataset.update(edges);
    }

    function showEdgeLabelEditor(params) {
        if (params.edges.length !== 0 && params.nodes.length === 0) {
            const edge = state.edgesDataset.get(params.edges[0]);
            qee(state.renameEdgeDialog, '.entity-input').value = edge.label || '';
            state.edgeData = edge;
            state.edgeCallback = (edge) => state.edgesDataset.update(edge);
            state.renameEdgeDialog.showDlg();
        }
    }

    function makeLabel(name, notes){
      let label = prepareStr(name); 
      if(queryEl(`${root} .show-notes-checkbox`).checked){
        label += (notes.trim() !== '' ? ('\n\n' + prepareStr(notes)) : '');
      }
      return label;
    }

    function prepareStr(text) {
        const maxStrLength = 30;
        return text.split('\n').map((str, i, strings) => {
            let counter = 0;
            const words = str.split(' ');
            return words.reduce((acc, word) => {
                if((counter + word.length + 1) <=  maxStrLength) {
                    acc += word + ' ';
                    counter += word.length + 1;
                } else {
                    acc += '\n' + word + ' ';
                    counter = 0;
                }
                return acc;
            }, '');
        }).join('\n');
        
        
//        return text.split('\n').map(R.splitEvery(30)).map(R.join('-\n')).join('\n');
    }


    function getImage(event){
      const canvas = document.querySelector("canvas");
      
      const context = canvas.getContext("2d");
      const w = canvas.width;
      const h = canvas.height;
      
      context.globalCompositeOperation = "destination-over";
      context.fillStyle = "#ffffff";
      context.fillRect(0,0,w,h);
      
      setAttr(event.target, 'download', FileUtils.makeFileName('gears','png'));
      
      const img    = canvas.toDataURL("image/png");
      const link = document.querySelector(".link");
      event.target.href = img;
      drawNetwork();
    }

    function clearNetwork(){
        Utils.confirm(l10n('confirm-clearing'), () => {
            state.nodesDataset.clear();
            state.edgesDataset.clear();
            storeData(exports.refresh);
        });
    }

    function updateNodeTextArea(){
      document.querySelector('.nodesText').value = state.nodesDataset.map((node) => [node.name, node.group, node.notes].join('\t')).join('\n');
    }

    function updateEdgeTextArea(){
      document.querySelector('.edgesText').value = state.edgesDataset.map((edge) => [state.nodesDataset.get(edge.from).name, edge.label, 
          state.nodesDataset.get(edge.to).name].join('\t')).join('\n');
    }

    function fillSearchSelect(){
      const arr = state.nodesDataset.map((node) => ({name: node.name, value: node.id}));
      arr.sort(CommonUtils.charOrdAFactory(a => a.name.toLowerCase()));
      fillSelector(clearEl(queryEl('.search-node')), arr);
    }

    function downloadCsv() {
        const arr = state.nodesDataset.map((node) => [node.name, node.group, node.notes]);
        const arr2 = state.edgesDataset.map((edge) => [state.nodesDataset.get(edge.from).name, edge.label, 
          state.nodesDataset.get(edge.to).name]);
          
        FileUtils.arr2d2Csv(arr.concat([['']]).concat(arr2), 'gears');
    }

    function downloadJSON() {
      const arr = state.nodesDataset.map((node) => [node.name, node.group, node.notes]);
      const arr2 = state.edgesDataset.map((edge) => [state.nodesDataset.get(edge.from).name, edge.label, 
        state.nodesDataset.get(edge.to).name]);
        
      const out = new Blob([JSON.stringify({nodes: arr, edges: arr2}, null, '  ')], {
          type: 'application/json;charset=utf-8;'
      });
      saveAs(out, FileUtils.makeFileName('gears', 'json'));
    }

    function downloadYED() {
      const arr = state.nodesDataset.map((node) => [node.name, node.group, node.notes]);
      const arr2 = state.edgesDataset.map((edge) => [state.nodesDataset.get(edge.from).name, edge.label, 
        state.nodesDataset.get(edge.to).name]);
      
      const groups = {};
      let index = 1;
      state.nodesDataset.map(node => {
        if(groups[node.group] === undefined){
          groups[node.group] = index;
          index++;
        }
      });
        
      const nodes = state.nodesDataset.map(node => {
        const colors = Constants.colorPalette[groups[node.group]-1].color;
        return CommonUtils.strFormat(Constants.yedNodeTmpl, [node.id, node.label, colors.background, colors.border]);
      }).join('\n');
      
      const edges = state.edgesDataset.map(edge => {
        return CommonUtils.strFormat(Constants.yedEdgeTmpl, [edge.id, edge.label || '', edge.from, edge.to]);
      }).join('\n');
      const out = new Blob([CommonUtils.strFormat(Constants.yedGmlBase, [nodes, edges])], {
          type: 'text/xml;charset=utf-8;'
      });
      saveAs(out, FileUtils.makeFileName('gears', 'graphml'));
    }

    function onNodeFocus(event) {
        state.network.focus(event.target.value, Constants.snFocusOptions);
    }

    function renameEdge(dialog) {
        return () => {
            if(state.edgeData){
                const toInput = qee(dialog, '.entity-input');
                const label = toInput.value.trim();
                const edge = state.edgeData;
                edge.label = label;
                toInput.value = '';
                state.edgeCallback(edge);
                state.edgeData = null;
                state.edgeCallback = null;
                storeData();
                dialog.hideDlg();
            }
        }
    }
    
    function updateNode(dialog) {
        return () => {
            if( state.nodeData ){
                let data = state.nodeData;
                data.id = qee(dialog, '.node-id').value;
                data.name = qee(dialog, '.node-name').value;
                data.group = qee(dialog, '.node-group').value;
                data.notes = qee(dialog, '.node-notes').value;
                data.label = makeLabel(data.name, data.notes);
                data.shape = 'box';
                
                const extraFields = R.difference(R.keys(data), Constants.gearsNodeRequiredFields);
                data = R.omit(extraFields, data);
                
                state.nodeCallback(data);
                
                state.nodeData = null;
                state.nodeCallback = null;
                storeData(exports.refresh);
                dialog.hideDlg();
            }
        };
    }
    
    function onNodeCancel() {
        if( state.nodeData ){
            state.nodeCallback(null);
            state.nodeData = null;
            state.nodeCallback = null;
        }
    }
})(this.Gears = {});

/*Copyright 2018 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

/* eslint-disable func-names */

'use strict';

function AddFilterConditionDialog(root) {
    this.dialog = UI.createModalDialog(root, this.onAction.bind(this), {
        bodySelector: 'add-filter-condition-body',
        dialogTitle: 'groups-add-filter-condition',
        actionButtonTitle: 'common-ok',
    });
    listen(qee(this.dialog, `.profile-item-selector`), 'change', this.onProfileItemSelect.bind(this));
}

AddFilterConditionDialog.prototype.showDlg = function(groups, callback){
    this.callback = callback;
    this.items = R.indexBy(R.prop('name'), R.unnest(groups.map(R.prop('array'))));
    
    const selector = qee(this.dialog, `.profile-item-selector`);
    UI.fillShowItemSelector2(
        clearEl(selector),
        groups,
        false
    );
    selector.options[0].selected = true;
    
    this.onProfileItemSelect({target: selector});
    
    this.dialog.showDlg();
    // to set dialog title
//    setAttr(qee(el, '.modal-title'), 'l10n-id', opts.dialogTitle);
    
}

AddFilterConditionDialog.prototype.onAction = function (dialog){
    return function () {
        console.log(this.getFilterModelItem());
        this.callback(this.getFilterModelItem());
        dialog.hideDlg();
    }.bind(this);
} 

AddFilterConditionDialog.prototype.getFilterModelItem = function () {
    const opt = qee(this.dialog, `.profile-item-selector`).selectedOptions[0];
    const item = this.items[opt.value];
    
    const filterItem = {
        type: item.type,
        name: item.name
    };
    
    const conditionContainer = (qee(this.dialog, '.condition'));
    const valueContainer = (qee(this.dialog, '.value'));
    
    let arr;
    switch (item.type) {
    case 'enum':
    case 'checkbox':
        arr = nl2array(qee(valueContainer, 'select').selectedOptions).map(R.prop('value'));
        filterItem.selectedOptions = R.zipObj(arr, R.repeat(true, arr.length));
        break;
    case 'number':
        filterItem.condition = qee(conditionContainer, 'select').value;
        filterItem.num = Number(qee(valueContainer, 'input').value);
        
//        if (inputItem.value === 'ignore') { return; }
//        num = Number(state.inputItems[`${inputItem.selfInfo.name}:numberInput`].value);
//        model.push({
//            type, name: inputItemName, num, condition: inputItem.value
//        });
        break;
    case 'multiEnum':
        filterItem.condition = qee(conditionContainer, 'select').value;
        arr = nl2array(qee(valueContainer, 'select').selectedOptions).map(R.prop('value'));
        filterItem.selectedOptions = R.zipObj(arr, R.repeat(true, arr.length));
//        if (inputItem.value === 'ignore') { return; }
//        selectedOptions = {};
//        select2 = state.inputItems[`${inputItem.selfInfo.name}:multiEnumInput`];
//        arr = nl2array(select2.selectedOptions).map(R.prop('value'));
//        model.push({
//            type,
//            name: inputItemName,
//            condition: inputItem.value,
//            selectedOptions: R.zipObj(arr, R.repeat(true, arr.length))
//        });
        break;
    case 'text':
    case 'string':
        filterItem.regexString = qee(valueContainer, 'input').value.toLowerCase();
//        model.push({ type, name: inputItemName, regexString: inputItem.value.toLowerCase() });
        break;
    default:
        throw new Error(`Unexpected type ${type}`);
    }
    return filterItem;
}

AddFilterConditionDialog.prototype.onProfileItemSelect = function (event) {
    const opt = event.target.selectedOptions[0];
    const item = this.items[opt.value];
    console.log(item);
    
    const conditionContainer = clearEl(qee(this.dialog, '.condition'));
    switch (item.type) {
    case 'text':
    case 'string':
        addEl(conditionContainer, qmte('.text-condition-tmpl'));
        break;
    case 'enum':
    case 'checkbox':
        addEl(conditionContainer, qmte('.enum-condition-tmpl'));
        break;
    case 'multiEnum':
        addEl(conditionContainer, qmte('.multienum-condition-tmpl'));
        break;
    case 'number':
        addEl(conditionContainer, qmte('.number-condition-tmpl'));
        break;
    default:
        throw new Error(`Unexpected type ${item.type}`);
    }
    
    const valueContainer = clearEl(qee(this.dialog, '.value'));
    let valueInput, values;
    switch (item.type) {
    case 'text':
    case 'string':
        addEl(valueContainer, qmte('.text-value-tmpl'));
        break;
    case 'checkbox':
        addEl(valueContainer, qmte('.checkbox-value-tmpl'));
        break;
    case 'enum':
    case 'multiEnum':
        valueInput = qmte('.enum-value-tmpl');
        values = item.value.split(',');
        values.sort(CommonUtils.charOrdA);
        values = arr2Select(values);
        valueInput.size = values.length;

        fillSelector(valueInput, values.map((value) => {
            value.selected = true;
            return value;
        }));
        addEl(valueContainer, valueInput);
        break;
    case 'number':
        addEl(valueContainer, qmte('.number-value-tmpl'));
        break;
    default:
        throw new Error(`Unexpected type ${item.type}`);
    }
    L10n.localizeStatic(this.dialog);
//    console.log(item);
}
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

/* eslint-disable func-names */

'use strict';

function FilterConfiguration(info) {
    this.info = info;
    function populateProfileItems(item) {
        if (!CommonUtils.startsWith(item.name, Constants.CHAR_PREFIX) &&
            !CommonUtils.startsWith(item.name, Constants.PLAYER_PREFIX)) {
            item.displayName = getL10n(item.displayName);
            item.value = '';
        }
    }
    this.groupedProfileFilterItems = CommonUtils.clone(info.groupedProfileFilterItems);
    this.groupedProfileFilterItems.map(R.prop('profileFilterItems')).map(R.map(populateProfileItems));
}

FilterConfiguration.makeFilterConfiguration = function (callback) {
    DBMS.getProfileFilterInfo((err, info) => {
        if (err) { Utils.handleError(err); return; }
        const filterConfiguration = new FilterConfiguration(info);
        callback(null, filterConfiguration);
    });
};

FilterConfiguration.prototype.getProfileFilterItems = function () {
    return R.flatten(this.groupedProfileFilterItems.map(R.prop('profileFilterItems')));
};

FilterConfiguration.prototype.getProfileItemSource = function (name) {
    let source;
    this.groupedProfileFilterItems.forEach( (el) => {
        const arr = el.profileFilterItems.map(R.prop('name'));
        if(R.contains(name, arr)){
            source = el.name;
        }
    });
    return source;
};

FilterConfiguration.prototype.getName2SourceMapping = function () {
    return this.groupedProfileFilterItems.reduce( (acc, group) => {
        group.profileFilterItems.forEach( item => acc[item.name] = group.name);
        return acc;
    }, {});
};

FilterConfiguration.prototype.getName2DisplayNameMapping = function () {
    return this.groupedProfileFilterItems.reduce( (acc, group) => {
        group.profileFilterItems.forEach( item => acc[item.name] = item.displayName);
        return acc;
    }, {});
};

FilterConfiguration.prototype.getGroupedProfileFilterItems = function () {
    return this.groupedProfileFilterItems;
};

FilterConfiguration.prototype.getGroupsForSelect = function() {
    return this.groupedProfileFilterItems.map((group) => ({
        displayName: getL10n(`profile-filter-${group.name}`),
        array: group.profileFilterItems
    }));
}

FilterConfiguration.prototype.getBaseProfileSettings = function () {
    return {
        characters: this.info.characters.profileStructure,
        players: this.info.players.profileStructure
    };
};

FilterConfiguration.prototype.getDataArrays = function (filterModel) {
    return ProjectUtils.getDataArrays(this.info, filterModel);
};

FilterConfiguration.prototype.haveProfiles = function () {
    return R.keys(this.info.characters.profiles).length > 0 || R.keys(this.info.players.profiles).length > 0;
};

FilterConfiguration.prototype.haveProfileStructures = function () {
    return this.info.characters.profileStructure.length > 0 || this.info.players.profileStructure.length > 0;
};

FilterConfiguration.prototype.haveData = function () {
    return this.haveProfiles() && this.haveProfileStructures();
};

FilterConfiguration.prototype.getProfileIds = function (filterModel) {
    const offset = this.groupedProfileFilterItems[0].profileFilterItems.length;
    return this.getDataArrays(filterModel).map(dataArray => `${dataArray[0].value || ''}/${dataArray[offset].value || ''}`).sort();
};

/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const state = {};
    const root = '.group-profile-tab ';
    const l10n = L10n.get('groups');
    const settingsPath = 'GroupProfile';

    exports.init = () => {
        const createGroupDialog = UI.createModalDialog(root, exports.createGroup(true, exports.refresh), {
            bodySelector: 'modal-prompt-body',
            dialogTitle: 'groups-enter-group-name',
            actionButtonTitle: 'common-create',
        });
        listen(qe(`${root}.create`), 'click', () => createGroupDialog.showDlg());

        state.renameGroupDialog = UI.createModalDialog(root, renameGroup, {
            bodySelector: 'modal-prompt-body',
            dialogTitle: 'groups-enter-new-group-name',
            actionButtonTitle: 'common-rename',
        });

        const tbody = clearEl(queryEl(`${root} .entity-profile`));

        state.inputItems = {};

        Constants.groupProfileStructure.forEach((profileSettings) => {
            profileSettings.displayName = getL10n(`groups-${profileSettings.name}`);
            addEl(tbody, makeInput(profileSettings));
        });

        listen(queryEl(`${root} .entity-filter`), 'input', filterOptions);

        exports.content = queryEl(`${root}`);
    };

    exports.refresh = () => {
        PermissionInformer.getEntityNamesArray('group', false, (err, groupNames) => {
            if (err) { Utils.handleError(err); return; }
            
            showEl(qe(`${root} .alert`), groupNames.length === 0);
            showEl(qe(`${root} .col-xs-9`), groupNames.length !== 0);
            Utils.enableEl(qe(`${root} .entity-filter`), groupNames.length !== 0);
            
            addEls(clearEl(queryEl(`${root} .entity-list`)), groupNames.map((name, i, arr) => {
                const el = wrapEl('div', qte('.entity-item-tmpl'));
                addEl(qee(el, '.primary-name'), makeText(name.displayName));
                setAttr(el, 'primary-name', name.displayName);
                setAttr(el, 'profile-name', name.value);
                listen(qee(el, '.select-button'), 'click', showProfileInfoDelegate2(name.value));
                setAttr(qee(el, '.rename'), 'title', l10n('rename-entity'));
                const removeBtn = qee(el, '.remove');
                setAttr(removeBtn, 'title', l10n('remove-entity'));
                if(i+1 < arr.length){
                    removeBtn.nextName = arr[i+1].value;
                }
                if(i > 0){
                    removeBtn.prevName = arr[i-1].value;
                }
                if (name.editable) {
                    listen(qee(el, '.rename'), 'click', () => {
                        qee(state.renameGroupDialog, '.entity-input').value = name.value;
                        state.renameGroupDialog.fromName = name.value;
                        state.renameGroupDialog.showDlg();
                    });
                    listen(removeBtn, 'click', GroupProfile.removeGroup(() => name.value, exports.refresh, removeBtn));
                } else {
                    setAttr(qee(el, '.rename'), 'disabled', 'disabled');
                    setAttr(removeBtn, 'disabled', 'disabled');
                }
                return el;
            }));

            showProfileInfoDelegate2(UI.checkAndGetEntitySetting(settingsPath, groupNames))();
        });
    };

    function makeInput(profileItemConfig) {
        let input;
        switch (profileItemConfig.type) {
        case 'text':
            input = makeEl('textarea');
            addClass(input, 'profileTextInput form-control');
            input.addEventListener('change', updateFieldValue(profileItemConfig.type));
            break;
        case 'checkbox':
            input = makeEl('input');
            input.type = 'checkbox';
            addClass(input, 'form-control');
            input.addEventListener('change', updateFieldValue(profileItemConfig.type));
            break;
        case 'container':
            input = makeEl('div');
            input.type = 'container';
            break;
        default:
            throw new Error(`Unexpected type ${profileItemConfig.type}`);
        }
        input.selfName = profileItemConfig.name;
        addClass(input, 'isGroupEditable');
        state.inputItems[profileItemConfig.name] = input;

        const row = qmte('.profile-editor-row-tmpl');
        addEl(qee(row, '.profile-item-name'), makeText(profileItemConfig.displayName));
        setAttr(qee(row, '.profile-item-name'), 'l10n-id', `groups-${profileItemConfig.name}`);
        addEl(qee(row, '.profile-item-input'), input);
        return row;
    }

    function updateFieldValue(type) {
        return (event) => {
            const fieldName = event.target.selfName;
            const groupName = state.name;

            let value;
            switch (type) {
            case 'text':
                // eslint-disable-next-line prefer-destructuring
                value = event.target.value;
                DBMS.updateGroupField(groupName, fieldName, value, Utils.processError());
                break;
            case 'checkbox':
                value = event.target.checked;
                DBMS.doExportGroup(groupName, value, Utils.processError());
                break;
            default:
                throw new Error(`Unexpected type ${type}`);
            }
        };
    }

    function showProfileInfoDelegate2(name) {
        return () => {
            queryEls(`${root} [profile-name] .select-button`).map(removeClass(R.__, 'btn-primary'));
            if(name !== null){
                UI.updateEntitySetting(settingsPath, name);
                const el = queryEl(`${root} [profile-name="${name}"] .select-button`);
                addClass(el, 'btn-primary');
                
                const parentEl = el.parentElement.parentElement;
                const entityList = queryEl(`${root} .entity-list`);
                UI.scrollTo(entityList, parentEl);
                
                DBMS.getGroup(name, showProfileInfoCallback);
            }
        };
    }

    function showProfileInfoCallback(err, group) {
        if (err) { Utils.handleError(err); return; }
        const { name } = group;
        FilterConfiguration.makeFilterConfiguration((err1, filterConfiguration) => {
            if (err1) { Utils.handleError(err1); return; }

            PermissionInformer.isEntityEditable('group', name, (err2, isGroupEditable) => {
                if (err2) { Utils.handleError(err2); return; }
                updateSettings(name);
                
                const name2DisplayName = filterConfiguration.getName2DisplayNameMapping();
                
                const name2Source = filterConfiguration.getName2SourceMapping();

                state.name = name;
                const { inputItems } = state;
                Object.keys(inputItems).forEach((inputName) => {
                    if (inputItems[inputName].type === 'checkbox') {
                        inputItems[inputName].checked = group[inputName];
                    } else if (inputItems[inputName].type === 'container') {
                        if (inputName === 'filterModel') {
                            const table = qmte(`${root} .group-filter-template`);
                            const datas = group.filterModel.map(exports.makeFilterItemString(name2DisplayName, name2Source));
                            addEls(qee(table, 'tbody'), datas.map(data2row));
                            L10n.localizeStatic(table);
                            addEl(clearEl(inputItems[inputName]), table);
                        } else if (inputName === 'characterList') {
                            const data = filterConfiguration.getProfileIds(group.filterModel);
                            const inputItem = clearEl(inputItems[inputName]);
                            addEls(inputItem, [makeText(data.join(', ')), makeEl('br'), makeText(getL10n('groups-total') + data.length)]);
                        } else {
                            throw new Error(`Unexpected container: ${inputName}`);
                        }
                    } else if (inputItems[inputName].type === 'textarea') {
                        inputItems[inputName].value = group[inputName];
                    } else {
                        throw new Error(`Unexpected input type: ${inputItems[inputName].type}`);
                    }
                    inputItems[inputName].oldValue = group[inputName];
                    Utils.enable(exports.content, 'isGroupEditable', isGroupEditable);
                });
            });
        });
    }

    // eslint-disable-next-line no-var,vars-on-top
    exports.makeFilterItemString = R.curry((name2DisplayName, name2Source, filterItem) => {
        const displayName = name2DisplayName[filterItem.name];
        const source = name2Source[filterItem.name];
        let condition, arr, value;
        switch (filterItem.type) {
        case 'enum':
            condition = getL10n(`groups-one-from`);
            value = Object.keys(filterItem.selectedOptions).join(', ');
            break;
        case 'checkbox':
            arr = [];
            if (filterItem.selectedOptions.true) { arr.push(getL10n('constant-yes')); }
            if (filterItem.selectedOptions.false) { arr.push(getL10n('constant-no')); }
            condition = getL10n(`groups-one-from`);
            value = arr.join(', ');
            break;
        case 'number':
            condition = getL10n(`constant-${filterItem.condition}`);
            value = filterItem.num;
            break;
        case 'multiEnum':
            condition = getL10n(`constant-${filterItem.condition}`);
            value = Object.keys(filterItem.selectedOptions).join(', ');
            break;
        case 'text':
        case 'string':
            condition = getL10n('groups-text-contains');
            value = filterItem.regexString;
            break;
        default:
            throw new Error(`Unexpected type ${filterItem.type}`);
        }
        const title = getL10n(`profile-filter-${source}`) + ', ' + getL10n(`constant-${filterItem.type}`);
        return {displayName, title, condition, value};
    });
    
    function data2row(data){
        const {displayName, title, condition, value} = data;
        const row = qmte(`${root} .group-filter-row-template`);
        addEl(qee(row, '.profile-item'), makeText(displayName));
        setAttr(qee(row, '.profile-item'), 'title', title);
        addEl(qee(row, '.condition'), makeText(condition));
        addEl(qee(row, '.value'), makeText(value));
        return row;
    }

    function updateSettings(name) {
        const settings = DBMS.getSettings();
        settings.GroupProfile.groupName = name;
    }

    function filterOptions(event) {
        const str = event.target.value.toLowerCase();

        const els = queryEls(`${root} [primary-name]`);
        els.forEach((el) => {
            const isVisible = getAttr(el, 'primary-name').toLowerCase().indexOf(str) !== -1;
            hideEl(el, !isVisible);
        });

        if (queryEl(`${root} .hidden[primary-name] .select-button.btn-primary`) !== null ||
            queryEl(`${root} [primary-name] .select-button.btn-primary`) === null) {
            const els2 = queryEls(`${root} [primary-name]`).filter(R.pipe(hasClass(R.__, 'hidden'), R.not));
            showProfileInfoDelegate2(els2.length > 0 ? getAttr(els2[0], 'profile-name') : null)();
        } else {
            //            queryEl(`${root} [primary-name] .select-button.btn-primary`).scrollIntoView();
        }
    }

    exports.createGroup = (updateSettingsFlag, refresh) => dialog => () => {
        const input = qee(dialog, '.entity-input');
        const name = input.value.trim();

        DBMS.createGroup(name, (err) => {
            if (err) {
                setError(dialog, err);
            } else {
                if (updateSettingsFlag) {
                    UI.updateEntitySetting(settingsPath, name);
                }
                PermissionInformer.refresh((err2) => {
                    if (err2) { Utils.handleError(err2); return; }
                    input.value = '';
                    dialog.hideDlg();
                    refresh();
                });
            }
        });
    };

    function renameGroup(dialog) {
        return () => {
            const toInput = qee(dialog, '.entity-input');
            const { fromName } = dialog;
            const toName = toInput.value.trim();

            DBMS.renameGroup(fromName, toName, (err) => {
                if (err) {
                    setError(dialog, err);
                } else {
                    UI.updateEntitySetting(settingsPath, toName);
                    toInput.value = '';
                    dialog.hideDlg();
                    exports.refresh();
                }
            });
        };
    }

    exports.removeGroup = (callback, refresh, btn) => () => {
        const name = callback();

        Utils.confirm(strFormat(getL10n('groups-are-you-sure-about-group-removing'), [name]), () => {
            DBMS.removeGroup(name, (err) => {
                if (err) { Utils.handleError(err); return; }
                PermissionInformer.refresh((err2) => {
                    if (err2) { Utils.handleError(err2); return; }
                    if(btn.nextName !== undefined){
                        UI.updateEntitySetting(settingsPath, btn.nextName);
                    } else if(btn.prevName !== undefined) {
                        UI.updateEntitySetting(settingsPath, btn.prevName);
                    }
                    refresh();
                });
            });
        });
    };
})(this.GroupProfile = {});

/*Copyright 2016-2018 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const state = {};
    const rootTab = '.group-schema-tab';

    exports.init = () => {
        exports.content = queryEl(rootTab);
    };

    exports.refresh = () => {
        DBMS.getGroupSchemas((err, schemas) => {
//            redrawSchema(schemas.theory);
            redrawSchema2(schemas.theory, 'theory');
            redrawSchema2(schemas.practice, 'practice');
        });
    };

    function redrawSchema(graph) {
        const container = queryEl(`${rootTab} .schema-container`);

        if (state.network) {
            state.network.destroy();
        }
        graph.edges = graph.edges.map(edge => R.merge(edge, {
            physics: false,
        }));

        state.network = new vis.Network(container, graph, Constants.groupSchemaOpts);
    }
    
    function redrawSchema2(graphData, className) {
        clearEl(queryEl(`${rootTab} svg.${className}`));
        const svg = d3.select(`${rootTab} svg.${className}`);
        const svgGroup = svg.append('g');
        const root = svgGroup.append('g');

        // define an arrow head
        svg.append('svg:defs')
            .append('svg:marker')
            .attr('id', 'end')
            .attr('viewBox', '0 -5 10 10')
            .attr('refX', 10)
            .attr('refY', 0)
            .attr('markerWidth', 3) // marker settings
            .attr('markerHeight', 5)
            .attr('orient', 'auto')
            .style('fill', '#999')
            .style('stroke-opacity', 0.6) // arrowhead color
            .append('svg:path')
            .attr('d', 'M0,-5L10,0L0,5');
        
        const nodeDict = graphData.nodes.reduce((dict, node, i) => {
            dict[node.id] = i;
            return dict;
        }, {});

        const nodeWidth = 170;
        const nodeHeight = 20;

        const name2Node = obj => ({
            id: nodeDict[obj.id],
            name: obj.id,
            title: obj.title,
            label: obj.label,
            width: nodeWidth,
            height: nodeHeight
        });

        const pair2Edge = (obj, i) => ({
            id: i + graphData.nodes.length,
            source: nodeDict[obj.to],
            target: nodeDict[obj.from]
        });

        const graph = {
            nodes: graphData.nodes.map(name2Node),
            links: graphData.edges.map(pair2Edge)
        };

        const layouter = klay.d3adapter();
        const width = 960;
        const height = 400;

        layouter
            .nodes(graph.nodes)
            .links(graph.links)
            .size([width, height])
            .transformGroup(root)
            .options({
                edgeRouting: 'ORTHOGONAL',
                "direction": "RIGHT",
                intCoordinates: false
            })
            .defaultPortSize([2, 2])
            .start();

        const link = root.selectAll('.link')
            .data(graph.links)
            .enter()
            .append('path')
            .attr('class', 'link')
            .attr('d', 'M0 0')
            .attr('marker-end', 'url(#end)');

        // we group nodes along with their ports
        const node = root.selectAll('.node')
            .data(graph.nodes)
            .enter()
            .append('g');

        node.append('rect')
            .attr('class', (d) => {
                return 'node valid';
//                const details = checkRes.details[d.name];
//                if (details === undefined || details.length === 0) {
//                    return 'node valid';
//                }
//                return 'node invalid';
            })
            .attr('width', nodeWidth)
            .attr('height', nodeHeight)
            .attr('title', 'link')
            .attr('rx', 5)
            .attr('ry', 5)
            .attr('x', 0)
            .attr('y', 0);
        
        node.append('title').text(d => d.title)

        node.append('text')
            .attr('x', nodeWidth / 2)
            .attr('y', nodeHeight / 2)
            .attr('alignment-baseline', 'middle')
            .attr('text-anchor', 'middle')
//            .text(d => d.name)
            .text(d => d.label)
            .attr('font-size', '4px');

        // ports
        const port = node.selectAll('.port')
            .data(d => d.ports)
            .enter()
            .append('rect')
            .attr('class', 'port')
            .attr('width', 2)
            .attr('height', 2)
            .attr('x', 0)
            .attr('y', 0);

        // apply layout
        layouter.on('finish', (d2) => {
        // apply edge routes
            link.transition().attr('d', (d) => {
                let path = '';
                path += `M${d.sourcePoint.x} ${d.sourcePoint.y} `;
                d.bendPoints.forEach((bp, i) => {
                    path += `L${bp.x} ${bp.y} `;
                });
                path += `L${d.targetPoint.x} ${d.targetPoint.y} `;
                return path;
            });

            // apply node positions
            node.transition()
                .attr('transform', d => `translate(${d.x} ${d.y})`);

            // apply port positions
            port.transition()
                .attr('x', d => d.x)
                .attr('y', d => d.y);
        });

        layouter.start();
    };
})(this.GroupSchema = {});

/*Copyright 2015-2018 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const state = {};
    const root = '.profile-filter-tab ';

    exports.init = () => {
        const createGroupDialog = UI.createModalDialog(root, GroupProfile.createGroup(false, exports.refresh), {
            bodySelector: 'modal-prompt-body',
            dialogTitle: 'groups-enter-group-name',
            actionButtonTitle: 'common-create',
        });

        const renameGroupDialog = UI.createModalDialog(root, renameGroup(`${root}.save-entity-select`), {
            bodySelector: 'modal-prompt-body',
            dialogTitle: 'groups-enter-new-group-name',
            actionButtonTitle: 'common-rename',
        });
        
//        state.addFilterConditionDialog = new AddFilterConditionDialog(root);
//        listen(qe(`${root}.create.filter-condition`), 'click', onAddFilterCondition);

        listen(queryEl(`${root}#profile-filter-columns .profile-item-selector`), 'change', UI.showSelectedEls3(root, 'dependent', 'dependent-index'));
        
//        Utils.enable(exports.content, 'isGroupEditable', isGroupEditable);
//        listen queryEl(`${root}.save-entity-select`)
        
        $(`${root}.save-entity-select`).select2().on('change', (event) => {
            const group = event.target.value;
            const userGroups = state.userGroupNames.map(R.prop('value'));
            const isGroupEditable = R.contains(group, userGroups);
            Utils.enable(exports.content, 'isGroupEditable', isGroupEditable);
        });

        listen(queryEl(`${root}.show-entity-button`), 'click', loadFilterFromGroup);
        listen(queryEl(`${root}.save-entity-button`), 'click', saveFilterToGroup);
        listen(queryEl(`${root}.download-filter-table`), 'click', downloadFilterTable);

        listen(qe(`${root}.create.group`), 'click', () => createGroupDialog.showDlg());
        listen(qe(`${root}.rename.group`), 'click', () => {
            qee(renameGroupDialog, '.entity-input').value = queryEl(`${root}.save-entity-select`).value;
            renameGroupDialog.showDlg();
        });
        listen(queryEl(`${root}.remove.group`), 'click', GroupProfile.removeGroup(() => 
            queryEl(`${root}.save-entity-select`).value, exports.refresh));

        exports.content = queryEl(root);
    };
    
    exports.refresh = () => {
        state.sortKey = Constants.CHAR_NAME;
        state.sortDir = 'asc';
        state.inputItems = {};
        state.checkboxes = {};
        state.curFilterModel = [];

        const filterSettingsDiv = clearEl(queryEl(`${root}.filter-settings-panel`));
        addEl(filterSettingsDiv, addClass(makeEl('div'), 'separator'));

        groupAreaRefresh();

        FilterConfiguration.makeFilterConfiguration((err, filterConfiguration) => {
            if (err) { Utils.handleError(err); return; }

            state.filterConfiguration = filterConfiguration;
            
            showEl(qe(`${root} .alert.no-characters`), !filterConfiguration.haveProfiles());
            showEl(qe(`${root} .alert.no-players`), !filterConfiguration.haveProfiles());
            showEl(qe(`${root} .alert.no-character-profile`), !filterConfiguration.haveProfileStructures());
            showEl(qe(`${root} .alert.no-player-profile`), !filterConfiguration.haveProfileStructures());
            showEl(qe(`${root} .profile-filter-container .panel`), filterConfiguration.haveData());
            
            const groupedProfileFilterItems = filterConfiguration.getGroupedProfileFilterItems();
            addEls(filterSettingsDiv, R.flatten(groupedProfileFilterItems.map(item => R.concat(item.profileFilterItems.map(makeInput), [addClass(makeEl('div'), 'filterSeparator')]))));

            UI.fillShowItemSelector2(
                clearEl(queryEl(`${root}#profile-filter-columns .profile-item-selector`)),
                filterConfiguration.getGroupsForSelect(),
                true
            );

            addEl(
                clearEl(queryEl(`${root}.filter-head`)),
                makeContentHeader(getHeaderProfileItemNames(filterConfiguration.getProfileFilterItems()))
            );

            rebuildContent();
        });
    };
    
    function onAddFilterCondition() {
        state.addFilterConditionDialog.showDlg(state.filterConfiguration.getGroupsForSelect(), setFilterModelItem);
    }
    
    function setFilterModelItem (filterModelItem) {
        const index = R.findIndex(R.propEq('name', filterModelItem.name), state.curFilterModel);
        if(index === -1){
            state.curFilterModel.push(filterModelItem);
        } else {
            state.curFilterModel[index] = filterModelItem;
        }
    }
    
    function groupAreaRefresh() {
        PermissionInformer.getEntityNamesArray('group', true, Utils.processError((userGroupNames) => {
            PermissionInformer.getEntityNamesArray('group', false, Utils.processError((allGroupNames) => {
                
                Utils.enableEl(qe(`${root}.rename.group`), allGroupNames.length > 0);
                Utils.enableEl(qe(`${root}.remove.group`), allGroupNames.length > 0);
                Utils.enableEl(qe(`${root}.show-entity-button`), allGroupNames.length > 0);
                Utils.enableEl(qe(`${root}.save-entity-button`), allGroupNames.length > 0);
                Utils.enableEl(qe(`${root}.save-entity-select`), allGroupNames.length > 0);
                
                state.userGroupNames = userGroupNames;
                state.allGroupNames = allGroupNames;
                const data = getSelect2Data(allGroupNames);
                clearEl(queryEl(`${root}.save-entity-select`));
                $(`${root}.save-entity-select`).select2(data);
            }));
        }));
    }

    function getHeaderProfileItemNames(profileSettings) {
        return R.map(R.pick(['name', 'displayName', 'type']), profileSettings);
    }

    function makePrintData() {
        const dataArrays = state.filterConfiguration.getDataArrays(makeFilterModel());

        const sortFunc = CommonUtils.charOrdAFactoryBase(state.sortDir, (a, b) => a > b, (a) => {
            const map = CommonUtils.arr2map(a, 'itemName');
            const item = map[state.sortKey];
            let { value } = item;
            if (value === undefined) return value;
            switch (item.type) {
            case 'text':
            case 'string':
            case 'enum':
            case 'multiEnum':
                value = value.toLowerCase();
                break;
            case 'checkbox':
            case 'number':
                break;
            default:
                throw new Error(`Unexpected type ${item.type}`);
            }
            return value;
        });
        return dataArrays.sort(sortFunc);
    }

    function rebuildContent() {
        const dataArrays = makePrintData();
        addEl(clearEl(queryEl(`${root}.filter-result-size`)), makeText(dataArrays.length));
        addEls(clearEl(queryEl(`${root}.filter-content`)), dataArrays.map(makeDataString));
        UI.showSelectedEls3(root, 'dependent', 'dependent-index')({ target: queryEl(`${root}#profile-filter-columns .profile-item-selector`) });
    }

    function saveFilterToGroup() {
        const groupName = queryEl(`${root}.save-entity-select`).value;
        PermissionInformer.isEntityEditable('group', groupName, (err, isGroupEditable) => {
            if (err) { Utils.handleError(err); return; }
            if (!isGroupEditable) {
                Utils.alert(strFormat(getL10n('groups-group-editing-forbidden'), [groupName]));
                return;
            }
            DBMS.saveFilterToGroup(groupName, makeFilterModel(), Utils.processError());
        });
    }

    function loadFilterFromGroup() {
        const groupName = queryEl(`${root}.save-entity-select`).value;
        DBMS.getGroup(groupName, (err, group) => {
            if (err) { Utils.handleError(err); return; }
            const conflictTypes =
                ProjectUtils.isFilterModelCompatibleWithProfiles(
                    state.filterConfiguration.getBaseProfileSettings(),
                    group.filterModel
                );
            if (conflictTypes.length !== 0) {
                Utils.alert(strFormat(getL10n('groups-base-filter-is-incompatible-with-page-profiles'), [conflictTypes.join(',')]));
                return;
            }
            applyFilterModel(group.filterModel);
            rebuildContent();
        });
    }

    function downloadFilterTable() {
        const el = queryEl(`${root}#profile-filter-columns .profile-item-selector`);
        const selected = [];
        for (let i = 0; i < el.options.length; i += 1) {
            selected[i] = el.options[i].selected;
        }

        const dataArrays = makePrintData();
        const cleanArrays = dataArrays.map(dataArray => dataArray.filter((item, index) => selected[index]).map(R.prop('value')));

        FileUtils.arr2d2Csv(cleanArrays, 'profileFilter');
    }

    function applyFilterModel(filterModel) {
        filterModel = CommonUtils.arr2map(filterModel, 'name');

        Object.keys(state.inputItems).forEach((inputItemName) => {
            if (inputItemName.endsWith(':numberInput') || inputItemName.endsWith(':multiEnumInput')) {
                return;
            }

            const inputItem = state.inputItems[inputItemName];
            let selectedOptions, regex, num, i, counter;

            if (state.checkboxes[inputItemName].checked !== (filterModel[inputItemName] !== undefined)) {
                state.checkboxes[inputItemName].click();
            }
            if (!filterModel[inputItemName]) {
                let select;
                switch (inputItem.selfInfo.type) {
                case 'enum':
                case 'checkbox':
                    for (i = 0; i < inputItem.options.length; i += 1) {
                        inputItem.options[i].selected = true;
                    }
                    break;
                case 'number':
                    state.inputItems[`${inputItem.selfInfo.name}:numberInput`].value = 0;
                    inputItem.value = 'ignore';
                    break;
                case 'multiEnum':
                    select = state.inputItems[`${inputItem.selfInfo.name}:multiEnumInput`];
                    for (i = 0; i < select.options.length; i += 1) {
                        select.options[i].selected = true;
                    }
                    inputItem.value = 'ignore';
                    break;
                case 'text':
                case 'string':
                    inputItem.value = '';
                    break;
                default:
                    throw new Error(`Unexpected type ${inputItem.selfInfo.type}`);
                }
            } else {
                const modelItem = filterModel[inputItemName];
                let select;
                switch (inputItem.selfInfo.type) {
                case 'enum':
                    for (i = 0; i < inputItem.options.length; i += 1) {
                        inputItem.options[i].selected = !!modelItem.selectedOptions[inputItem.options[i].value];
                    }
                    break;
                case 'checkbox':
                    inputItem.options[0].selected = modelItem.selectedOptions.true;
                    inputItem.options[1].selected = modelItem.selectedOptions.false;
                    break;
                case 'number':
                    inputItem.value = modelItem.condition;
                    state.inputItems[`${inputItem.selfInfo.name}:numberInput`].value = modelItem.num;
                    break;
                case 'multiEnum':
                    inputItem.value = modelItem.condition;
                    select = state.inputItems[`${inputItem.selfInfo.name}:multiEnumInput`];
                    for (i = 0; i < select.options.length; i += 1) {
                        select.options[i].selected = !!modelItem.selectedOptions[select.options[i].value];
                    }
                    break;
                case 'text':
                case 'string':
                    inputItem.value = modelItem.regexString;
                    break;
                default:
                    throw new Error(`Unexpected type ${inputItem.selfInfo.type}`);
                }
            }
        });
    }

    function makeFilterModel() {
        const model = [];
        Object.keys(state.inputItems).forEach((inputItemName) => {
            if (inputItemName.endsWith(':numberInput') || inputItemName.endsWith(':multiEnumInput')) {
                return;
            }
            if (state.checkboxes[inputItemName].checked === false) {
                return;
            }
            const inputItem = state.inputItems[inputItemName];
            let selectedOptions, regex, num, i, arr;
            const { type } = inputItem.selfInfo;

            let select2;
            switch (type) {
            case 'enum':
                arr = nl2array(inputItem.selectedOptions).map(R.prop('value'));
                model.push({ type, name: inputItemName, selectedOptions: R.zipObj(arr, R.repeat(true, arr.length)) });
                break;
            case 'checkbox':
                selectedOptions = {};
                if (inputItem.options[0].selected) { selectedOptions.true = true; }
                if (inputItem.options[1].selected) { selectedOptions.false = true; }
                model.push({ type, name: inputItemName, selectedOptions });
                break;
            case 'number':
                if (inputItem.value === 'ignore') { return; }
                num = Number(state.inputItems[`${inputItem.selfInfo.name}:numberInput`].value);
                model.push({
                    type, name: inputItemName, num, condition: inputItem.value
                });
                break;
            case 'multiEnum':
                if (inputItem.value === 'ignore') { return; }
                selectedOptions = {};
                select2 = state.inputItems[`${inputItem.selfInfo.name}:multiEnumInput`];
                arr = nl2array(select2.selectedOptions).map(R.prop('value'));
                model.push({
                    type,
                    name: inputItemName,
                    condition: inputItem.value,
                    selectedOptions: R.zipObj(arr, R.repeat(true, arr.length))
                });
                break;
            case 'text':
            case 'string':
                model.push({ type, name: inputItemName, regexString: inputItem.value.toLowerCase() });
                break;
            default:
                throw new Error(`Unexpected type ${type}`);
            }
        });
        return model;
    }

    function makeDataString(dataArray) {
        const { inputItems } = state;
        return addEls(makeEl('tr'), dataArray.map((valueInfo, i) => {
            let regex, pos, displayValue;
            const { value } = valueInfo;
            if (value === undefined) {
                displayValue = constL10n('notAvailable');
            } else if (valueInfo.type === 'checkbox') {
                displayValue = constL10n(Constants[value]);
            } else if (valueInfo.type === 'text') {
                pos = value.toLowerCase().indexOf(inputItems[valueInfo.itemName].value.toLowerCase());
                displayValue = value.substring(pos - 5, pos + 15);
            } else if (R.contains(valueInfo.type, ['number', 'enum', 'multiEnum', 'string'])) {
                displayValue = value;
            } else {
                throw new Error(`Unexpected valueInfo.type: ${valueInfo.type}`);
            }
            const td = addEl(setClassByCondition(makeEl('td'), 'lightGrey', value === undefined), makeText(displayValue));
            addClasses(td, [`dependent-${i}`, 'dependent', valueInfo.type === 'number' ? 'text-align-right' : 'text-align-left']);
            setAttr(td, 'dependent-index', i);
            return td;
        }));
    }

    function makeContentHeader(profileItemNames) {
        return addEls(makeEl('tr'), profileItemNames.map((elem, i) => {
            const td = addEls(makeEl('th'), [makeText(`${elem.displayName} `)]);
            td.info = elem.name;
            addClasses(td, [`dependent-${i}`, 'dependent', 'sorting', elem.type === 'number' ? 'text-align-right' : 'text-align-left']);
            setAttr(td, 'dependent-index', i);
            listen(td, 'click', onSortChange);
            return td;
        }));
    }

    function onSortChange(event) {
        let { target } = event;
        if (target.tagName.toLowerCase() === 'span') {
            target = target.parentElement;
        }

        if (state.sortKey === target.info) {
            state.sortDir = state.sortDir === 'asc' ? 'desc' : 'asc';
            setClassByCondition(target, 'sortDesc', state.sortDir === 'desc');
            setClassByCondition(target, 'sortAsc', state.sortDir === 'asc');
        } else {
            const filterHead = queryEl(`${root}.filter-head`);
            nl2array(filterHead.getElementsByClassName('sortAsc')).forEach(removeClass(R.__, 'sortAsc'));
            nl2array(filterHead.getElementsByClassName('sortDesc')).forEach(removeClass(R.__, 'sortDesc'));

            state.sortKey = target.info;
            state.sortDir = 'asc';
            addClass(target, 'sortAsc');
        }
        rebuildContent();
    }

    function makeInput(profileItemConfig) {
        const el = qmte(`${root} .filter-item-tmpl`);
        const checkbox = qee(el, 'input[type="checkbox"]');
        const id = "filter-item-" + profileItemConfig.displayName;
        checkbox.checked = false;
        checkbox.id = id;
        addEl(qee(el, '.filter-item-name'), makeText(profileItemConfig.displayName));
        setAttr(qee(el, 'label'), 'for', id);
        
        const inputContainer = qee(el, '.filter-item-container');
        listen(checkbox, 'click', toggleContent(el, inputContainer));
        state.checkboxes[profileItemConfig.name] = checkbox;
        
        addEl(inputContainer, makeFilter(profileItemConfig));
        return el;
    }
    
    function toggleContent(itemContainer, inputContainer) {
        return (event) => {
            hideEl(inputContainer, !event.target.checked);
            setClassByCondition(itemContainer, 'flex-front-element', event.target.checked);
            rebuildContent();
        };
    }

    function makeFilter(profileItemConfig) {
        switch (profileItemConfig.type) {
        case 'text':
        case 'string':
            return makeTextFilter(profileItemConfig);
        case 'enum':
            return makeEnumFilter(profileItemConfig);
        case 'multiEnum':
            return makeMultiEnumFilter(profileItemConfig);
        case 'number':
            return makeNumberFilter(profileItemConfig);
        case 'checkbox':
            return makeCheckboxFilter(profileItemConfig);
        default:
            throw new Error(`Unexpected type ${profileItemConfig.type}`);
        }
    }

    function makeTextFilter(profileItemConfig) {
        const input = qmte(`${root} .text-filter-tmpl`);
        input.selfInfo = profileItemConfig;
        input.value = '';
        input.addEventListener('input', rebuildContent);
        state.inputItems[profileItemConfig.name] = input;
        return input;
    }

    function makeCommonEnumFilter(profileItemConfig, values) {
        const selector = qmte(`${root} .common-enum-filter-tmpl`);
        selector.selfInfo = profileItemConfig;
        selector.size = values.length;

        fillSelector(selector, values.map((value) => {
            value.selected = true;
            return value;
        }));
        selector.addEventListener('change', rebuildContent);
        state.inputItems[profileItemConfig.name] = selector;
        return selector;
    }

    function makeEnumFilter(profileItemConfig) {
        const values = arr2Select(profileItemConfig.value.split(','));
        return makeCommonEnumFilter(profileItemConfig, values);
    }

    function makeCheckboxFilter(profileItemConfig) {
        const values = [{
            value: Constants.true,
            name: constL10n(Constants.true)
        }, {
            value: Constants.false,
            name: constL10n(Constants.false)
        }];
        return makeCommonEnumFilter(profileItemConfig, values);
    }

    function makeMultiEnumFilter(profileItemConfig) {
        const filter = qmte(`${root} .multi-enum-filter-tmpl`);
        const selector = qee(filter, '.multi-enum-filter-type');
        selector.selfInfo = profileItemConfig;

        Constants.multiEnumFilter.forEach((value) => {
            const option = makeEl('option');
            option.appendChild(makeText(constL10n(value)));
            option.value = value;
            selector.appendChild(option);
        });
        selector.selectedIndex = 0;
        state.inputItems[profileItemConfig.name] = selector;
        selector.addEventListener('change', rebuildContent);

        const selector2 = qee(filter, '.multi-enum-filter-content');
        const values = arr2Select(profileItemConfig.value.split(','));
        fillSelector(selector2, values.map((value) => {
            value.selected = true;
            return value;
        }));
        selector2.size = values.length;

        state.inputItems[`${profileItemConfig.name}:multiEnumInput`] = selector2;
        selector2.addEventListener('change', rebuildContent);
        return filter;
    }

    function makeNumberFilter(profileItemConfig) {
        const filter = qmte(`${root} .number-filter-tmpl`);
        const selector = qee(filter, 'select');
        selector.selfInfo = profileItemConfig;

        Constants.numberFilter.forEach((value) => {
            const option = makeEl('option');
            option.appendChild(makeText(constL10n(value)));
            option.value = value;
            selector.appendChild(option);
        });
        selector.selectedIndex = 0;
        state.inputItems[profileItemConfig.name] = selector;
        selector.addEventListener('change', rebuildContent);

        const input = qee(filter, 'input');
        input.value = 0;
        state.inputItems[`${profileItemConfig.name}:numberInput`] = input;
        input.addEventListener('input', rebuildContent);
        return filter;
    }

    function renameGroup(selector) {
        return dialog => () => {
            const toInput = qee(dialog, '.entity-input');
            const fromName = queryEl(selector).value;
            const toName = toInput.value.trim();

            DBMS.renameGroup(fromName, toName, (err) => {
                if (err) {
                    setError(dialog, err);
                } else {
                    PermissionInformer.refresh((err2) => {
                        if (err2) { Utils.handleError(err2); return; }
                        toInput.value = '';
                        dialog.hideDlg();
                        exports.refresh();
                    });
                }
            });
        };
    }
})(this.ProfileFilter = {});

/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    exports.init = () => {
        exports.content = getEl('aboutDiv');
    };

    exports.refresh = () => {
    };
})(this.About = {});

/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const root = '.log-viewer-tab ';

    exports.init = () => {
        const pagination = clearEl(queryEl(`${root}.pagination`));
        addEls(pagination, R.range(0, 20).map((num) => {
            const a = setAttr(makeEl('a'), 'href', '#');
            const li = addEl(makeEl('li'), a);
            li.num = num;
            addEl(a, makeText(num + 1));
            listen(a, 'click', () => {
                getData({ target: { value: num } });
                const prevActive = queryEl(`${root}.pagination li.active`);
                if (prevActive !== null) {
                    removeClass(prevActive, 'active');
                }
                addClass(li, 'active');
            });
            return li;
        }));

        listen(queryEl(`${root}button.clear-filter`), 'click', () => {
            queryEls(`${root}input[filter]`).forEach(el => (el.value = ''));
            exports.refresh();
        });

        queryEls(`${root}input[filter]`).forEach(listen(R.__, 'input', exports.refresh));

        exports.content = queryEl(root);
    };

    exports.refresh = () => {
        queryEls(`${root}.pagination li a`)[0].click();
    };

    function dataRecieved(err, data) {
        if (err) { Utils.handleError(err); return; }
        addEl(clearEl(queryEl(`${root}.result-number`)), makeText(L10n.format('log-viewer', 'total', [data.max])));

        const container = clearEl(queryEl(`${root}.log-data`));
        queryEls(`${root}.pagination li`).forEach(li => hideEl(li, li.num > data.logSize - 1));
        R.ap([addEl(container)], data.requestedLog.map(makeRow));
    }

    function getData(event) {
        const filter = R.fromPairs(queryEls(`${root}input[filter]`).map(el => [getAttr(el, 'filter'), el.value]));
        DBMS.getLog(Number(event.target.value), filter, dataRecieved);
    }

    function makeRow(rowData) {
        const addText = (text) => {
            return addEl(makeEl('td'), addEl(makeEl('span'), makeText(text)));
        };
        return addEls(makeEl('tr'), [
            addText(`${rowData[0]}`),
            addText(new Date(rowData[2]).format('yyyy/mm/dd HH:MM:ss')),
            addText(rowData[1]),
            addText(rowData[3]),
            
            addEls(makeEl('td'), JSON.parse(rowData[4]).map(item => {
                return addEl(addClass(makeEl('div'), 'log-param'), makeText(R.is(Object, item) ? JSON.stringify(item) : item));
            })),
            addEls(makeEl('td'), JSON.parse(rowData[5]).map(item => {
                return addEl(addClass(makeEl('div'), 'log-param'), makeText(R.is(Object, item) ? JSON.stringify(item) : item));
            })),
        ]);
    }
})(this.LogViewer = {});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, StoryCharacters
 */

'use strict';

((exports) => {
    const state = {};

    exports.init = () => {
        listen(getEl('networkSubsetsSelector'), 'change', onNetworkSubsetsChange);
    };

    exports.refresh = (parent) => {
        state.parent = parent;

        let selector = fillSelector(clearEl(getEl('networkSubsetsSelector')), constArr2Select(Constants.objectSubsets));
        [selector.value] = Constants.objectSubsets;
        onNetworkSubsetsChange({ target: selector });

        selector = fillSelector(
            clearEl(getEl('networkCharacterSelector')),
            state.parent.characterNames.sort(Utils.charOrdAObject).map(remapProps4Select)
        );
        setAttr(selector, 'size', selector.options.length > 15 ? 15 : selector.options.length);
        selector = fillSelector(
            clearEl(getEl('networkStorySelector')),
            state.parent.storyNames.sort(Utils.charOrdAObject).map(remapProps4Select)
        );
        setAttr(selector, 'size', selector.options.length > 15 ? 15 : selector.options.length);
    };

    exports.getStoryNames = () => {
        const { value } = getEl('networkSubsetsSelector');

        if (Constants.objectSubsets[0] === value) { // all objects
            return state.parent.storyNames.map(R.prop('value'));
        } else if (Constants.objectSubsets[1] === value) { // "selected characters"
            const primaryCharacters = nl2array(getEl('networkCharacterSelector').selectedOptions).map(R.prop('value'));
            const isPrimaryCharacter = R.contains(R.__, primaryCharacters);
            return R.values(state.parent.Stories)
                .filter(story => R.keys(story.characters).some(isPrimaryCharacter)).map(R.prop('name'));
        } else if (Constants.objectSubsets[2] === value) { //"selected stories"
            return nl2array(getEl('networkStorySelector').selectedOptions).map(R.prop('value'));
        }
        throw new Error(`Unexpected subsets selector: ${value}`);
    };

    exports.getCharacterNames = () => {
        const { value } = getEl('networkSubsetsSelector');

        if (Constants.objectSubsets[0] === value) { // all objects
            return state.parent.characterNames.map(R.prop('value'));
        } else if (Constants.objectSubsets[1] === value) { // "selected characters"
            // returns character and his neighbours
            const primaryCharacters = nl2array(getEl('networkCharacterSelector').selectedOptions).map(R.prop('value'));
            const isPrimaryCharacter = R.contains(R.__, primaryCharacters);
            const secondaryCharacters = R.values(state.parent.Stories)
                .filter(story => R.keys(story.characters).some(isPrimaryCharacter))
                .map(story => story.events.filter(event => R.keys(event.characters).some(isPrimaryCharacter))
                    .map(event => R.keys(event.characters).filter(name => !isPrimaryCharacter(name))));
            return primaryCharacters.concat(R.uniq(R.flatten(secondaryCharacters)));
        } else if (Constants.objectSubsets[2] === value) { //"selected stories"
            const stories = nl2array(getEl('networkStorySelector').selectedOptions).map(R.prop('value'));
            return R.uniq(R.flatten(stories.map(storyName => R.keys(state.parent.Stories[storyName].characters))));
        }
        throw new Error(`Unexpected subsets selector: ${value}`);
    };

    function onNetworkSubsetsChange(event) {
        const selectedSubset = event.target.value;
        hideEl(getEl('networkCharacterDiv'),  selectedSubset !== Constants.objectSubsets[1]);
        hideEl(getEl('networkStoryDiv'), selectedSubset !== Constants.objectSubsets[2]);
    }
})(this.NetworkSubsetsSelector = {});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS, StoryCharacters
 */

'use strict';

((exports) => {
    const state = {};

    const STORY_PREFIX = 'St:';
    const CHAR_PREFIX = 'Ch:';
    const PROFILE_GROUP = 'prof-';
    const FILTER_GROUP = 'filter-';

    exports.init = () => {
        NetworkSubsetsSelector.init();

        listen(getEl('networkNodeGroupSelector'), 'change', colorNodes);
        listen(getEl('showPlayerNamesCheckbox'), 'change', updateNodeLabels);
        listen(getEl('drawNetworkButton'), 'click', onDrawNetwork);
        $('#nodeFocusSelector').select2().on('change', onNodeFocus);
        listen(getEl('networkSelector'), 'change', onNetworkSelectorChangeDelegate);

        queryEls('#activityBlock button').forEach(listen(R.__, 'click', event => toggleClass(event.target, 'btn-primary')));
        queryEls('#relationsBlock button').forEach(listen(R.__, 'click', event => toggleClass(event.target, 'btn-primary')));

        //        state.network;
        state.highlightActive = false;

        initWarning();
        L10n.onL10nChange(initWarning);

        //    TimelinedNetwork.init();

        exports.content = getEl('socialNetworkDiv');
    };

    function initWarning() {
        const warning = clearEl(getEl('socialNetworkWarning'));
        const button = addEl(makeEl('button'), makeText(getL10n('social-network-remove-resources-warning')));
        addEls(warning, [makeText(getL10n('social-network-require-resources-warning')), button]);
        listen(button, 'click', () => addClass(warning, 'hidden'));
    }

    const nodeSort = CommonUtils.charOrdAFactory(a => a.label.toLowerCase());

    exports.refresh = () => {
        let selector = fillSelector(clearEl(getEl('networkSelector')), constArr2Select(Constants.networks));
        [selector.value] = Constants.networks;
        onNetworkSelectorChangeDelegate({ target: selector });

        selector = clearEl(getEl('networkNodeGroupSelector'));

        PermissionInformer.getEntityNamesArray('character', false, (err1, characterNames) => { // subset selector
            if (err1) { Utils.handleError(err1); return; }
            PermissionInformer.getEntityNamesArray('story', false, (err2, storyNames) => { // subset selector
                if (err2) { Utils.handleError(err2); return; }
                DBMS.getAllProfiles('character', (err3, profiles) => { // node coloring
                    if (err3) { Utils.handleError(err3); return; }
                    DBMS.getAllStories((err4, stories) => { // contains most part of SN data
                        if (err4) { Utils.handleError(err4); return; }
                        DBMS.getProfileStructure('character', (err5, profileStructure) => { // node coloring
                            if (err5) { Utils.handleError(err5); return; }
                            DBMS.getProfileBindings((err6, profileBindings) => { // node coloring
                                if (err6) { Utils.handleError(err6); return; }
                                DBMS.getGroupCharacterSets((err7, groupCharacterSets) => { // node coloring
                                    if (err7) { Utils.handleError(err7); return; }
                                    DBMS.getMetaInfo((err8, metaInfo) => { // timelined network
                                        if (err8) { Utils.handleError(err8); return; }
                                        DBMS.getRelations((err9, relations) => { // relations
                                            if (err9) { Utils.handleError(err9); return; }

                                            state.Stories = stories;
                                            state.Characters = profiles;
                                            state.profileBindings = profileBindings;
                                            state.groupCharacterSets = groupCharacterSets;
                                            state.metaInfo = metaInfo;
                                            state.relations = relations;

                                            const checkboxes = profileStructure.filter(element =>
                                                R.equals(element.type, 'checkbox'));
                                            R.values(profiles).forEach((profile) => {
                                                checkboxes.map(item => (profile[item.name] =
                                                    constL10n(Constants[profile[item.name]])));
                                            });

                                            const colorGroups = profileStructure.filter(element =>
                                                R.contains(element.type, ['enum', 'checkbox']));
                                            const defaultColorGroup = {
                                                value: Constants.noGroup,
                                                name: constL10n(Constants.noGroup)
                                            };

                                            const profileLabel = strFormat(getL10n('social-network-profile-group'));
                                            const filterLabel = strFormat(getL10n('social-network-filter-group'));

                                            const profileGroups = colorGroups.map(group => group.name).map(name =>
                                                ({ value: PROFILE_GROUP + name, name: profileLabel([name]) }));
                                            const filterGroups = R.keys(groupCharacterSets).map(name =>
                                                ({ value: FILTER_GROUP + name, name: filterLabel([name]) }));
                                            fillSelector(
                                                selector,
                                                [defaultColorGroup].concat(profileGroups).concat(filterGroups)
                                            );

                                            initGroupColors(colorGroups);

                                            NetworkSubsetsSelector.refresh({
                                                characterNames,
                                                storyNames,
                                                Stories: stories
                                            });
                                            //                            onDrawNetwork();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    };

    function initGroupColors(colorGroups) {
        state.groupColors = R.clone(Constants.snFixedColors);
        state.groupLists = {};

        colorGroups.forEach((group) => {
            if (group.type === 'enum') {
                state.groupLists[PROFILE_GROUP + group.name] = group.value.split(',').map((subGroupName, i) => {
                    state.groupColors[`${PROFILE_GROUP + group.name}.${subGroupName.trim()}`] =
                        Constants.colorPalette[i+2];
                    return `${PROFILE_GROUP + group.name}.${subGroupName.trim()}`;
                });
            } else if (group.type === 'checkbox') {
                const trueName = constL10n(Constants.true);
                const falseName = constL10n(Constants.false);
                state.groupColors[`${PROFILE_GROUP + group.name}.${trueName}`] =
                    Constants.colorPalette[group.value ? 0+2 : 1+2];
                state.groupColors[`${PROFILE_GROUP + group.name}.${falseName}`] =
                    Constants.colorPalette[group.value ? 1+2 : 0+2];
                state.groupLists[PROFILE_GROUP + group.name] =
                    [`${PROFILE_GROUP + group.name}.${trueName}`, `${PROFILE_GROUP + group.name}.${falseName}`];
            } else {
                throw new Error(`Unexpected profile item type: ${group.type}`);
            }
        });
    }

    function makeLegendItem(label, color) {
        const colorDiv = addEl(makeEl('div'), makeText(label));
        colorDiv.style.backgroundColor = color.background;
        colorDiv.style.border = `solid 2px ${color.border}`;
        return colorDiv;
    }

    function refreshLegend(groupName) {
        const colorLegend = clearEl(getEl('colorLegend'));
        let els = [];

        if (groupName === 'noGroup') {
            els.push(makeLegendItem(constL10n('noGroup'), Constants.snFixedColors.noGroup.color));
        } else if (CommonUtils.startsWith(groupName, PROFILE_GROUP)) {
            els = els.concat(state.groupLists[groupName].map(value =>
                makeLegendItem(value.substring(PROFILE_GROUP.length), state.groupColors[value].color)));
        } else if (CommonUtils.startsWith(groupName, FILTER_GROUP)) {
            els.push(makeLegendItem(constL10n('noGroup'), Constants.snFixedColors.noGroup.color));
            els.push(makeLegendItem(constL10n('fromGroup'), Constants.snFixedColors.fromGroup.color));
        } else {
            throw new Error(`Unexpected group name/type: ${groupName}`);
        }

        if (['characterPresenceInStory', 'characterActivityInStory'].indexOf(state.selectedNetwork) !== -1) {
            els.push(makeLegendItem(getL10n('social-network-story'), Constants.snFixedColors.storyColor.color));
        }
        addEls(colorLegend, els);
    }

    function colorNodes(event) {
        const groupName = event.target.value;
        refreshLegend(groupName);
        if (state.nodesDataset === undefined) return;

        NetworkSubsetsSelector.getCharacterNames().forEach((characterName) => {
            state.nodesDataset.update({
                id: CHAR_PREFIX + characterName,
                group: getNodeGroup(characterName, groupName)
            });
        });
    }

    function getNodeGroup(characterName, groupName) {
        if (groupName === 'noGroup') {
            return groupName;
        } else if (CommonUtils.startsWith(groupName, PROFILE_GROUP)) {
            const character = state.Characters[characterName];
            return `${groupName}.${character[groupName.substring(PROFILE_GROUP.length)]}`;
        } else if (CommonUtils.startsWith(groupName, FILTER_GROUP)) {
            return state.groupCharacterSets[groupName.substring(FILTER_GROUP.length)][characterName] ? 'fromGroup' : 'noGroup';
        }
        throw new Error(`Unexpected group name: ${groupName}`);
    }

    function updateNodeLabels() {
        if (state.nodesDataset === undefined) return;
        const showPlayer = getEl('showPlayerNamesCheckbox').checked;
        const allNodes = state.nodesDataset.get({
            returnType: 'Object'
        });

        R.values(allNodes).filter(node => node.type === 'character').forEach((node) => {
            const label = makeCharacterNodeLabel(showPlayer, node.originName);
            if (node.label !== undefined) {
                node.label = label;
            } else if (node.hiddenLabel !== undefined) {
                node.hiddenLabel = label;
            } else {
                console.log(`Suspicious node: ${JSON.stringify(node)}`);
            }
        });

        state.nodesDataset.update(R.values(allNodes));
    }

    function onNetworkSelectorChangeDelegate(event) {
        hideEl(getEl('activityBlock'), event.target.value !== 'characterActivityInStory');
        queryEls('#activityBlock button').forEach(el => addClass(el, 'btn-primary'));
        hideEl(getEl('relationsBlock'), event.target.value !== 'characterRelations');
        queryEls('#relationsBlock button').forEach(el => addClass(el, 'btn-primary'));
    }

    function onNodeFocus(event) {
        state.network.focus(event.target.value, Constants.snFocusOptions);
    }

    function onDrawNetwork() {
        onNetworkSelectorChange(getEl('networkSelector').value);
    //    TimelinedNetwork.refresh(state.network, state.nodesDataset,
    //            state.edgesDataset, getEventDetails(), state.metaInfo);
    }

    function onNetworkSelectorChange(selectedNetwork) {
        state.selectedNetwork = selectedNetwork;
        let nodes = [];
        let edges = [];

        switch (selectedNetwork) {
        case 'socialRelations':
            nodes = getCharacterNodes();
            edges = getDetailedEdges();
            break;
        case 'characterPresenceInStory':
            nodes = getCharacterNodes().concat(getStoryNodes());
            edges = getStoryEdges();
            break;
        case 'characterActivityInStory':
            nodes = getCharacterNodes().concat(getStoryNodes());
            edges = getActivityEdges();
            break;
        case 'characterRelations':
            nodes = getCharacterNodes();
            edges = getRelationEdges();
            break;
        default:
            throw new Error(`Unexpected network type: ${selectedNetwork}`);
        }

        refreshLegend(getEl('networkNodeGroupSelector').value);

        clearEl(getEl('nodeFocusSelector'));
        nodes.sort(nodeSort);

        const data = getSelect2DataCommon(remapProps(['id', 'text'], ['id', 'originName']), nodes);
        $('#nodeFocusSelector').select2(data);

        state.nodesDataset = new vis.DataSet(nodes);
        state.edgesDataset = new vis.DataSet(edges);

        redrawAll();
    }

    function makeCharacterNodeLabel(showPlayer, characterName) {
        const label = characterName.split(' ').join('\n');
        if (showPlayer) {
            const player = state.profileBindings[characterName] || '';
            return `${label}/\n${player}`;
        }
        return label;
    }

    function getCharacterNodes() {
        const groupName = getEl('networkNodeGroupSelector').value;
        const showPlayer = getEl('showPlayerNamesCheckbox').checked;
        return NetworkSubsetsSelector.getCharacterNames().map((characterName) => {
            const profile = state.Characters[characterName];
            return {
                id: CHAR_PREFIX + characterName,
                label: makeCharacterNodeLabel(showPlayer, characterName),
                type: 'character',
                originName: characterName,
                group: groupName === 'noGroup' ? constL10n('noGroup') : `${groupName}.${profile[groupName]}`
            };
        });
    }

    function getStoryNodes() {
        const nodes = NetworkSubsetsSelector.getStoryNames().map(name => ({
            id: STORY_PREFIX + name,
            label: name.split(' ').join('\n'),
            value: Object.keys(state.Stories[name].characters).length,
            title: Object.keys(state.Stories[name].characters).length,
            group: 'storyColor',
            type: 'story',
            originName: name,
        }));
        return nodes;
    }

    function getActivityEdges() {
        const selectedActivities = queryEls('#activityBlock button.btn-primary').map(getAttr(R.__, 'data-value'));
        const stories = state.Stories;
        return R.flatten(R.keys(stories).map(name => R.keys(stories[name].characters)
            .map(char1 => R.keys(stories[name].characters[char1].activity).filter(R.contains(R.__, selectedActivities))
                .map(activity => ({
                    from: STORY_PREFIX + name,
                    to: CHAR_PREFIX + char1,
                    color: Constants.snActivityColors[activity],
                    width: 2,
                    hoverWidth: 4
                })))));
    }

    function getRelationEdges() {
        const selectedRelations = queryEls('#relationsBlock button.btn-primary').map(getAttr(R.__, 'data-value'));
        const { relations } = state;
        const checked = R.contains(R.__, selectedRelations);
        return R.flatten(relations.map((rel) => {
            const arr = [];
            const { starter } = rel;
            const { ender } = rel;
            const edgeTmpl = {
                from: CHAR_PREFIX + starter,
                to: CHAR_PREFIX + ender,
                color: Constants.snRelationColors.neutral,
                width: 2,
                hoverWidth: 4
            };
            if (rel.essence.length === 0) {
                if (checked('neutral')) {
                    arr.push(R.merge(edgeTmpl, {
                        color: Constants.snRelationColors.neutral,
                    }));
                }
            } else {
                if (checked('allies') && R.contains('allies', rel.essence)) {
                    arr.push(R.merge(edgeTmpl, {
                        color: Constants.snRelationColors.allies,
                    }));
                }
                if (checked('directional') && R.contains('starterToEnder', rel.essence)) {
                    arr.push(R.merge(edgeTmpl, {
                        color: Constants.snRelationColors.starterToEnder,
                        arrows: 'to'
                    }));
                }
                if (checked('directional') && R.contains('enderToStarter', rel.essence)) {
                    arr.push(R.merge(edgeTmpl, {
                        color: Constants.snRelationColors.enderToStarter,
                        arrows: 'from'
                    }));
                }
            }
            return arr;
        }));
    }

    function getStoryEdges() {
        return R.flatten(R.keys(state.Stories).map(name => R.keys(state.Stories[name].characters).map(char1 => ({
            from: STORY_PREFIX + name,
            to: CHAR_PREFIX + char1,
            color: 'grey'
        }))));
    }

    function getEventDetails() {
        return R.flatten(R.values(state.Stories).map(story => story.events.map(event => ({
            eventName: event.name,
            storyName: story.name,
            time: event.time,
            characters: R.keys(event.characters)
        }))));
    }

    function getDetailedEdges() {
        const edgesCheck = {};
        R.values(state.Stories).forEach((story) => {
            story.events.forEach((event) => {
                const charNames = R.keys(event.characters).sort();
                charNames.forEach((char1, i) => {
                    charNames.forEach((char2, j) => {
                        if (i <= j) {
                            return;
                        }
                        const key = char1 + char2;
                        if (!edgesCheck[key]) {
                            edgesCheck[key] = {
                                from: CHAR_PREFIX + char1,
                                to: CHAR_PREFIX + char2,
                                title: {},
                            };
                        }
                        edgesCheck[key].title[story.name] = true;
                    });
                });
            });
        });

        return R.values(edgesCheck).map((edgeInfo) => {
            const title = R.keys(edgeInfo.title).sort().join(', ');
            const value = R.keys(edgeInfo.title).length;
            return {
                from: edgeInfo.from,
                to: edgeInfo.to,
                title: `${value}: ${title}`,
                value,
                color: 'grey'
            };
        });
    }

    function redrawAll() {
        const container = getEl('socialNetworkContainer');

        const data = {
            nodes: state.nodesDataset,
            edges: state.edgesDataset
        }; // Note: data is coming from ./datasources/WorldCup2014.js

        if (state.network) {
            state.network.destroy();
        }

        const opts = CommonUtils.clone(Constants.socialNetworkOpts);
        opts.groups = state.groupColors;

        state.network = new vis.Network(container, data, opts);

        state.network.on('click', neighbourhoodHighlight);
    }

    function hideLabel(node) {
        if (node.hiddenLabel === undefined) {
            node.hiddenLabel = node.label;
            node.label = undefined;
        }
    }
    function showLabel(node) {
        if (node.hiddenLabel !== undefined) {
            node.label = node.hiddenLabel;
            node.hiddenLabel = undefined;
        }
    }

    function highlightNodes(network, allNodes, zeroDegreeNodes, firstDegreeNodes) {
        // get the second degree nodes
        const secondDegreeNodes = R.uniq(R.flatten(firstDegreeNodes.map(id => network.getConnectedNodes(id))));
        // mark all nodes as hard to read.
        R.values(allNodes).forEach((node) => {
            node.color = 'rgba(200,200,200,0.5)';
            hideLabel(node);
        });
        // all second degree nodes get a different color and their label back
        secondDegreeNodes.map(id => allNodes[id]).forEach((node) => {
            node.color = 'rgba(150,150,150,0.75)';
            showLabel(node);
        });
        // all first degree nodes get their own color and their label back
        firstDegreeNodes.map(id => allNodes[id]).forEach((node) => {
            node.color = undefined;
            showLabel(node);
        });
        // the main node gets its own color and its label back.
        zeroDegreeNodes.map(id => allNodes[id]).forEach((node) => {
            node.color = undefined;
            showLabel(node);
        });
    }

    function neighbourhoodHighlight(params) {
        // get a JSON object
        const allNodes = state.nodesDataset.get({
            returnType: 'Object'
        });

        const { network } = state;
        if (params.nodes.length > 0) {
            state.highlightActive = true;
            const selectedNode = params.nodes[0];
            const zeroDegreeNodes = [selectedNode];
            const firstDegreeNodes = network.getConnectedNodes(selectedNode);
            highlightNodes(network, allNodes, zeroDegreeNodes, firstDegreeNodes);
        } else if (params.edges.length > 0) {
            state.highlightActive = true;
            const selectedEdge = params.edges[0];
            const firstDegreeNodes = network.getConnectedNodes(selectedEdge);
            highlightNodes(network, allNodes, [], firstDegreeNodes);
        } else if (state.highlightActive === true) {
            // reset all nodes
            R.values(allNodes).forEach((node) => {
                node.color = undefined;
                showLabel(node);
            });
            state.highlightActive = false;
        }

        // transform the object into an array
        state.nodesDataset.update(R.values(allNodes));
    }
})(this.SocialNetwork = {});

//"use strict";
//
//(function(exports){
//
////    var cameraInitPos = new THREE.Vector3(-30, 40, 30).multiplyScalar(2.5);
////    var cameraInitPos = new THREE.Vector3(0, 40, 40).multiplyScalar(2.5);
////    var cameraInitPos = new THREE.Vector3(0, 0, 40).multiplyScalar(2.5);
//    var cameraInitPos = new THREE.Vector3(0, 0, 60).multiplyScalar(2.5);
//    var basicZScale = 25;
//    var spotLightInitPos = new THREE.Vector3(0, 0, 50);
//
//    // three.js
//    var camera;
//    var scene;
//    var renderer;
//    var controls;
//    var stats;
//
//    function initStats() {
//        var stats = new Stats();
//        stats.setMode(0); // 0: fps, 1: ms
//        addEl(clearEl(getEl("Stats-output")), stats.domElement);
//        return stats;
//    };
//
//    function init(){
//        // create a render and set the size
//        renderer = new THREE.WebGLRenderer();
//        renderer.setClearColor(new THREE.Color(0xEEEEEE, 1.0));
//        addEl(clearEl(getEl("WebGL-output")), renderer.domElement);
//
//        stats = initStats();
//
//        controls = new function () {
//            this.rotationSpeed = 0.08;
////            this.bouncingSpeed = 0.03;
//            this.zScale = basicZScale;
//            this.planeScale = 10;
//            this.cameraZ = 120;
////            this.cameraRotX = 0;
////            this.cameraRotY = 0;
////            this.cameraRotZ = 0;
//
//            this.outputObjects = function () {
//                console.log(scene.children);
//            }
//        };
//
//
//        var gui = new dat.GUI({ autoPlace: false });
//        gui.add(controls, 'rotationSpeed', 0, 0.5);
////        gui.add(controls, 'bouncingSpeed', 0, 0.5);
//        gui.add(controls, 'zScale', 1, 100);
//        gui.add(controls, 'planeScale', 1, 100);
//        gui.add(controls, 'cameraZ', -500, 500);
////        gui.add(controls, 'cameraRotX', -1, 1);
////        gui.add(controls, 'cameraRotY', -1, 1);
////        gui.add(controls, 'cameraRotZ', -1, 1);
//
//        gui.add(controls, 'outputObjects');
//
//        addEl(getEl('gui-settings-output'), gui.domElement);
//    //    renderer.shadowMapEnabled = true;
//    };
//
//    var isFirstRefresh = true;
//
//    // once everything is loaded, we run our Three.js stuff.
//    function refresh(network, nodes, edges, eventDetails, metaInfo) {
//
//        var lowerTimeBoundary = new Date(metaInfo.preGameDate).getTime();
//        var upperTimeBoundary = new Date(metaInfo.date).getTime();
//        var timeDiff = upperTimeBoundary - lowerTimeBoundary;
//        console.log(lowerTimeBoundary);
//        console.log(upperTimeBoundary);
//        console.log(timeDiff);
//
//        var characterEvents = {};
//        var storyEvents = {};
//        eventDetails.forEach(function(eventInfo){
//            if(eventInfo.time === ''){
//                eventInfo.time = metaInfo.date;
//            }
//            eventInfo.scaledTime = (new Date(eventInfo.time).getTime() - lowerTimeBoundary) / timeDiff;
//            console.log(eventInfo.scaledTime);
//            storyEvents[eventInfo.storyName] = storyEvents[eventInfo.storyName] || {events: []};
//            storyEvents[eventInfo.storyName].events.push(eventInfo);
//            eventInfo.characters.forEach(function(character){
//                characterEvents[character] = characterEvents[character] || {events: []};
//                characterEvents[character].events.push(eventInfo);
//            });
//        });
//        console.log(storyEvents);
//        console.log(characterEvents);
//        function fillMinMax(objInfo){
//            objInfo.minTime = R.reduce(R.min, Infinity, objInfo.events.map(R.prop('scaledTime')));
//            objInfo.maxTime = R.reduce(R.max, -Infinity, objInfo.events.map(R.prop('scaledTime')));
//        }
//        R.values(storyEvents).forEach(fillMinMax);
//        R.values(characterEvents).forEach(fillMinMax);
//        console.log(storyEvents);
//        console.log(characterEvents);
//
//        var sizes = updateRendererSize();
////        if(isFirstRefresh){
//        // create a scene, that will hold all our elements such as objects, cameras and lights.
//        scene = new THREE.Scene();
//
//        // create a camera, which defines where we're looking at.
//        camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 1000);
//
////        var orbitControls = new THREE.OrbitControls(camera);
//////        orbitControls.autoRotate = true;
////        var clock = new THREE.Clock();
//
//        // show axes in the screen
//        var axes = new THREE.AxisHelper(20);
//        scene.add(axes);
//
//        // create the ground plane
//        var planeGeometry = new THREE.PlaneGeometry(60, 20, 1, 1);
//        var planeMaterial = new THREE.MeshBasicMaterial({color: 0xffffff, opacity: 0});
//        var plane = new THREE.Mesh(planeGeometry, planeMaterial);
//        //    plane.receiveShadow = true;
//
//        // rotate and position the plane
//        plane.rotation.x = -0.5 * Math.PI;
//        plane.position.x = 15;
//        plane.position.y = 0;
//        plane.position.z = 0;
//
//        // add the plane to the scene
//        scene.add(plane);
//
//        // position and point the camera to the center of the scene
//        camera.position.copy(cameraInitPos);
//        camera.lookAt(new THREE.Vector3(0, 0, 0));
//        camera.position.add(new THREE.Vector3(0, -100, 0));
//        camera.lookAt(new THREE.Vector3(0, 0, 0));
////        camera.rotation.z =  Math.PI;
////        camera.lookAt(scene.position);
//
////        camera.rotateOnAxis(cameraInitPos.normalize() , 0.6);
////        camera.rotation.z = 0.75 * Math.PI;
//
////        camera.position.x = -30;
////        camera.position.y = 40;
////        camera.position.z = 30;
//
//        // add subtle ambient lighting
//        var ambientLight = new THREE.AmbientLight(0x0c0c0c);
//        scene.add(ambientLight);
//
//        // add spotlight for the shadows
//        var spotLight = new THREE.SpotLight(0xffffff);
//        spotLight.position.copy(spotLightInitPos);
//        //    spotLight.castShadow = true;
//        scene.add(spotLight);
////            isFirstRefresh = false;
////        }
//
//        // call the render function
//        var step = 0;
//
//        var isInitialized = false;
////        if(isFirstRefresh){
//            render();
////            isFirstRefresh = false;
////        }
////        network.storePositions();
//
//        function getEventInfo(id){
//            if(id.startsWith('St:')){
//                return storyEvents[id.substring(3)];
//            } else {
//                return characterEvents[id];
//            }
//        };
//
//        function render() {
//            stats.update();
//            network.storePositions();
//            if(!isInitialized){
//                console.log(nodes.get());
//                console.log(edges.get());
//                nodes.get().forEach(function(node){
//                    var eventInfo = getEventInfo(node.id);
//
//                    if(eventInfo){
//                        var height = eventInfo.maxTime - eventInfo.minTime;
//                        var z = (eventInfo.maxTime + eventInfo.minTime)/2;
//                        addCylinder(node.x/10,-node.y/10, z*basicZScale, height, 0.5, String('cyl-' + node.id));
////                        addCylinder(0,0,0, 2, 0.5, String('cyl-' + node.id));
////                        addCylinder(node.x/10,-node.y/10, -5, height, 3, String(node.id + '0'));
//                    }
////                    addCylinder(node.x/10,-node.y/10, 4, String(node.id + '1-top'));
//                });
//
//                isInitialized = true;
//            } else {
//                nodes.get().forEach(function(node){
//                    var cyl = scene.getObjectByName(String('cyl-' + node.id));
//                    if(cyl){
//                        cyl.position.x = node.x/10;
//                        cyl.position.y = -node.y/10;
//                    }
////                    cyl = scene.getObjectByName(String(node.id + '1-top'));
////                    cyl.position.x = node.x/10;
////                    cyl.position.y = -node.y/10;
//                });
//            }
//
//            scene.traverse(function (e) {
//                if (e instanceof THREE.Mesh && e.name.startsWith('cyl-')) {
////                    e.position.y = controls.zScale;
//                    var eventInfo = getEventInfo(e.name.substring(4));
////                    if(eventInfo){
//                        e.position.z = (eventInfo.maxTime + eventInfo.minTime)/2 * controls.zScale;
////                        e.setHeight((eventInfo.maxTime - eventInfo.minTime) * controls.zScale);
////                    } else {
////                        console.log(e.name);
////                    }
//                    e.scale.y = controls.zScale;
//                }
//            });
//
//            var nowTime = Date.now();
//            var multip = 0.005;
//            camera.position.x = 50*Math.sin(nowTime*controls.rotationSpeed*multip);
//            camera.position.y = 50*Math.cos(nowTime*controls.rotationSpeed*multip);
//            camera.position.z = controls.cameraZ;
//            camera.lookAt(new THREE.Vector3(0, 0, 0));
////            scene.traverse(function (e) {
////                if (e instanceof THREE.Mesh && e.name.endsWith('1-top')) {
//////                    e.position.y = controls.zScale;
////                    e.position.z = controls.zScale;
////                }
////            });
//
////            var delta = clock.getDelta();
////            orbitControls.update(delta);
//
////            camera.rotateOnAxis(cameraInitPos.normalize() , controls.cameraRotX);
////            camera.rotateOnAxis(camera.getWorldDirection().normalize() , controls.cameraRotX);
////            camera.rotation.copy(new THREE.Vector3(controls.cameraRotX,
////                controls.cameraRotY, controls.cameraRotZ).multiplyScalar(Math.PI));
////            camera.rotation.x = controls.cameraRotX * Math.PI;
//
//            // render using requestAnimationFrame
//            requestAnimationFrame(render);
//            renderer.render(scene, camera);
//        }
//
//    }
//
//    function updateRendererSize(){
//        var styles = getComputedStyle(getEl('socialNetworkContainer'));
//        var width = styles.width.split('px').join('') * 0.75;
//        var height = styles.height.split('px').join('') * 0.75;
//        renderer.setSize(width, height);
//        return {
//            width: width,
//            height: height,
//        }
//    }
//    function onResize() {
//        if(camera && renderer){
//            var sizes = updateRendererSize();
//            camera.aspect = sizes.width / sizes.height;
//            camera.updateProjectionMatrix();
//        }
//    }
//
//    function addCylinder(x, y, z, height, radius, id) {
//
//        var geometry = new THREE.CylinderGeometry( radius, radius, height, 32 );
//        var material = new THREE.MeshLambertMaterial( {color: 0x7777ff} );
//        var cylinder = new THREE.Mesh( geometry, material );
//        cylinder.name = id;
//
//        cylinder.position.x = x;
//        cylinder.position.y = y;
//        cylinder.position.z = z;
//        cylinder.rotation.x = -0.5 * Math.PI;
////        cylinder.position.y = z;
////        cylinder.position.z = y;
//
//    //    cylinder.position.x = 40;
//
//        scene.add( cylinder );
//
//    };
//
//    exports.init = init;
//    exports.refresh = refresh;
////    window.onload = init;
//
//    // listen to the resize events
//    window.addEventListener('resize', onResize, false);
//
//
//})(this['TimelinedNetwork']={});

/*Copyright 2015-2018 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 jQuery, DBMS
 */

'use strict';


((exports) => {
    const defaultHists = ['storyEventsHist', 'storyCharactersHist', 'eventCompletenessHist',
        'characterSymbolsHist', 'characterStoriesHist'];
    const entityCharts = ['characterChart', 'playerChart', 'storyChart', 'groupChart'];

    const statisticKeys = [
        'characterNumber',
        'playerNumber',
        'storyNumber',
        'groupNumber',
        'eventsNumber',
        'userNumber',
        'textCharacterNumber',
        'lastEvent',
        'firstEvent',
    ];

    const root = '.overview-tab ';
    const state = {};

    state.Charts = {};

    exports.init = () => {
        state.name = getEl('gameNameInput');
        state.name.addEventListener('change', updateName);

        state.lastSaveTime = getEl('lastSaveTime');

        state.date = getEl('gameDatePicker');

        let opts = {
            lang: L10n.getLang(),
            mask: true,
            onChangeDateTime: updateTime
        };

        jQuery(state.date).datetimepicker(opts);

        state.preDate = getEl('preGameDatePicker');

        opts = {
            lang: L10n.getLang(),
            mask: true,
            onChangeDateTime: updatePreGameDate
        };

        jQuery(state.preDate).datetimepicker(opts);

        L10n.onL10nChange(() => {
            jQuery(state.date).datetimepicker({
                lang: L10n.getLang()
            });
            jQuery(state.preDate).datetimepicker({
                lang: L10n.getLang()
            });
        });

        state.descr = queryEl(`${root}.game-description-area`);
        state.descr.addEventListener('change', updateDescr);
        
        const gearsContainer = qee(queryEl(root), '#gears');
        addEl(gearsContainer, qe('.gears-tab'));
        Gears.init();
        var observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.attributeName === "class") {
                    if(hasClass(gearsContainer, 'active')) {
                        Gears.refresh();
                    }
                }
            });
        });
        observer.observe(gearsContainer, {
            attributes: true
        });
        
        const slidersContainer = qee(queryEl(root), '#sliders');
        addEl(slidersContainer, qe('.sliders-tab'));
        Sliders.init();

        exports.content = queryEl(root);
    };
    
    exports.refresh = () => {
        Gears.refresh();
        Sliders.refresh();
        PermissionInformer.isAdmin((err, isAdmin) => {
            if (err) { Utils.handleError(err); return; }
            Utils.enable(exports.content, 'adminOnly', isAdmin);
        });
        
        Promise.all( [DBMS.getMetaInfoPm(), DBMS.getStatisticsPm()] ).then(updateOverviewTab).catch(Utils.handleError);
    };

    function makeChart(id, canvas, data) {
        if (state.Charts[id]) {
            state.Charts[id].destroy();
        }

        const labels = [];
        const dataset = {
            data: [],
            backgroundColor: [],
            hoverBackgroundColor: []
        };
        data.forEach((item, i) => {
            if (Constants.colorPalette[i]) {
                labels.push(item.label);
                dataset.data.push(item.value);
                dataset.backgroundColor.push(Constants.colorPalette[i].color.background);
                dataset.hoverBackgroundColor.push(Constants.colorPalette[i].color.hover.background);
            }
        });

        const ctx = canvas.getContext('2d');
        state.Charts[id] = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels,
                datasets: [dataset]
            },
            options: {
                animation: {
                    animateRotate: false
                },
                responsive: false,
                legend: {
                    display: false,
                },
                tooltips: {
                    enabled: false,
                    custom: customTooltips
                }
            },
        });
    }

    function makeHistogram(place, data) {
        let max = null;
        data.forEach((barData) => {
            if (barData) {
                if (max === null || barData.value > max) {
                    max = barData.value;
                }
            }
        });
        data.forEach((barData) => {
            if (barData) {
                // barData.normValue = (barData.value - min)/(max-min);
                //      barData.normValue = (barData.value - 0)/(max-0);
                barData.normValue = (((barData.value - 0) / (max - 0)) * 0.9) + 0.1;
            }
        });

        let div;
        data.forEach((barData) => {
            div = barData === null ? makeEl('div') : addEl(makeEl('div'), makeText(barData.value));
            addClass(div, 'bar');
            if (barData) {
                div.style.height = `${barData.normValue * 100}%`;
                $(div).tooltip({
                    title: barData.tip,
                });
            }

            addEl(place, div);
        });
    }

    function updateOverviewTab(results) {
        const [metaInfo, statistics] = results;
        state.name.value = metaInfo.name;
        state.date.value = metaInfo.date;
        state.preDate.value = metaInfo.preGameDate;
        state.descr.value = metaInfo.description;
        addEl(clearEl(state.lastSaveTime), makeText(new Date(metaInfo.saveTime).format('yyyy/mm/dd HH:MM:ss')));
        
        statistics.lastEvent = statistics.lastEvent !== '' ? new Date(statistics.lastEvent).format('yyyy/mm/dd h:MM') : '';
        statistics.firstEvent = statistics.firstEvent !== '' ? new Date(statistics.firstEvent).format('yyyy/mm/dd h:MM') : '';
        
        statisticKeys.forEach((key) => {
            updateStatisticValue(statistics, key);
        });
        
        addEl(clearEl(getEl('generalCompleteness')), makeText(strFormat(getL10n('overview-general-completeness-value'), statistics.generalCompleteness)));
        addEl(clearEl(getEl('storyCompleteness')), makeText(strFormat(getL10n('overview-story-completeness-value'), statistics.storyCompleteness)));
        addEl(clearEl(getEl('relationCompleteness')), makeText(strFormat(getL10n('overview-relation-completeness-value'), statistics.relationCompleteness)));
        
        defaultHists.forEach((histName) => {
            makeHistogram(clearEl(queryEl(`${root}.${histName}`)), statistics[histName]);
        });
        
        entityCharts.forEach((entityChart) => {
            makeChart(entityChart, queryEl(`${root}.${entityChart}`), statistics[entityChart]);
        });
        
        const symbolChartData = R.toPairs(localizeConsts(statistics.textCharactersCount)).map(pair => ({
            value: pair[1],
            label: makeChartLabel(statistics.textCharacterNumber, pair[0], pair[1])
        }));
        makeChart('symbolChart', queryEl(`${root}.symbolChart`), symbolChartData);
        
        const bindingChartData = R.toPairs(localizeConsts(statistics.bindingStats)).map(pair => ({
            value: pair[1],
            label: [pair[0], ': ', pair[1]].join('')
        }));
        makeChart('bindingChart', queryEl(`${root}.bindingChart`), bindingChartData);
        
        let barData, barDiv, bar;
        
        function makeContainer(obj) {
            barDiv = makeEl('div');
            addClass(barDiv, 'col-xs-3');
            addEl(barDiv, addEl(makeEl('h4'), makeText(obj.name)));
            addEl(barDiv, obj.bar);
            return barDiv;
        }
        function buildChart(info) {
            bar = setAttr(setAttr(makeEl('canvas'), 'width', '300'), 'height', '100');
            const data = R.zipObj(['name', 'bar'], [info.name, bar]);
            const container = makeContainer(data);
            makeChart(info.id, bar, info.prepared);
            return container;
        }
        
        function buildHist(info) {
            bar = addClass(makeEl('div'), 'overviewHist');
            const data = R.zipObj(['name', 'bar'], [info.name, bar]);
            const container = makeContainer(data);
            makeHistogram(bar, info.prepared);
            return container;
        }
        
        const innerMakeChart = R.compose(buildChart, prepareChart);
        const innerMakeHist = R.compose(buildHist, prepareHist);
        
        function localizeCheckboxes(info) {
            info.data = R.fromPairs(R.toPairs(info.data).map((val) => {
                val[0] = constL10n(Constants[val[0]]);
                return val;
            }));
            return info;
        }
        
        const makeCheckboxChart = R.compose(innerMakeChart, localizeCheckboxes);
        
        const fn = R.cond([
            [R.compose(R.equals('enum'), R.prop('type')), innerMakeChart],
            [R.compose(R.equals('checkbox'), R.prop('type')), makeCheckboxChart],
            [R.T, innerMakeHist],
            ]);
        
        showEl(qe(`${root} .alert.character`), statistics.profileCharts.characterCharts.length === 0);
        statistics.profileCharts.characterCharts.map(fn)
            .map(addEl(clearEl(queryEl(`${root}.characterProfileDiagrams`))));
        showEl(qe(`${root} .alert.player`), statistics.profileCharts.playerCharts.length === 0);
        statistics.profileCharts.playerCharts.map(fn)
            .map(addEl(clearEl(queryEl(`${root}.playerProfileDiagrams`))));
    }
    
    function localizeConsts(info) {
        info = R.fromPairs(R.toPairs(info).map((val) => {
            val[0] = constL10n(val[0]);
            return val;
        }));
        return info;
    }

    function prepareChart(info) {
        const total = R.sum(R.values(info.data));
        info.prepared = R.keys(info.data).map(key => R.zipObj(['value', 'label'], [info.data[key], makeChartLabel(total, key, info.data[key])]));
        return info;
    }

    function prepareHist(info) {
        info.prepared = [];
        const { step } = info.data;
        info.data = info.data.groups;
        const min = R.apply(Math.min, R.keys(info.data));
        const max = R.apply(Math.max, R.keys(info.data));

        for (let i = min; i < max + 1; i++) {
            if (info.data[i]) {
                info.prepared.push({
                    value: info.data[i],
                    label: `${i * step}-${(i * step) + (step - 1)}`,
                    tip: `${i * step}-${(i * step) + (step - 1)}`
                });
            } else {
                info.prepared.push(null);
            }
        }
        return info;
    }

    // eslint-disable-next-line no-var,vars-on-top
    var makeChartLabel = R.curry((total, key, value) =>
        [key, ': ', ((value / total) * 100).toFixed(0), '% (', value, '/', total, ')'].join(''));

    function updateStatisticValue(statistics, key) {
        addEl(clearEl(getEl(key)), makeText(statistics[key]));
    }

    function updateName(event) {
        DBMS.setMetaInfoStringPm('name', event.target.value).catch(Utils.handleError);
    }
    function updateTime(dp, input) {
        DBMS.setMetaInfoDate('date', input.val(), Utils.processError());
    }
    function updatePreGameDate(dp, input) {
        DBMS.setMetaInfoDate('preGameDate', input.val(), Utils.processError());
    }
    function updateDescr(event) {
        DBMS.setMetaInfoString('description', event.target.value, Utils.processError());
    }

    function customTooltips(tooltip) {
        // Tooltip Element
        let tooltipEl = document.getElementById('chartjs-tooltip');

        if (!tooltipEl) {
            tooltipEl = document.createElement('div');
            tooltipEl.id = 'chartjs-tooltip';
            tooltipEl.innerHTML = '<table></table>';
            document.body.appendChild(tooltipEl);
        }

        // Hide if no tooltip
        if (tooltip.opacity === 0) {
            tooltipEl.style.opacity = 0;
            return;
        }

        // Set caret Position
        tooltipEl.classList.remove('above', 'below', 'no-transform');
        if (tooltip.yAlign) {
            tooltipEl.classList.add(tooltip.yAlign);
        } else {
            tooltipEl.classList.add('no-transform');
        }

        function getBody(bodyItem) {
            return bodyItem.lines;
        }

        // Set Text
        if (tooltip.body) {
            const titleLines = tooltip.title || [];
            const bodyLines = tooltip.body.map(getBody);

            let innerHtml = '<thead>';

            titleLines.forEach((title) => {
                innerHtml += `<tr><th>${title}</th></tr>`;
            });
            innerHtml += '</thead><tbody>';

            bodyLines.forEach((body, i) => {
                const colors = tooltip.labelColors[i];
                let style = `background:${colors.backgroundColor}`;
                style += `; border-color:${colors.borderColor}`;
                style += '; border-width: 2px';
                const span = `<span class="chartjs-tooltip-key" style="${style}"></span>`;
                innerHtml += `<tr><td>${span}${body}</td></tr>`;
            });
            innerHtml += '</tbody>';

            const tableRoot = tooltipEl.querySelector('table');
            tableRoot.innerHTML = innerHtml;
        }

        const position = this._chart.canvas.getBoundingClientRect();

        //        // Display, position, and set styles for font
        tooltipEl.style.opacity = 1;
        tooltipEl.style.left = `${position.left + tooltip.caretX}px`;
        tooltipEl.style.top = `${position.top + tooltip.caretY}px`;
        //        tooltipEl.style.fontFamily = tooltip._fontFamily;
        //        tooltipEl.style.fontSize = tooltip.fontSize;
        //        tooltipEl.style.fontStyle = tooltip._fontStyle;
        tooltipEl.style.padding = `${tooltip.yPadding}px ${tooltip.xPadding}px`;
    }
})(this.Overview = {});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const root = '.profile-binding-tab ';

    exports.init = () => {
        listen(queryEl(`${root}.create-binding-button`), 'click', createBinding);
        listen(queryEl(`${root}.remove-binding-button`), 'click', removeBinding);
        exports.content = queryEl(root);
    };

    exports.refresh = () => {
        PermissionInformer.getEntityNamesArray('character', false, (err, characterNames) => {
            if (err) { Utils.handleError(err); return; }
            PermissionInformer.getEntityNamesArray('player', false, (err2, playerNames) => {
                if (err2) { Utils.handleError(err2); return; }
                DBMS.getProfileBindings((err3, profileBindings) => {
                    if (err3) { Utils.handleError(err3); return; }

                    const bondedCharacterList = R.keys(profileBindings);
                    const bondedPlayerList = R.values(profileBindings);
                    const filter = list => R.compose(R.not, R.contains(R.__, list), R.prop('value'));

                    fillSelector(
                        clearEl(queryEl(`${root}.character-selector`)),
                        characterNames.filter(filter(bondedCharacterList)).map(remapProps4Select)
                    );
                    fillSelector(
                        clearEl(queryEl(`${root}.player-selector`)),
                        playerNames.filter(filter(bondedPlayerList)).map(remapProps4Select)
                    );
                    const bindings = R.toPairs(profileBindings).map(binding => ({
                        name: R.join('/', binding),
                        value: JSON.stringify(binding)
                    }));
                    bindings.sort(CommonUtils.charOrdAFactory(R.prop('name')));
                    fillSelector(clearEl(queryEl(`${root}.binding-selector`)), bindings);
                });
            });
        });
    };

    function createBinding() {
        const characterName = queryEl(`${root}.character-selector`).value;
        const playerName = queryEl(`${root}.player-selector`).value;

        if (characterName === '' || playerName === '') {
            Utils.alert(getL10n('binding-character-or-player-not-selected'));
            return;
        }

        DBMS.createBinding(characterName, playerName, Utils.processError(exports.refresh));
    }

    function removeBinding() {
        const bindingVal = queryEl(`${root}.binding-selector`).value;

        if (bindingVal === '') {
            Utils.alert(getL10n('binding-binding-is-not-selected'));
            return;
        }
        const binding = JSON.parse(bindingVal);

        DBMS.removeBinding(binding[0], binding[1], Utils.processError(exports.refresh));
    }
})(this.ProfileBinding = {});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';


// Character profile already ha field 'name'
// I had some choices:
// 1. remove this field at all
// 2. Add one more object to divide special values (name) and user defined values
// 3. Prohibit to make field - name
// 1. This field is used in many places
// 2. - too complex way
// 3. simple and lesser complexity, I choose this way

((exports) => {
    const tabRoot = '.profile-configurer-tab ';
    const characterPanel = `${tabRoot}.character-profile-panel `;
    const playerPanel = `${tabRoot}.player-profile-panel `;

    exports.init = () => {
        const sel = clearEl(queryEl(`${characterPanel}.create-entity-type-select`));
        const fillMainSel = () => { fillItemTypesSel(clearEl(sel)); };
        fillMainSel();
        L10n.onL10nChange(fillMainSel);
        const sel2 = clearEl(queryEl(`${playerPanel}.create-entity-type-select`));
        const fillMainSel2 = () => { fillItemTypesSel(clearEl(sel2)); };
        fillMainSel2();
        L10n.onL10nChange(fillMainSel2);

        listen(queryEl(`${characterPanel}.create-entity-button`), 'click', createProfileItem('character', characterPanel));
        listen(queryEl(`${characterPanel}.move-entity-button`), 'click', moveProfileItem('character', characterPanel));
        listen(queryEl(`${characterPanel}.remove-entity-button`), 'click', removeProfileItem('character', characterPanel));

        listen(queryEl(`${playerPanel}.create-entity-button`), 'click', createProfileItem('player', playerPanel));
        listen(queryEl(`${playerPanel}.move-entity-button`), 'click', moveProfileItem('player', playerPanel));
        listen(queryEl(`${playerPanel}.remove-entity-button`), 'click', removeProfileItem('player', playerPanel));

        exports.content = queryEl(tabRoot);
    };

    exports.refresh = () => {
        refreshPanel('character', characterPanel);
        refreshPanel('player', playerPanel);
    };

    function refreshPanel(type, root) {
        DBMS.getProfileStructure(type, (err, allProfileSettings) => {
            if (err) { Utils.handleError(err); return; }

            const arr = allProfileSettings.map(R.compose(strFormat(getL10n('common-set-item-before')), R.append(R.__, []), R.prop('name')));
            arr.push(getL10n('common-set-item-as-last'));
            const positionSelectors = [queryEl(`${root}.create-entity-position-select`),
                queryEl(`${root}.move-entity-position-select`)];
            positionSelectors.map(clearEl).map(fillSelector(R.__, arr2Select(arr))).map(setProp(R.__, 'selectedIndex', allProfileSettings.length));

            const table = clearEl(queryEl(`${root}.profile-config-container`));

            try {
                addEls(table, allProfileSettings.map(getInput(type)));
            } catch (err1) {
                Utils.handleError(err1); return;
            }

            PermissionInformer.isAdmin((err2, isAdmin) => {
                if (err2) { Utils.handleError(err2); return; }
                Utils.enable(exports.content, 'adminOnly', isAdmin);
            });

            const selectorArr = [queryEl(`${root}.move-entity-select`), queryEl(`${root}.remove-entity-select`)];
            selectorArr.map(clearEl).map(fillSelector(R.__, arr2Select(allProfileSettings.map(R.prop('name')))));
        });
    }

    function createProfileItem(type, root) {
        return () => {
            const input = queryEl(`${root}.create-entity-input`);
            const name = input.value.trim();
            const itemType = queryEl(`${root}.create-entity-type-select`).value.trim();
            const positionSelector = queryEl(`${root}.create-entity-position-select`);

            DBMS.createProfileItem(type, name, itemType, positionSelector.selectedIndex, Utils.processError(() => {
                input.value = '';
                exports.refresh();
            }));
        };
    }

    function moveProfileItem(type, root) {
        return () => {
            const { index } = queryEl(`${root}.move-entity-select`).selectedOptions[0];
            const newIndex = queryEl(`${root}.move-entity-position-select`).selectedIndex;
            DBMS.moveProfileItem(type, index, newIndex, Utils.processError(exports.refresh));
        };
    }

    function removeProfileItem(type, root) {
        return () => {
            const selector = queryEl(`${root}.remove-entity-select`);
            const index = selector.selectedIndex;
            const name = selector.value;

            Utils.confirm(strFormat(getL10n('profiles-are-you-sure-about-removing-profile-item'), [name]), () => {
                DBMS.removeProfileItem(type, index, name, Utils.processError(exports.refresh));
            });
        };
    }

    // eslint-disable-next-line no-var,vars-on-top
    var fillItemTypesSel = sel => fillSelector(sel, constArr2Select(R.keys(Constants.profileFieldTypes)));
    const fillPlayerAccessSel = sel => fillSelector(sel, constArr2Select(Constants.playerAccessTypes));

    // eslint-disable-next-line no-var,vars-on-top
    var getInput = R.curry((type, profileSettings, index) => { // throws InternalError
        index++;
        const els = [];

        els.push(addEl(makeEl('span'), makeText(index)));

        let input = setProps(makeEl('input'), {
            value: profileSettings.name,
            info: profileSettings.name
        });
        listen(input, 'change', renameProfileItem(type));
        addClass(input, 'itemNameInput');
        els.push(input);

        let sel = makeEl('select');
        fillItemTypesSel(sel);
        setProps(sel, {
            value: profileSettings.type,
            info: profileSettings.name,
            oldType: profileSettings.type
        });
        listen(sel, 'change', changeProfileItemType(type));
        els.push(sel);

        switch (profileSettings.type) {
        case 'text':
        case 'enum':
        case 'multiEnum':
            input = makeEl('textarea');
            input.value = profileSettings.value;
            break;
        case 'string':
            input = makeEl('input');
            input.value = profileSettings.value;
            break;
        case 'number':
            input = makeEl('input');
            input.type = 'number';
            input.value = profileSettings.value;
            break;
        case 'checkbox':
            input = makeEl('input');
            input.type = 'checkbox';
            input.checked = profileSettings.value;
            break;
        default:
            throw new Errors.InternalError('errors-unexpected-switch-argument', [profileSettings.type]);
        }

        setProps(input, {
            info: profileSettings.name,
            infoType: profileSettings.type,
            oldValue: profileSettings.value
        });
        addClass(input, `profile-configurer-${profileSettings.type}`);
        listen(input, 'change', updateDefaultValue(type));
        els.push(input);

        input = setProps(makeEl('input'), {
            checked: profileSettings.doExport,
            info: profileSettings.name,
            type: 'checkbox'
        });
        listen(input, 'change', doExportChange(type));
        els.push(input);

        sel = makeEl('select');
        fillPlayerAccessSel(sel);
        setProps(sel, {
            value: profileSettings.playerAccess,
            info: profileSettings.name,
            oldValue: profileSettings.playerAccess,
        });
        listen(sel, 'change', changeProfileItemPlayerAccess(type));
        els.push(sel);

        input = setProps(makeEl('input'), {
            checked: profileSettings.showInRoleGrid,
            info: profileSettings.name,
            type: 'checkbox'
        });
        listen(input, 'change', showInRoleGridChange(type));
        els.push(input);

        return addEls(makeEl('tr'), els.map(el => addEl(makeEl('td'), addClass(el, 'adminOnly'))));
    });

    function updateDefaultValue(type) {
        return (event) => {
            const name = event.target.info;
            const itemType = event.target.infoType;
            const { oldValue } = event.target;

            const value = itemType === 'checkbox' ? event.target.checked : event.target.value;

            let newOptions, missedValues, newValue, updateEnum;

            switch (itemType) {
            case 'text':
            case 'string':
            case 'checkbox':
                DBMS.updateDefaultValue(type, name, value, Utils.processError());
                break;
            case 'number':
                if (Number.isNaN(value)) {
                    Utils.alert(getL10n('profiles-not-a-number'));
                    event.target.value = oldValue;
                    return;
                }
                DBMS.updateDefaultValue(type, name, Number(value), Utils.processError());
                break;
            case 'multiEnum':
            case 'enum':
                if (value === '' && itemType === 'enum') {
                    Utils.alert(getL10n('profiles-enum-item-cant-be-empty'));
                    event.target.value = oldValue;
                    return;
                }
                newOptions = value.split(',').map(R.trim);
                missedValues = oldValue.trim() === '' ? [] : R.difference(oldValue.split(','), newOptions);

                updateEnum = () => {
                    newValue = newOptions.join(',');
                    event.target.value = newValue;
                    event.target.oldValue = newValue;
                    DBMS.updateDefaultValue(type, name, newValue, Utils.processError());
                };

                if (missedValues.length !== 0) {
                    Utils.confirm(strFormat(getL10n('profiles-new-enum-values-remove-some-old-values'), [missedValues.join(',')]), updateEnum, () => {
                        event.target.value = oldValue;
                    });
                } else {
                    updateEnum();
                }
                break;
            default:
                Utils.handleError(new Errors.InternalError('errors-unexpected-switch-argument', [itemType]));
            }
        };
    }

    function doExportChange(type) {
        return (event) => {
            DBMS.doExportProfileItemChange(type, event.target.info, event.target.checked, Utils.processError());
        };
    }

    function showInRoleGridChange(type) {
        return (event) => {
            DBMS.showInRoleGridProfileItemChange(type, event.target.info, event.target.checked, Utils.processError());
        };
    }

    function renameProfileItem(type) {
        return (event) => {
            const newName = event.target.value.trim();
            const oldName = event.target.info;

            DBMS.renameProfileItem(type, newName, oldName, (err) => {
                if (err) {
                    event.target.value = event.target.info;
                    Utils.handleError(err);
                    return;
                }
                exports.refresh();
            });
        };
    }

    function changeProfileItemType(type) {
        return (event) => {
            Utils.confirm(strFormat(getL10n('profiles-are-you-sure-about-changing-profile-item-type'), [event.target.info]), () => {
                const newType = event.target.value;
                const name = event.target.info;
                DBMS.changeProfileItemType(type, name, newType, Utils.processError(exports.refresh));
            }, () => {
                event.target.value = event.target.oldType;
            });
        };
    }

    function changeProfileItemPlayerAccess(type) {
        return (event) => {
            const playerAccessType = event.target.value;
            const name = event.target.info;
            DBMS.changeProfileItemPlayerAccess(type, name, playerAccessType, (err) => {
                if (err) {
                    event.target.value = event.target.oldValue;
                    Utils.processError()(err);
                }
            });
        };
    }
})(this.ProfileConfigurer = {});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const state = {
        character: {},
        player: {}
    };
    const root = '.profile-editor-tab ';
    const characterSelector = `${root}.character-profile-selector`;
    const playerSelector = `${root}.player-profile-selector`;
    const characterProfileDiv = `${root}.character-profile-div`;
    const playerProfileDiv = `${root}.player-profile-div`;
    const characterReportDiv = `${root}.character-report-div tbody`;
    let profileEditorCore;

    exports.init = () => {
        $(characterSelector).select2().on('select2:select', showProfileInfoDelegate2('character'));
        $(playerSelector).select2().on('select2:select', showProfileInfoDelegate2('player'));
        profileEditorCore = ProfileEditorCore.makeProfileEditorCore();
        exports.content = queryEl(root);
    };

    exports.refresh = () => {
        clearEl(queryEl(characterReportDiv));
        refreshPanel('character', characterSelector, characterProfileDiv, () => {
            refreshPanel('player', playerSelector, playerProfileDiv, () => {
                applySettings('character', characterSelector, characterProfileDiv);
            });
        });
    };

    function refreshPanel(type, selector, profileDiv, callback) {
        PermissionInformer.getEntityNamesArray(type, false, (err, names) => {
            if (err) { Utils.handleError(err); return; }

            names.push({ displayName: '', value: '', editable: false });

            clearEl(queryEl(selector));
            $(selector).select2(getSelect2Data(names));
            state[type].names = names;

            DBMS.getProfileStructure(type, (err2, allProfileSettings) => {
                if (err2) { Utils.handleError(err2); return; }
                profileEditorCore.initProfileStructure(profileDiv, type, allProfileSettings, callback);
            });
        });
    }

    function applySettings(type, selector, profileDiv) {
        const { names } = state[type];
        if (names.length > 0) {
            const name = names[0].value;
            const settings = DBMS.getSettings();
            if (!settings.ProfileEditor) {
                settings.ProfileEditor = {};
                settings.ProfileEditor[type] = name;
            }
            let profileName = settings.ProfileEditor[type];
            if (names.map(nameInfo => nameInfo.value).indexOf(profileName) === -1) {
                settings.ProfileEditor[type] = name;
                profileName = name;
            }
            showProfileInfoDelegate2(type)({ target: { value: profileName } });
        }
    }

    function selectProfiles(charName, playerName) {
        showProfileInfoDelegate('character', characterProfileDiv, charName);
        showProfileInfoDelegate('player', playerProfileDiv, playerName);
        $(characterSelector).select2().val(charName).trigger('change');
        $(playerSelector).select2().val(playerName).trigger('change');
    }

    function showProfileInfoDelegate2(type) {
        return (event) => {
            const name = event.target.value.trim();
            if (name === '') {
                selectProfiles('', '');
                return;
            }
            DBMS.getProfileBinding(type, name, (err, binding) => {
                if (err) { Utils.handleError(err); return; }
                selectProfiles(binding[0], binding[1]);
            });
        };
    }

    function showProfileInfoDelegate(type, profileDiv, name) {
        updateSettings(type, name);
        if (name === '') {
            addClass(queryEl(profileDiv), 'hidden');
            if (type === 'character') {
                addClass(queryEl(characterReportDiv), 'hidden');
            }
            return;
        }
        DBMS.getProfile(type, name, (err, profile) => {
            if (err) { Utils.handleError(err); return; }
            PermissionInformer.isEntityEditable(type, name, (err2, isCharacterEditable) => {
                if (err2) { Utils.handleError(err2); return; }
                profileEditorCore.fillProfileInformation(profileDiv, type, profile, () => isCharacterEditable);

                if (type === 'character') {
                    DBMS.getCharacterReport(name, (err3, characterReport) => {
                        if (err3) { Utils.handleError(err3); return; }
                        removeClass(queryEl(characterReportDiv), 'hidden');
                        addEls(
                            clearEl(queryEl(characterReportDiv)),
                            characterReport.map(CharacterReports.makeStoryReportRow)
                        );
                    });
                }
            });
        });
    }

    function updateSettings(type, name) {
        const settings = DBMS.getSettings();
        settings.ProfileEditor[type] = name;
    }
})(this.ProfileEditor = {});

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

/* eslint-disable func-names */

'use strict';

((exports) => {
    exports.makeProfileEditorCore = () => {
        const innerExports = {};

        const root = '.profile-editor-core-tmpl';

        const state = {
            character: {},
            player: {}
        };

        innerExports.initProfileStructure = (profileDiv, type, profileStructure, callback) => {
            const container = qte(`${root} .profile-editor-container-tmpl`);
            addEl(clearEl(queryEl(profileDiv)), container);
            state[type].inputItems = {};
            state[type].profileStructure = profileStructure;

            if(profileStructure.length === 0){
                const alert = qmte('.alert-block-tmpl');
                addEl(alert, makeText(L10n.get('advices', `empty-${type}-profile-structure`)));
                addEl(queryEl(profileDiv), alert);
                if (callback) callback();
                return;
            }
            try {
                addEls(qee(queryEl(profileDiv), '.insertion-point'), profileStructure.map(appendInput(type)));
            } catch (err) {
                Utils.handleError(err); return;
            }

            if (callback) callback();
        };

        // eslint-disable-next-line no-var,vars-on-top
        var appendInput = R.curry((type, profileItemConfig) => {
            const itemInput = new ProfileItemInput(type, profileItemConfig);
            state[type].inputItems[profileItemConfig.name] = itemInput;
            const row = qte(`${root} .profile-editor-row-tmpl`);
            addEl(qee(row, '.profile-item-name'), makeText(profileItemConfig.name));
            addEl(qee(row, '.profile-item-input'), itemInput.dom);
            return row;
        });

        innerExports.fillProfileInformation = (profileDiv, type, profile, isEditable) => {
            removeClass(queryEl(profileDiv), 'hidden');
            R.values(state[type].inputItems).forEach((itemInput) => {
                if (itemInput.type === 'multiEnum') {
                    itemInput.multiEnumSelect.prop('disabled', !isEditable(itemInput.name, state[type].profileStructure));
                } else {
                    Utils.enableEl(itemInput.dom, isEditable(itemInput.name, state[type].profileStructure));
                }
            });

            state[type].name = profile.name;
            Object.values(state[type].inputItems).forEach((item) => {
                item.showFieldValue(profile);
            });
        };

        function ProfileItemInput(profileType, profileItemConfig) {
            let input, sel;
            switch (profileItemConfig.type) {
            case 'text':
                input = makeEl('textarea');
                addClass(input, 'profileTextInput');
                break;
            case 'string':
                input = makeEl('input');
                addClass(input, 'profileStringInput');
                break;
            case 'enum':
                input = makeEl('select');
                addClass(input, 'profileSelectInput');
                const toNameObj = R.compose(R.zipObj(['name']), R.append(R.__, []));
                fillSelector(input, R.sort(CommonUtils.charOrdA, profileItemConfig.value.split(',')).map(toNameObj));
                break;
            case 'number':
                input = makeEl('input');
                input.type = 'number';
                break;
            case 'checkbox':
                input = makeEl('input');
                input.type = 'checkbox';
                break;
            case 'multiEnum':
                this.multiEnumSelect = $('<select></select>');
                setAttr(this.multiEnumSelect[0], 'style', 'width: 100%;');
                addClass(this.multiEnumSelect[0], 'common-select');
                addClass(this.multiEnumSelect[0], 'profileStringInput');
                [input] = $('<span></span>').append(this.multiEnumSelect);
                setAttr(this.multiEnumSelect[0], 'multiple', 'multiple');

                sel = this.multiEnumSelect.select2(arr2Select2(R.sort(CommonUtils.charOrdA, profileItemConfig.value.split(','))));
                sel.on('change', this.updateFieldValue.bind(this));
                break;
            default:
                throw new Errors.InternalError('errors-unexpected-switch-argument', [profileItemConfig.type]);
            }

            if (profileItemConfig.type !== 'multiEnum') {
                listen(input, 'change', this.updateFieldValue.bind(this));
                addClass(input, 'form-control');
            }

            this.dom = input;
            this.type = profileItemConfig.type;
            this.profileType = profileType;
            this.name = profileItemConfig.name;
        }

        ProfileItemInput.prototype.showFieldValue = function (profile) {
            if (this.type === 'checkbox') {
                this.dom.checked = profile[this.name];
            } else if (this.type === 'multiEnum') {
                this.multiEnumSelect.val(profile[this.name] === '' ? null : profile[this.name].split(',')).trigger('change');
            } else {
                this.dom.value = profile[this.name];
            }
            this.oldValue = profile[this.name];
        };

        ProfileItemInput.prototype.updateFieldValue = function (event) {
            const fieldName = this.name;
            const profileName = state[this.profileType].name;
            if (this.multiEnumSelect && this.multiEnumSelect.prop('disabled')) {
                return; // we need to trigger change event on multiEnumSelect to update selection.
                // It may be disabled so it has false positive call.
            }

            let value, val;
            switch (this.type) {
            case 'text':
            case 'string':
            case 'enum':
                val = this.dom.value;
                value = val;
                break;
            case 'number':
                if (Number.isNaN(this.dom.value)) {
                    Utils.alert(getL10n('profiles-not-a-number'));
                    this.dom.value = this.oldValue;
                    return;
                }
                value = Number(this.dom.value);
                break;
            case 'checkbox':
                value = this.dom.checked;
                break;
            case 'multiEnum':
                value = this.multiEnumSelect.val().join(',');
                break;
            default:
                Utils.handleError(new Errors.InternalError('errors-unexpected-switch-argument', [this.type]));
                return;
            }
            DBMS.updateProfileField(this.profileType, profileName, fieldName, this.type, value, Utils.processError());
        };

        return innerExports;
    };
})(this.ProfileEditorCore = {});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, ProfileEditor, ProfileConfigurer, DBMS
 */

'use strict';

((exports) => {
    const state = {};
    const tabRoot = '.profiles-tab ';
    const characterRoot = `${tabRoot}.character-profile-panel `;
    const playerRoot = `${tabRoot}.player-profile-panel `;

    exports.init = () => {
        state.views = {};
        const nav = `${tabRoot}.sub-tab-navigation`;
        const content = `${tabRoot}.sub-tab-content`;
        const containers = {
            root: state,
            navigation: queryEl(nav),
            content: queryEl(content)
        };
        Utils.addView(containers, 'profile-editor', ProfileEditor, { mainPage: true });
        Utils.addView(containers, 'profile-constructor', ProfileConfigurer);
        Utils.addView(containers, 'profile-binding', ProfileBinding);

        listen(queryEl(`${characterRoot}.create-entity-button`), 'click', createProfile('character', characterRoot));
        listen(queryEl(`${characterRoot}.rename-entity-button`), 'click', renameProfile('character', characterRoot));
        listen(queryEl(`${characterRoot}.remove-entity-button`), 'click', removeProfile('character', characterRoot));

        listen(queryEl(`${playerRoot}.create-entity-button`), 'click', createProfile('player', playerRoot));
        listen(queryEl(`${playerRoot}.rename-entity-button`), 'click', renameProfile('player', playerRoot));
        listen(queryEl(`${playerRoot}.remove-entity-button`), 'click', removeProfile('player', playerRoot));

        exports.content = queryEl(tabRoot);
    };

    exports.refresh = () => {
        PermissionInformer.getEntityNamesArray('character', true, (err, characterNames) => {
            if (err) { Utils.handleError(err); return; }
            PermissionInformer.getEntityNamesArray('player', true, (err2, playerNames) => {
                if (err2) { Utils.handleError(err2); return; }
                rebuildInterface(characterRoot, characterNames);
                rebuildInterface(playerRoot, playerNames);
                state.currentView.refresh();
            });
        });
    };

    function rebuildInterface(root, names) {
        const data = getSelect2Data(names);

        clearEl(queryEl(`${root}.rename-entity-select`));
        $(`${root}.rename-entity-select`).select2(data);

        clearEl(queryEl(`${root}.remove-entity-select`));
        $(`${root}.remove-entity-select`).select2(data);
    }

    function createProfile(type, root) {
        return () => {
            const input = queryEl(`${root}.create-entity-input`);
            const name = input.value.trim();

            DBMS.createProfile(type, name, (err) => {
                if (err) { Utils.handleError(err); return; }
                PermissionInformer.refresh((err2) => {
                    if (err2) { Utils.handleError(err2); return; }
                    if (state.currentView.updateSettings) {
                        state.currentView.updateSettings(name);
                    }
                    input.value = '';
                    exports.refresh();
                });
            });
        };
    }

    function renameProfile(type, root) {
        return () => {
            const toInput = queryEl(`${root}.rename-entity-input`);
            const fromName = queryEl(`${root}.rename-entity-select`).value.trim();
            const toName = toInput.value.trim();

            DBMS.renameProfile(type, fromName, toName, (err) => {
                if (err) { Utils.handleError(err); return; }
                PermissionInformer.refresh((err2) => {
                    if (err2) { Utils.handleError(err2); return; }
                    toInput.value = '';
                    if (state.currentView.updateSettings) {
                        state.currentView.updateSettings(type, toName);
                    }
                    exports.refresh();
                });
            });
        };
    }

    function removeProfile(type, root) {
        return () => {
            const name = queryEl(`${root}.remove-entity-select`).value.trim();

            Utils.confirm(strFormat(getL10n('profiles-are-you-sure-about-character-removing'), [name]), () => {
                DBMS.removeProfile(type, name, (err) => {
                    if (err) { Utils.handleError(err); return; }
                    PermissionInformer.refresh((err2) => {
                        if (err2) { Utils.handleError(err2); return; }
                        exports.refresh();
                    });
                });
            });
        };
    }
})(this.Profiles = {});

/*Copyright 2018 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const root = '.character-reports-tmpl';

    exports.makeStoryReportRow = (storyInfo) => {
        const act = storyInfo.activity;
        const completeness = makeCompletenessLabel(storyInfo.finishedAdaptations, storyInfo.totalAdaptations);
        const color = getCompletenessColor(storyInfo.finishedAdaptations, storyInfo.totalAdaptations);
        const row = qte(`${root} .story-report-row-tmpl`);
        const qe = qee(row);
        L10n.localizeStatic(row);
        addEl(qe('.story-name'), makeText(storyInfo.storyName));
        setClassByCondition(qe('.activity-active'), 'active-item-in-report', act.active);
        setClassByCondition(qe('.activity-follower'), 'active-item-in-report', act.follower);
        setClassByCondition(qe('.activity-defensive'), 'active-item-in-report', act.defensive);
        setClassByCondition(qe('.activity-passive'), 'active-item-in-report', act.passive);
        addEl(qe('.completeness'), makeText(completeness));
        setStyle(qe('.completeness'), 'background-color', color);
        addEl(qe('.meets'), makeText(storyInfo.meets.join(', ')));
        addEl(qe('.inventory'), makeText(storyInfo.inventory));
        return row;
    };

    exports.makeRelationReportRow = R.curry((characterName, rel) => {
        const row = qte(`${root} .relation-report-row-tmpl`);
        const qe = qee(row);
        L10n.localizeStatic(row);
        const secondCharacter = ProjectUtils.get2ndRelChar(characterName, rel);
        addEl(qe('.character-name'), makeText(secondCharacter));
        const isStarter = rel.starter === characterName;

        if (isStarter) {
            setAttr(
                qe('.direction-starterToEnder'), 'title',
                L10n.format('briefings', 'starterToEnder', [characterName, secondCharacter])
            );
            setAttr(
                qe('.direction-enderToStarter'), 'title',
                L10n.format('briefings', 'enderToStarter', [secondCharacter, characterName])
            );
        } else {
            setAttr(
                qe('.direction-starterToEnder'), 'title',
                L10n.format('briefings', 'starterToEnder', [secondCharacter, characterName])
            );
            setAttr(
                qe('.direction-enderToStarter'), 'title',
                L10n.format('briefings', 'enderToStarter', [characterName, secondCharacter])
            );
        }

        setClassByCondition(
            qe('.direction-starterToEnder'), 'active-item-in-report',
            R.contains(isStarter ? 'starterToEnder' : 'enderToStarter', rel.essence)
        );
        setClassByCondition(qe('.direction-allies'), 'active-item-in-report', R.contains('allies', rel.essence));
        setClassByCondition(
            qe('.direction-enderToStarter'), 'active-item-in-report',
            R.contains(!isStarter ? 'starterToEnder' : 'enderToStarter', rel.essence)
        );

        const finished = isStarter ? rel.starterTextReady : rel.enderTextReady;

        addEl(qe('.completeness'), makeText(L10n.get('constant', finished ? 'finished' : 'unfinished')));
        setClassByCondition(qe('.completeness'), 'relation-finished', finished);
        setClassByCondition(qe('.completeness'), 'relation-unfinished', !finished);

        addEl(qe('.origin'), makeText(rel.origin));
        return row;
    });

    function makeCompletenessLabel(value, total) {
        return strFormat('{0} ({1}/{2})', [total === 0 ? '-' : `${((value / total) * 100).toFixed(0)}%`, value, total]);
    }

    function getCompletenessColor(value, total) {
        if (total === 0) { return 'transparent'; }
        function calc(b, a, part) {
            return ((a * part) + ((1 - part) * b)).toFixed(0);
        }

        let p = value / total;
        if (p < 0.5) {
            p *= 2;
            return strFormat('rgba({0},{1},{2}, 1)', [calc(251, 255, p), calc(126, 255, p), calc(129, 0, p)]); // red to yellow mapping
        }
        p = (p - 0.5) * 2;
        return strFormat('rgba({0},{1},{2}, 1)', [calc(255, 123, p), calc(255, 225, p), calc(0, 65, p)]); // yellow to green mapping
    }
})(this.CharacterReports = {});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const root = '.profile-binding2-tab ';
    const l10n = L10n.get('binding');

    exports.init = () => {
        listen(queryEl(`${root} .character-filter`), 'input', filterList('.character-list'));
        listen(queryEl(`${root} .player-filter`), 'input', filterList('.player-list'));
        listen(queryEl(`${root} .binding-filter`), 'input', filterList('.binding-list'));

        exports.content = queryEl(root);
    };

    exports.refresh = () => {
        PermissionInformer.getEntityNamesArray('character', false, (err, characterNames) => {
            if (err) { Utils.handleError(err); return; }
            PermissionInformer.getEntityNamesArray('player', false, (err2, playerNames) => {
                if (err2) { Utils.handleError(err2); return; }
                DBMS.getProfileBindings((err3, profileBindings) => {
                    if (err3) { Utils.handleError(err3); return; }
                    rebuildInterface(characterNames, playerNames, profileBindings);
                });
            });
        });
    };

    function rebuildInterface(characterNames, playerNames, profileBindings) {
        const bondedCharacterList = R.keys(profileBindings);
        const bondedPlayerList = R.values(profileBindings);
        const filter = list => R.compose(R.not, R.contains(R.__, list), R.prop('value'));
        
        showEl(queryEl(`${root} .alert.no-character`), characterNames.length === 0);
        Utils.enableEl(queryEl(`${root} .character-filter`), characterNames.length !== 0);
        showEl(queryEl(`${root} .character-list`), characterNames.length !== 0);
        
        showEl(queryEl(`${root} .alert.no-player`), playerNames.length === 0);
        Utils.enableEl(queryEl(`${root} .player-filter`), playerNames.length !== 0);
        showEl(queryEl(`${root} .player-list`), playerNames.length !== 0);
        
        Utils.enableEl(queryEl(`${root} .binding-filter`), R.keys(profileBindings).length !== 0);

        addEls(
            clearEl(queryEl(`${root} .entity-list.character-list`)),
            characterNames.filter(filter(bondedCharacterList)).map(profile2el('character'))
        );

        addEls(
            clearEl(queryEl(`${root} .entity-list.player-list`)),
            playerNames.filter(filter(bondedPlayerList)).map(profile2el('player'))
        );

        const bindings = R.toPairs(profileBindings).map(binding => ({
            name: R.join('/', binding),
            value: binding
        }));
        bindings.sort(CommonUtils.charOrdAFactory(R.prop('name')));

        addEls(clearEl(queryEl(`${root} .entity-list.binding-list`)), bindings.map(binding2el));
    }

    const profile2el = R.curry((type, name) => {
        const el = qmte(`${root} .profile-item-tmpl`);
        el.profileName = name.value;
        const btn = qee(el, '[role=button]');
        addEl(qee(el, '.primary-name'), makeText(name.displayName));
        setAttr(btn, 'profile-name', name.value);
        setAttr(btn, 'primary-name', name.displayName);
        setAttr(btn, 'profile-type', type);
        listen(btn, 'dragstart', onDragStart);
        listen(btn, 'drop', onDrop);
        listen(btn, 'dragover', allowDrop);
        listen(btn, 'dragenter', handleDragEnter);
        listen(btn, 'dragleave', handleDragLeave);
        return el;
    });

    // eslint-disable-next-line no-var,vars-on-top
    var onDragStart = function(event) {
        console.log(`onDragStart ${this.profileName}`);
        event.dataTransfer.setData('data', JSON.stringify({
            name: getAttr(this, 'profile-name'),
            type: getAttr(this, 'profile-type'),
        }));
        event.dataTransfer.effectAllowed = 'move';
    };

    // eslint-disable-next-line no-var,vars-on-top
    var onDrop = function(event) {
        removeClass(this, 'over');
        console.log(`onDrop ${this.profileName}${event.dataTransfer.getData('data')}`);
        if (event.stopPropagation) {
            event.stopPropagation(); // stops the browser from redirecting.
        }
        const thatData = JSON.parse(event.dataTransfer.getData('data'));
        if (thatData.type === getAttr(this, 'profile-type')) {
            return;
        }

        createBinding([thatData, {
            name: getAttr(this, 'profile-name'),
            type: getAttr(this, 'profile-type'),
        }]);
    };

    // eslint-disable-next-line no-var,vars-on-top
    var allowDrop = function(event) {
        console.log(`allowDrop ${this.profileName}`);
        event.preventDefault();
    };

    function handleDragEnter(event) {
        addClass(this, 'over');
    }

    function handleDragLeave(event) {
        removeClass(this, 'over');
    }

    function binding2el(binding) {
        const el = wrapEl('div', qte(`${root} .binding-item-tmpl`));
        addEl(qee(el, '.primary-name'), makeText(binding.name));
        setAttr(el, 'primary-name', binding.name);
        setAttr(qee(el, '.unlink'), 'title', l10n('unlink-binding'));
        listen(qee(el, '.unlink'), 'click', () => removeBinding(binding.value));
        return el;
    }

    // eslint-disable-next-line no-var,vars-on-top
    var filterList = sel => (event) => {
        const str = event.target.value.toLowerCase();

        const els = queryEls(`${root} ${sel} [primary-name]`);
        els.forEach((el) => {
            const isVisible = getAttr(el, 'primary-name').toLowerCase().indexOf(str) !== -1;
            showEl(el, isVisible);
        });
    };

    function createBinding(pair) {
        const characterName = pair[0].type === 'character' ? pair[0].name : pair[1].name;
        const playerName = pair[0].type === 'player' ? pair[0].name : pair[1].name;
        DBMS.createBinding(characterName, playerName, Utils.processError(exports.refresh));
    }

    function removeBinding(binding) {
        DBMS.removeBinding(binding[0], binding[1], Utils.processError(exports.refresh));
    }
})(this.ProfileBinding2 = {});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';


// Character/Player profiles already have field 'name'
// I had some choices:
// 1. remove this field at all
// 2. Add one more object to divide special values (name) and user defined values
// 3. Prohibit to make field - name
// 1. This field is used in many places
// 2. - too complex way
// 3. simple and lesser complexity, I choose this way

function ProfileConfigurerTmpl(exports, opts) {
    const { tabType } = opts;

    const tmplRoot = '.profile-configurer2-tab-tmpl';
    const tabRoot = `.profile-configurer2-tab.${`${tabType}-type`} `;
    const profilePanel = `${tabRoot}.profile-panel `;
    const l10n = L10n.get('profiles');
    const state = {};

    exports.init = () => {
        const el = queryEl(tmplRoot).cloneNode(true);

        addClasses(el, ['profile-configurer2-tab', `${`${tabType}-type`}`]);
        removeClass(el, 'profile-configurer2-tab-tmpl');
        addEl(queryEl('.tab-container'), el);

        const createProfileItemDialog = UI.createModalDialog(
            `.profile-configurer2-tab.${`${tabType}-type`}`,
            createProfileItem, {
                bodySelector: 'create-profile-item-body',
                dialogTitle: 'profiles-create-profile-item',
                actionButtonTitle: 'common-create',
                initBody: (body) => {
                    const sel = clearEl(qee(body, '.create-entity-type-select'));
                    const fillMainSel = () => { fillItemTypesSel(clearEl(sel)); };
                    fillMainSel();
                    L10n.onL10nChange(fillMainSel);
                }
            }
        );

        state.renameProfileItemDialog = UI.createModalDialog(
            `.profile-configurer2-tab.${`${tabType}-type`}`,
            renameProfileItem, {
                bodySelector: 'modal-prompt-body',
                dialogTitle: 'profiles-enter-new-profile-item-name',
                actionButtonTitle: 'common-rename',
            }
        );

        state.moveProfileItemDialog = UI.createModalDialog(
            `.profile-configurer2-tab.${`${tabType}-type`}`,
            moveProfileItem, {
                bodySelector: 'move-profile-item-body',
                dialogTitle: 'profiles-new-profile-item-position',
                actionButtonTitle: 'common-move',
            }
        );
        
        state.renameEnumItemDialog = UI.createModalDialog(
            `.profile-configurer2-tab.${`${tabType}-type`}`,
            renameEnumValue, {
                bodySelector: 'rename-enum-value-tmpl',
                dialogTitle: 'profiles-rename-enum-item',
                actionButtonTitle: 'common-rename',
                initBody: (body) => {
                    const renameSelect = clearEl(qee(body, '.renamed-value-select'));
                    const renameInput = clearEl(qee(body, '.enum-value-name-input'));
                    listen(renameSelect, 'change', () => {
                        renameInput.value = renameSelect.value;
                    });
                }
            }
        );
        
        state.enumEditorDialog = UI.createModalDialog(
            `.profile-configurer2-tab.${`${tabType}-type`}`,
            updateEnumValues, {
                bodySelector: 'enum-dialog-editor-tmpl',
                dialogTitle: 'profiles-enum-editor',
                actionButtonTitle: 'common-save',
                initBody: (body) => {
                    const addedValuesArea = qee(body, '.new-enum-values');
                    const removedValuesArea = qee(body, '.removed-enum-values');
                    const inputArea = qee(body, '.enum-value-input');
                    const defaultValueSelect = qee(body, '.default-value-select');
                    listen(inputArea, 'input', () => {
                        const newVals = inputArea.value.split(',').map(R.trim).filter(R.pipe(R.equals(''), R.not));
                        const addedValues = R.sort(CommonUtils.charOrdA, R.difference(newVals, inputArea.srcList));
                        addEls(clearEl(addedValuesArea), enumList2Els(addedValues));
                        const removedValues = R.sort(CommonUtils.charOrdA, R.difference(inputArea.srcList, newVals));
                        addEls(clearEl(removedValuesArea), enumList2Els(removedValues));
                        
                        let defaultValue = defaultValueSelect.value;
                        clearEl(defaultValueSelect);
                        
                        if(newVals.length === 0){
                            return;
                        }
                        
                        if(!R.contains(defaultValue, newVals)){
                            defaultValue = newVals[0];
                        }
                        fillSelector(defaultValueSelect, arr2Select(newVals));
                        qee(defaultValueSelect, `[value="${defaultValue}"]`).selected = true;
                    });
                }
            }
        );
        
        state.multiEnumEditorDialog = UI.createModalDialog(
            `.profile-configurer2-tab.${`${tabType}-type`}`,
            updateEnumValues, {
                bodySelector: 'multi-enum-dialog-editor-tmpl',
                dialogTitle: 'profiles-multi-enum-editor',
                actionButtonTitle: 'common-save',
                initBody: (body) => {
                    const addedValuesArea = qee(body, '.new-enum-values');
                    const removedValuesArea = qee(body, '.removed-enum-values');
                    const inputArea = qee(body, '.enum-value-input');
                    listen(inputArea, 'input', () => {
                        const newVals = inputArea.value.split(',').map(R.trim).filter(R.pipe(R.equals(''), R.not));
                        const addedValues = R.sort(CommonUtils.charOrdA, R.difference(newVals, inputArea.srcList));
                        addEls(clearEl(addedValuesArea), enumList2Els(addedValues));
                        const removedValues = R.sort(CommonUtils.charOrdA, R.difference(inputArea.srcList, newVals));
                        addEls(clearEl(removedValuesArea), enumList2Els(removedValues));
                    });
                }
            }
        );

        setAttr(qee(el, '.panel h3'), 'l10n-id', `profiles-${opts.panelName}`);
        setAttr(qee(el, '.alert'), 'l10n-id', `advices-empty-${tabType}-profile-structure`);
        L10n.localizeStatic(el);

        setAttr(qee(el, '.panel a'), 'panel-toggler', `${tabRoot}.profile-panel`);
        UI.initPanelTogglers(el);

        listen(qe(`${tabRoot}.create`), 'click', () => createProfileItemDialog.showDlg());
        exports.content = el;
    };

    exports.refresh = () => {
        refreshPanel(tabType, profilePanel);
    };

    function refreshPanel(type, root) {
        DBMS.getProfileStructure(type, (err, allProfileSettings) => {
            if (err) { Utils.handleError(err); return; }
            
            hideEl(queryEl(`${tabRoot} .alert`), allProfileSettings.length !== 0);
            hideEl(queryEl(`${tabRoot} table`), allProfileSettings.length === 0);

            const arr = allProfileSettings.map(R.compose(strFormat(getL10n('common-set-item-before')), R.append(R.__, []), R.prop('name')));
            arr.push(getL10n('common-set-item-as-last'));

            const positionSelectors = [queryEl(`${tabRoot} .create-entity-position-select`),
                queryEl(`${tabRoot} .move-entity-position-select`)];
            positionSelectors.map(clearEl).map(fillSelector(R.__, arr2Select(arr))).map(setProp(R.__, 'selectedIndex', allProfileSettings.length));

            const table = clearEl(queryEl(`${root}.profile-config-container`));

            try {
                addEls(table, allProfileSettings.map(getInput(type)));
            } catch (err1) {
                Utils.handleError(err1); return;
            }

            PermissionInformer.isAdmin((err2, isAdmin) => {
                if (err2) { Utils.handleError(err2); return; }
                Utils.enable(exports.content, 'adminOnly', isAdmin);
            });
        });
    }

    function createProfileItem(dialog) {
        return () => {
            const input = qee(dialog, '.create-entity-name-input');
            const name = input.value.trim();
            const itemType = qee(dialog, '.create-entity-type-select').value.trim();
            const { selectedIndex } = qee(dialog, '.create-entity-position-select');

            DBMS.createProfileItem(tabType, name, itemType, selectedIndex, (err) => {
                if (err) {
                    setError(dialog, err);
                } else {
                    input.value = '';
                    dialog.hideDlg();
                    exports.refresh();
                }
            });
        };
    }

    // eslint-disable-next-line no-var,vars-on-top
    var fillItemTypesSel = sel => fillSelector(sel, constArr2Select(R.keys(Constants.profileFieldTypes)));
    const fillPlayerAccessSel = sel => fillSelector(sel, constArr2Select(Constants.playerAccessTypes));

    // eslint-disable-next-line no-var,vars-on-top
    var getInput = R.curry((type, profileSettings, index) => { // throws InternalError
        const row = qte(`${tabRoot} .profile-configurer-row-tmpl`);
        L10n.localizeStatic(row);
        addEl(qee(row, '.item-position'), makeText(index + 1));
        addEl(qee(row, '.item-name'), makeText(profileSettings.name));

        const itemType = qee(row, '.item-type');
        fillItemTypesSel(itemType);
        itemType.value = profileSettings.type;
        itemType.info = profileSettings.name;
        itemType.oldType = profileSettings.type;
        listen(itemType, 'change', changeProfileItemType(type));

        let input, addDefaultListener = true;
        switch (profileSettings.type) {
        case 'text':
            input = makeEl('textarea');
            addClass(input, 'hidden');
            input.value = profileSettings.value;
            break;
        case 'enum':
            input = qmte(`${tabRoot} .enum-value-editor-tmpl`);
            const list = profileSettings.value.split(',');
            const defaultValue = list[0];
            list.sort(CommonUtils.charOrdA);
            
            addEls(qee(input, '.text'), enumList2Els(list, defaultValue));
            
            listen(qee(input, '.btn.add'), 'click', () => {
                addEls(clearEl(qee(state.enumEditorDialog, '.initial-value')), enumList2Els(list, defaultValue));
                const inputArea = qee(state.enumEditorDialog, '.enum-value-input');
                inputArea.value = list.join(',');
                inputArea.srcList = list;
                inputArea.defaultValue = defaultValue;
                
                const defaultValueSelect = clearEl(qee(state.enumEditorDialog, '.default-value-select'));
                fillSelector(defaultValueSelect, arr2Select(list));
                qee(defaultValueSelect, `[value="${defaultValue}"]`).selected = true;
                state.enumEditorDialog.itemName = profileSettings.name;
                state.enumEditorDialog.showDlg();
            });
            
            listen(qee(input, '.btn.rename'), 'click', () => {
                const renameSelect = clearEl(qee(state.renameEnumItemDialog, '.renamed-value-select'));
                fillSelector(renameSelect, arr2Select(list));
                
                if(list.length > 0){
                    qee(state.renameEnumItemDialog, '.enum-value-name-input').value = list[0]; 
                }
                
                state.renameEnumItemDialog.itemName = profileSettings.name;
                state.renameEnumItemDialog.showDlg();
            });
            
            L10n.localizeStatic(input);
            addDefaultListener = false;
            break;
        case 'multiEnum':
            input = qmte(`${tabRoot} .enum-value-editor-tmpl`);
            const list2 = profileSettings.value.split(',');
            list2.sort(CommonUtils.charOrdA);
            
            addEls(qee(input, '.text'), enumList2Els(list2));
            
            listen(qee(input, '.btn.add'), 'click', () => {
                addEls(clearEl(qee(state.multiEnumEditorDialog, '.initial-value')), enumList2Els(list2));
                const inputArea = qee(state.multiEnumEditorDialog, '.enum-value-input');
                inputArea.value = list2.join(',');
                inputArea.srcList = list2;
                state.multiEnumEditorDialog.itemName = profileSettings.name;
                state.multiEnumEditorDialog.showDlg();
            });
            
            listen(qee(input, '.btn.rename'), 'click', () => {
                const renameSelect = clearEl(qee(state.renameEnumItemDialog, '.renamed-value-select'));
                fillSelector(renameSelect, arr2Select(list2));
                
                if(list2.length > 0){
                    qee(state.renameEnumItemDialog, '.enum-value-name-input').value = list2[0]; 
                }
                
                state.renameEnumItemDialog.itemName = profileSettings.name;
                state.renameEnumItemDialog.showDlg();
            });
            
            L10n.localizeStatic(input);
            addDefaultListener = false;
            break;
        case 'string':
            input = makeEl('input');
            addClass(input, 'hidden');
            input.value = profileSettings.value;
            break;
        case 'number':
            input = makeEl('input');
            input.type = 'number';
            addClass(input, 'hidden');
            input.value = profileSettings.value;
            break;
        case 'checkbox':
            input = makeEl('input');
            setAttr(input, 'title', l10n('default-value'));
            input.type = 'checkbox';
            input.checked = profileSettings.value;
            break;
        default:
            throw new Errors.InternalError('errors-unexpected-switch-argument', [profileSettings.type]);
        }

        setProps(input, {
            info: profileSettings.name,
            infoType: profileSettings.type,
            oldValue: profileSettings.value
        });
        if(addDefaultListener){
            addClasses(input, [`profile-configurer-${profileSettings.type}`, 'adminOnly', 'form-control']);
            listen(input, 'change', updateDefaultValue(type));
        }
        addEl(qee(row, '.item-default-value-container'), input);

        setClassIf(qee(row, '.print'), 'btn-primary', profileSettings.doExport);
        listen(qee(row, '.print'), 'click', (e) => {
            DBMS.doExportProfileItemChange(type, profileSettings.name, !hasClass(e.target, 'btn-primary'), (err) => {
                if (err) { Utils.handleError(err); return; }
                toggleClass(e.target, 'btn-primary');
            });
        });

        const playerAccess = qee(row, '.player-access');
        fillPlayerAccessSel(playerAccess);
        playerAccess.value = profileSettings.playerAccess;
        playerAccess.info = profileSettings.name;
        playerAccess.oldValue = profileSettings.playerAccess;
        listen(playerAccess, 'change', changeProfileItemPlayerAccess(type));

        const showInRoleGrid = qee(row, '.show-in-role-grid');
        showInRoleGrid.checked = profileSettings.showInRoleGrid;
        showInRoleGrid.info = profileSettings.name;
        listen(showInRoleGrid, 'change', showInRoleGridChange(type));

        listen(qee(row, '.move'), 'click', () => {
            state.currentIndex = index;
            state.moveProfileItemDialog.showDlg();
        });

        listen(qee(row, '.rename-profile-item'), 'click', () => {
            qee(state.renameProfileItemDialog, '.entity-input').value = profileSettings.name;
            state.renameProfileItemDialog.fromName = profileSettings.name;
            state.renameProfileItemDialog.showDlg();
        });

        listen(qee(row, '.remove'), 'click', () => {
            Utils.confirm(L10n.format('profiles', 'are-you-sure-about-removing-profile-item', [profileSettings.name]), () => {
                DBMS.removeProfileItem(type, index, profileSettings.name, Utils.processError(exports.refresh));
            });
        });

        return row;
    });
    
    function enumList2Els(list, defaultValue){
        return R.splitEvery(4, list.map(val => {
            const span = addEl(makeEl('span'), makeText(val));
            if(defaultValue !== undefined && val === defaultValue){
                addClass(span, 'bold');
                setAttr(span, 'title', l10n('default-value'));
            }
            addClass(span, 'margin-right-16 enum-item');
            return span;
        })).map(arr => addEls(makeEl('div'), arr));
    }

    function updateDefaultValue(type) {
        return (event) => {
            const name = event.target.info;
            const itemType = event.target.infoType;
            const { oldValue } = event.target;

            const value = itemType === 'checkbox' ? event.target.checked : event.target.value;

            let newOptions, missedValues, newValue, updateEnum;

            switch (itemType) {
            case 'text':
            case 'string':
            case 'checkbox':
                DBMS.updateDefaultValue(type, name, value, Utils.processError());
                break;
            case 'number':
                if (Number.isNaN(value)) {
                    Utils.alert(getL10n('profiles-not-a-number'));
                    event.target.value = oldValue;
                    return;
                }
                DBMS.updateDefaultValue(type, name, Number(value), Utils.processError());
                break;
            case 'multiEnum':
            case 'enum':
                if (value === '' && itemType === 'enum') {
                    Utils.alert(getL10n('profiles-enum-item-cant-be-empty'));
                    event.target.value = oldValue;
                    return;
                }
                newOptions = value.split(',').map(R.trim);
                missedValues = oldValue.trim() === '' ? [] : R.difference(oldValue.split(','), newOptions);

                updateEnum = () => {
                    newValue = newOptions.join(',');
                    event.target.value = newValue;
                    event.target.oldValue = newValue;
                    DBMS.updateDefaultValue(type, name, newValue, Utils.processError());
                };

                if (missedValues.length !== 0) {
                    Utils.confirm(strFormat(getL10n('profiles-new-enum-values-remove-some-old-values'), [missedValues.join(',')]), updateEnum, () => {
                        event.target.value = oldValue;
                    });
                } else {
                    updateEnum();
                }
                break;
            default:
                Utils.handleError(new Errors.InternalError('errors-unexpected-switch-argument', [itemType]));
            }
        };
    }

    function showInRoleGridChange(type) {
        return (event) => {
            DBMS.showInRoleGridProfileItemChange(type, event.target.info, event.target.checked, Utils.processError());
        };
    }

    function renameProfileItem(dialog) {
        return () => {
            const toInput = qee(dialog, '.entity-input');
            const oldName = dialog.fromName;
            const newName = toInput.value.trim();

            DBMS.renameProfileItem(tabType, newName, oldName, (err) => {
                if (err) {
                    setError(dialog, err);
                } else {
                    toInput.value = '';
                    dialog.hideDlg();
                    exports.refresh();
                }
            });
        };
    }

    function moveProfileItem(dialog) {
        return () => {
            const index = state.currentIndex;
            const newIndex = queryEl(`${tabRoot}.move-entity-position-select`).selectedIndex;
            DBMS.moveProfileItem(tabType, index, newIndex, (err) => {
                if (err) {
                    setError(dialog, err);
                } else {
                    dialog.hideDlg();
                    exports.refresh();
                }
            });
        };
    }
    
    function updateEnumValues(dialog) {
        return () => {
            const name = dialog.itemName;
            const inputArea = qee(dialog, '.enum-value-input');
            const defaultValueSelect = qee(dialog, '.default-value-select');
            
            if (inputArea.value.trim() === '') {
                Utils.alert(getL10n('profiles-enum-item-cant-be-empty'));
                return;
            }
            let newVals = inputArea.value.split(',').map(R.trim).filter(R.pipe(R.equals(''), R.not));
            if(defaultValueSelect){
                const defaultValue = defaultValueSelect.value;
                newVals = R.without([defaultValue], newVals);
                newVals = R.prepend(defaultValue, newVals);
            }
            
            DBMS.updateDefaultValue(tabType, name, newVals.join(','), (err) => {
                if (err) {
                    setError(dialog, err);
                } else {
                    dialog.hideDlg();
                    exports.refresh();
                }
            });
        };
    }
    
    function renameEnumValue(dialog) {
        return () => {
            const name = dialog.itemName;
            const renameSelect = qee(dialog, '.renamed-value-select');
            const renameInput = qee(dialog, '.enum-value-name-input');
            
            DBMS.renameEnumValue(tabType, name, renameSelect.value.trim(), renameInput.value.trim(), (err) => {
                if (err) {
                    setError(dialog, err);
                } else {
                    dialog.hideDlg();
                    exports.refresh();
                }
            });
        };
    }

    function changeProfileItemType(type) {
        return (event) => {
            Utils.confirm(strFormat(getL10n('profiles-are-you-sure-about-changing-profile-item-type'), [event.target.info]), () => {
                const newType = event.target.value;
                const name = event.target.info;
                DBMS.changeProfileItemType(type, name, newType, Utils.processError(exports.refresh));
            }, () => {
                event.target.value = event.target.oldType;
            });
        };
    }

    function changeProfileItemPlayerAccess(type) {
        return (event) => {
            const playerAccessType = event.target.value;
            const name = event.target.info;
            DBMS.changeProfileItemPlayerAccess(type, name, playerAccessType, (err) => {
                if (err) {
                    event.target.value = event.target.oldValue;
                    Utils.processError()(err);
                }
            });
        };
    }
}

ProfileConfigurerTmpl(this.CharacterConfigurer = {}, {
    tabType: 'character',
    panelName: 'characters-profile-structure',
});

ProfileConfigurerTmpl(this.PlayerConfigurer = {}, {
    tabType: 'player',
    panelName: 'players-profile-structure',
});

/*Copyright 2018 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

function ProfileEditorTmpl(exports, opts) {
    const { firstType, secondType, settingsPath } = opts;

    const tmplRoot = '.profile-editor2-tab-tmpl';
    const root = `.profile-editor2-tab.${`${firstType}-type`} `;
    const state = {};
    const l10n = L10n.get('profiles');
    let profileEditorCore;
    const profilePanel = `${root}.profile-panel`;
    const reportByStories = `${root}.report-by-stories`;
    const reportByRelations = `${root}.report-by-relations`;
    const profileDiv = `${root}.profile-div`;
    const reportByStoriesDiv = `${root}.report-by-stories-div tbody`;
    const reportByRelationsDiv = `${root}.report-by-relations-div tbody`;
    const alertBlock = `${root}.alert-block`;

    exports.init = () => {
        profileEditorCore = ProfileEditorCore.makeProfileEditorCore();
        const el = queryEl(tmplRoot).cloneNode(true);

        addClasses(el, ['profile-editor2-tab', `${`${firstType}-type`}`]);
        removeClass(el, 'profile-editor2-tab-tmpl');
        addEl(queryEl('.tab-container'), el);

        const createCharacterDialog = UI.createModalDialog(
            `.profile-editor2-tab.${`${firstType}-type`}`,
            createProfile, {
                bodySelector: 'modal-prompt-body',
                dialogTitle: `profiles-${opts.createMsg}`,
                actionButtonTitle: 'common-create',
            }
        );
        listen(queryEl(`${root} .create`), 'click', () => createCharacterDialog.showDlg());
        state.renameCharacterDialog = UI.createModalDialog(`.${`${firstType}-type`}`, renameProfile, {
            bodySelector: 'modal-prompt-body',
            dialogTitle: `profiles-${opts.renameMsg}`,
            actionButtonTitle: 'common-rename',
        });

        hideEl(qee(el, '.report-by-stories'), firstType === 'player');
        hideEl(qee(el, '.report-by-relations'), firstType === 'player');
        setAttr(qee(el, '.entity-filter'), 'l10n-placeholder-id', `profiles-${opts.filterPlaceholder}`);
        setAttr(qee(el, '.profile-panel h3'), 'l10n-id', `profiles-${opts.panelName}`);
        setAttr(qee(el, '.create'), 'l10n-title', `profiles-${opts.createProfile}`);
        setAttr(qee(el, '.alert-block'), 'l10n-id', `advices-no-${firstType}`);
        L10n.localizeStatic(el);

        setAttr(qee(el, '.report-by-stories a'), 'panel-toggler', `${root}.report-by-stories-div`);
        setAttr(qee(el, '.report-by-relations a'), 'panel-toggler', `${root}.report-by-relations-div`);
        setAttr(qee(el, '.profile-panel a'), 'panel-toggler', `${root}.profile-div`);
        UI.initPanelTogglers(el);

        exports.content = el;
        listen(queryEl(`${root} .entity-filter`), 'input', filterOptions);
    };

    exports.refresh = () => {
        PermissionInformer.getEntityNamesArray(firstType, false, (err, primaryNames) => {
            if (err) { Utils.handleError(err); return; }
            PermissionInformer.getEntityNamesArray(secondType, false, (err2, secondaryNames) => {
                if (err2) { Utils.handleError(err2); return; }
                DBMS.getProfileBindings((err3, profileBindings) => {
                    if (err3) { Utils.handleError(err3); return; }
                    profileBindings = opts.processBindings(profileBindings);
                    Utils.enableEl(queryEl(`${root}.entity-filter`), primaryNames.length > 0);
                    rebuildInterface(primaryNames, secondaryNames, profileBindings);
                });
            });
        });
    };

    function rebuildInterface(primaryNames, secondaryNames, profileBindings) {
        const secDict = R.indexBy(R.prop('value'), secondaryNames);
        addEls(clearEl(queryEl(`${root} .entity-list`)), primaryNames.map((name, i, arr) => {
            const el = wrapEl('div', qte(`${root} .entity-item-tmpl`));
            addEl(qee(el, '.primary-name'), makeText(name.displayName));
            setAttr(el, 'primary-name', name.displayName);
            setAttr(el, 'profile-name', name.value);
            if (profileBindings[name.value] !== undefined) {
                const secondaryName = secDict[profileBindings[name.value]].displayName;
                addEl(qee(el, '.secondary-name'), makeText(secondaryName));
                setAttr(el, 'secondary-name', secondaryName);
            }
            listen(qee(el, '.select-button'), 'click', () => selectProfile(name.value));
            setAttr(qee(el, '.rename'), 'title', l10n(opts.renameProfile));
            const removeBtn = qee(el, '.remove');
            setAttr(removeBtn, 'title', l10n(opts.removeProfile));
            if(i+1 < arr.length){
                removeBtn.nextName = arr[i+1].value;
            }
            if(i > 0){
                removeBtn.prevName = arr[i-1].value;
            }
            if (name.editable) {
                listen(qee(el, '.rename'), 'click', () => {
                    qee(state.renameCharacterDialog, '.entity-input').value = name.value;
                    state.renameCharacterDialog.fromName = name.value;
                    state.renameCharacterDialog.showDlg();
                });
                listen(removeBtn, 'click', removeProfile(firstType, name.value, removeBtn));
            } else {
                setAttr(qee(el, '.rename'), 'disabled', 'disabled');
                setAttr(removeBtn, 'disabled', 'disabled');
            }
            return el;
        }));

        const callback = () => {
            selectProfile(UI.checkAndGetEntitySetting(settingsPath, primaryNames));
        };
        DBMS.getProfileStructure(firstType, (err2, allProfileSettings) => {
            if (err2) { Utils.handleError(err2); return; }
            profileEditorCore.initProfileStructure(profileDiv, firstType, allProfileSettings, callback);
        });
    }

    function selectProfile(name) {
        hideEl(queryEl(profilePanel), name === null);
        hideEl(queryEl(reportByStories), name === null || firstType === 'player');
        hideEl(queryEl(reportByRelations), name === null || firstType === 'player');
        hideEl(queryEl(alertBlock), name !== null);
        
        if(name === null){
            return;
        }
        
        UI.updateEntitySetting(settingsPath, name);
        queryEls(`${root} [profile-name] .select-button`).map(removeClass(R.__, 'btn-primary'));
        const el = queryEl(`${root} [profile-name="${name}"] .select-button`);
        addClass(el, 'btn-primary');
        
        const parentEl = el.parentElement.parentElement;
        const entityList = queryEl(`${root} .entity-list`);
        UI.scrollTo(entityList, parentEl);
        
        DBMS.getProfile(firstType, name, (err, profile) => {
            if (err) { Utils.handleError(err); return; }
            PermissionInformer.isEntityEditable(firstType, name, (err2, isProfileEditable) => {
                if (err2) { Utils.handleError(err2); return; }
                removeClass(queryEl(profileDiv), 'hidden');
                profileEditorCore.fillProfileInformation(profileDiv, firstType, profile, () => isProfileEditable);

                if (firstType === 'character') {
                    DBMS.getCharacterReport(name, (err3, characterReport) => {
                        if (err3) { Utils.handleError(err3); return; }
                        DBMS.getRelationsSummary(name, (err4, relationsSummary) => {
                            if (err4) { Utils.handleError(err4); return; }
                            
                            hideEl(queryEl(`${reportByStories} .alert`), characterReport.length !== 0);
                            hideEl(queryEl(`${reportByStories} table`), characterReport.length === 0);
                            
                            if(characterReport.length !== 0){
                                removeClass(queryEl(reportByStoriesDiv), 'hidden');
                                addEls(
                                        clearEl(queryEl(reportByStoriesDiv)),
                                        characterReport.map(CharacterReports.makeStoryReportRow)
                                );
                            }
                            
                            hideEl(queryEl(`${reportByRelations} .alert`), relationsSummary.relations.length !== 0);
                            hideEl(queryEl(`${reportByRelations} table`), relationsSummary.relations.length === 0);
                            
                            if(relationsSummary.relations.length !== 0){
                                removeClass(queryEl(reportByRelationsDiv), 'hidden');
                                relationsSummary.relations.sort(CommonUtils.charOrdAFactory(rel =>
                                        ProjectUtils.get2ndRelChar(name, rel).toLowerCase()));
                                
                                addEls(clearEl(queryEl(reportByRelationsDiv)), relationsSummary.relations
                                        .map(CharacterReports.makeRelationReportRow(name)));
                            }
                        });
                    });
                }
            });
        });
    }

    function filterOptions(event) {
        const str = event.target.value.toLowerCase();

        const els = queryEls(`${root} [primary-name]`);
        els.forEach((el) => {
            let isVisible = getAttr(el, 'primary-name').toLowerCase().indexOf(str) !== -1;
            if (!isVisible && getAttr(el, 'secondary-name') !== null) {
                isVisible = getAttr(el, 'secondary-name').toLowerCase().indexOf(str) !== -1;
            }
            hideEl(el, !isVisible);
        });

        if (queryEl(`${root} .hidden[primary-name] .select-button.btn-primary`) !== null ||
            queryEl(`${root} [primary-name] .select-button.btn-primary`) === null) {
            const els2 = queryEls(`${root} [primary-name]`).filter(R.pipe(hasClass(R.__, 'hidden'), R.not));
            selectProfile(els2.length > 0 ? getAttr(els2[0], 'profile-name') : null);
        } else {
            //            queryEl(`${root} [primary-name] .select-button.btn-primary`).scrollIntoView();
        }
    }

    function createProfile(dialog) {
        return () => {
            const input = qee(dialog, '.entity-input');
            const value = input.value.trim();

            DBMS.createProfile(firstType, value, (err) => {
                if (err) {
                    setError(dialog, err);
                } else {
                    UI.updateEntitySetting(settingsPath, value);
                    PermissionInformer.refresh((err2) => {
                        if (err2) { Utils.handleError(err2); return; }
                        input.value = '';
                        dialog.hideDlg();
                        exports.refresh();
                    });
                }
            });
        };
    }

    function renameProfile(dialog) {
        return () => {
            const toInput = qee(dialog, '.entity-input');
            const { fromName } = dialog;
            const toName = toInput.value.trim();

            DBMS.renameProfile(firstType, fromName, toName, (err) => {
                if (err) {
                    setError(dialog, err);
                } else {
                    UI.updateEntitySetting(settingsPath, toName);
                    toInput.value = '';
                    dialog.hideDlg();
                    exports.refresh();
                }
            });
        };
    }

    function removeProfile(type, name, btn) {
        return () => {
            Utils.confirm(strFormat(l10n(opts.removeMsg), [name]), () => {
                DBMS.removeProfile(type, name, (err) => {
                    if (err) { Utils.handleError(err); return; }
                    PermissionInformer.refresh((err2) => {
                        if (err2) { Utils.handleError(err2); return; }
                        if(btn.nextName !== undefined){
                            UI.updateEntitySetting(settingsPath, btn.nextName);
                        } else if(btn.prevName !== undefined) {
                            UI.updateEntitySetting(settingsPath, btn.prevName);
                        }
                        
                        exports.refresh();
                    });
                });
            });
        };
    }
}

ProfileEditorTmpl(this.CharacterEditor = {}, {
    firstType: 'character',
    secondType: 'player',
    settingsPath: 'Characters',
    processBindings: R.identity,
    createMsg: 'enter-character-name',
    renameMsg: 'enter-new-character-name',
    removeMsg: 'are-you-sure-about-character-removing',
    filterPlaceholder: 'find-character',
    panelName: 'character-profile',
    createProfile: 'create-character',
    renameProfile: 'rename-character',
    removeProfile: 'remove-character',
});

ProfileEditorTmpl(this.PlayerEditor = {}, {
    firstType: 'player',
    secondType: 'character',
    settingsPath: 'Players',
    processBindings: R.invertObj,
    createMsg: 'enter-player-name',
    renameMsg: 'enter-new-player-name',
    removeMsg: 'are-you-sure-about-player-removing',
    filterPlaceholder: 'find-player',
    panelName: 'player-profile',
    createProfile: 'create-player',
    renameProfile: 'rename-player',
    removeProfile: 'remove-player',
});

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const root = '.role-grid-tab ';
    let groupingOrder;
    let profilesData;
    let buttons;
    const l10n = L10n.get('role-grid');

    exports.init = () => {
        exports.content = queryEl(root);
    };

    exports.refresh = () => {
        DBMS.getRoleGridInfo((err, data2) => {
            if (err) { Utils.handleError(err); return; }
            groupingOrder = [];
            buttons = [];
            
            showEl(qe(`${root} .alert.no-character-profile`), data2.characterProfileStructure.length === 0);
            showEl(qe(`${root} .alert.no-characters`), data2.profileData.length === 0);
            
            showEl(qe(`${root} > .container-fluid`), data2.profileData.length !== 0 && data2.characterProfileStructure.length !== 0);

            // hack - dynamically replace checkbox with enum
            const checkboxes = data2.characterProfileStructure.filter(el => el.type === 'checkbox').map(R.prop('name'));
            data2.characterProfileStructure = data2.characterProfileStructure.map((el) => {
                if (el.type === 'checkbox') {
                    return {
                        doExport: el.doExport,
                        name: el.name,
                        playerAccess: el.playerAccess,
                        showInRoleGrid: el.showInRoleGrid,
                        type: 'enum',
                        value: [L10n.get('constant', 'yes'), L10n.get('constant', 'no')].join(','),
                    };
                }
                return el;
            });
            profilesData = data2;
            data2.profileData.forEach((el) => {
                checkboxes.forEach((name) => {
                    el.character[name] = L10n.get('constant', el.character[name] === true ? 'yes' : 'no');
                });
            });

            const sorter = CommonUtils.charOrdAFactory(a => a.toLowerCase());
            const filter = el => el.type === 'enum';
            const groupingItems = profilesData.characterProfileStructure.filter(filter).map(R.prop('name')).sort(sorter);

            addEls(clearEl(queryEl(`${root}.button-container`)), groupingItems.map((item, i) => {
                const button = addEl(makeEl('a'), makeText(item));
                button.item = item;
                setAttr(button, 'draggable', 'true');
                setAttr(button, 'role', 'button');
                setAttr(button, 'href', '#');
                setAttr(button, 'order', i + 1);
                setStyle(button, 'order', i + 1);
                addClasses(button, ['btn', 'btn-default']);
                listen(button, 'dragstart', onDragStart);
                listen(button, 'drop', onDrop);
                listen(button, 'dragover', allowDrop);
                listen(button, 'dragenter', handleDragEnter);
                listen(button, 'dragleave', handleDragLeave);
                listen(button, 'click', () => {
                    toggleClass(button, 'btn-primary');
                    drawList();
                });
                buttons.push(button);
                return button;
            }));

            drawList();
            //            drawPlainPanelList();
        });
    };

    // eslint-disable-next-line no-var,vars-on-top
    var onDragStart = function (event){
        console.log(`onDragStart ${this.item}`);
        event.dataTransfer.setData('data', JSON.stringify({ item: this.item, order: getAttr(this, 'order') }));
        event.dataTransfer.effectAllowed = 'move';
    };

    // eslint-disable-next-line no-var,vars-on-top
    var onDrop = function (event) {
        console.log(`onDrop ${this.item}${event.dataTransfer.getData('data')}`);
        if (event.stopPropagation) {
            event.stopPropagation(); // stops the browser from redirecting.
        }
        updateButtons(JSON.parse(event.dataTransfer.getData('data')), { item: this.item, order: getAttr(this, 'order') });
    };

    // eslint-disable-next-line no-var,vars-on-top
    var allowDrop = function (event) {
        console.log(`allowDrop ${this.item}`);
        event.preventDefault();
    };

    function handleDragEnter(event) {
        addClass(this, 'over');
    }

    function handleDragLeave(event) {
        removeClass(this, 'over');
    }

    // eslint-disable-next-line no-var,vars-on-top
    var updateButtons = (dragStarter, dragReceiver) => {
        const startOrder = Number(dragStarter.order) - 1;
        const receiveOrder = Number(dragReceiver.order) - 1;
        const button = buttons.splice(startOrder, 1)[0];
        buttons = R.insert(receiveOrder, button, buttons);
        buttons.forEach((button2, i) => {
            setAttr(button2, 'order', i + 1);
            setStyle(button2, 'order', i + 1);
        });
        drawList();
    };

    // eslint-disable-next-line no-var,vars-on-top
    var drawList = () => {
        groupingOrder = buttons.filter(hasClass(R.__, 'btn-primary')).map(R.prop('item'));
        drawGroupedList((groupingOrder.length > 0) ? getTreeByUserSelect() : getTreeByAlphabet());
        //        (groupingOrder.length > 0) ? drawGroupedList() : drawPlainPanelList();
    };

    // eslint-disable-next-line no-var,vars-on-top
    var getTreeByAlphabet = () =>
        //        var groups = R.groupBy((profile) => {
        //            return profile.characterName[0];
        //        }, profilesData.profileData);
        //
        //        var structures = R.toPairs(groups).map(pair => ({
        //            key: pair[0],
        //            lastKeyPart: pair[0],
        //            groups: pair[1]
        //        }));
        //
        //        structures.sort(CommonUtils.charOrdAFactory(R.prop('key')));
        //        return structures;
        [{
            key: l10n('all-characters'),
            lastKeyPart: l10n('all-characters'),
            groups: profilesData.profileData
        }];

    // eslint-disable-next-line no-var,vars-on-top
    var getTreeByUserSelect = () => {
        const groups = R.groupBy(profile => groupingOrder.map(name => profile.character[name]).join('/'), profilesData.profileData);

        const groupingItemInfo = R.indexBy(R.prop('name'), profilesData.characterProfileStructure.filter(el => R.contains(el.name, groupingOrder)));

        return [{
            key: l10n('all-characters'),
            lastKeyPart: l10n('all-characters'),
            children: makeGroupTree(groups, groupingItemInfo, 0, [])
        }];
    };

    //            var filter = el => el.type === 'enum' || el.type === 'checkbox';

    // eslint-disable-next-line no-var,vars-on-top
    var drawGroupedList = (structures) => {
        //        structures = [{
        //            "key": l10n('all-characters'),
        //            "lastKeyPart": l10n('all-characters'),
        //            "children": structures
        //        }];
        //        console.log(JSON.stringify(structures));

        structures.forEach(calcSize);

        // addEl(queryEl(root + '.group-content'), addEls(addClasses(makeEl('ul'), ['remove-ul-dots', 'zero-padding']),
        // makeGroupTree(groups, groupingItemInfo, 0, [])));
        addEl(clearEl(queryEl(`${root}.group-content`)), addEls(addClasses(
            makeEl('ul'),
            ['remove-ul-dots', 'zero-padding']
        ), R.flatten(structures.map(renderGroupStructure))));
    };

    const makeHeader = (text, characterNum, playerNum) => {
        const characterBadge = addEl(addClass(makeEl('span'), 'badge'), makeText(`${characterNum} / ${playerNum}`));
        setAttr(characterBadge, 'title', L10n.format('role-grid', 'badge-title', [characterNum, playerNum]));
        //        const playerBadge = addEl(addClass(makeEl('span'), 'badge'), makeText(playerNum));

        const h3 = addEls(addClass(makeEl('h3'), 'panel-title'), [makeText(` ${text} `), characterBadge]);
        const a = setAttr(makeEl('a'), 'href', '#/');
        setAttr(a, 'tree-panel-toggler', '');
        const heading = addEl(addClass(makeEl('div'), 'panel-heading'), addEls(a, [h3]));
        return addEl(addClasses(makeEl('div'), ['panel', 'panel-default', 'inline-panel']), heading);
        // var heading = addEl(addClass(makeEl('div'), 'panel-heading'),
        //      addEl(addClass(makeEl('h3'), 'panel-title'), makeText(text)));
        // return addEl(addClasses(makeEl('div'), ['panel', 'panel-default']), heading);
    };

    // eslint-disable-next-line no-var,vars-on-top
    var calcSize = (el) => {
        if (el.children) {
            el.children.forEach(calcSize);
            el.characterNum = R.sum(el.children.map(R.prop('characterNum')));
            el.playerNum = R.sum(el.children.map(R.prop('playerNum')));
        } else { // groups
            el.characterNum = el.groups.length;
            el.playerNum = el.groups.filter(R.pipe(R.prop('playerName'), R.isNil, R.not)).length;
        }
    };

    // eslint-disable-next-line no-var,vars-on-top
    var renderGroupStructure = (el) => {
        //        return R.flatten(structure.map(el => {
        let domChildren, header;
        if (el.children) {
            domChildren = addEls(addClass(makeEl('ul'), 'remove-ul-dots'), R.flatten(el.children.map(renderGroupStructure)));
            header = makeHeader(el.lastKeyPart, el.characterNum, el.playerNum);
            UI.attachPanelToggler(queryElEl(header, 'a'), domChildren);
            return R.concat([addEl(makeEl('li'), header)], [domChildren]);
        } // groups
        //            var panelList = makePanelList(el.groups).map(addClasses(R.__,['inline-panel']));
        const panelList = makePanelList(el.groups).map(addClasses(R.__, ['inline-panel', 'col-xs-6']));
        //            var panelList = makePanelList(el.groups).map(addClasses(R.__,['inline-panel', 'col-xs-4']));
        const row = addClass(makeEl('div'), 'row');
        const container = addEl(addClass(makeEl('div'), 'list-content-padding container-fluid'), row);
        domChildren = addEls(row, panelList);
        header = makeHeader(el.key, el.characterNum, el.playerNum);
        UI.attachPanelToggler(queryElEl(header, 'a'), container);
        return R.concat([addEl(makeEl('li'), header)], [container]);
        // var container = addClass(makeEl('div'), 'list-content-padding container-fluid');
        // domChildren = addEls(container, panelList);
        // return R.concat([addEl(makeEl('li'), makeHeader(el.key, el.characterNum, el.playerNum))], [domChildren]);


        //        }));
    };

    // eslint-disable-next-line no-var,vars-on-top
    var makeGroupTree = (groups, groupingItemInfo, index, key) => {
        const arr = groupingItemInfo[groupingOrder[index]].value.split(',').map((name) => {
            const nextKey = R.concat(key, [name]);
            //            var nextKey = R.concat(key, [groupingOrder[index] + ': ' + name]);
            const lastKeyPart = `${groupingOrder[index]}: ${name}`;
            //            var domChildren;
            if (groupingOrder.length !== index + 1) {
                const children = makeGroupTree(groups, groupingItemInfo, index + 1, nextKey);
                if (children === null) {
                    return null;
                }
                //                domChildren = [addEls(addClass(makeEl('ul'), 'remove-ul-dots'), children)];
                return {
                    key: nextKey.join(' / '),
                    lastKeyPart,
                    children
                };
            }
            const fullKey = nextKey.join('/');
            if (groups[fullKey] === undefined) {
                return null;
            }
            // domChildren = [addEls(addClass(makeEl('div'), 'list-content-padding'), makePanelList(groups[fullKey]))];
            return {
                key: nextKey.join(' / '),
                lastKeyPart,
                groups: groups[fullKey]
            };

            //            return R.concat([addEl(makeEl('li'), makeHeader(name))], domChildren);
            //            return R.concat([addEl(makeEl('li'), makeHeader(nextKey.join(' / ')))], domChildren);
            //            return {
            //                name: nextKey.join(' / '),
            //                children:
            //            }
        }).filter(el => el !== null);
        return arr.length === 0 ? null : arr;
        //        if(arr.length === 0){
        //            return null;
        //        } else {
        //            return R.flatten(arr);
        //        }
    };

    const drawPlainPanelList = () => {
        addEls(clearEl(queryEl(`${root}.group-content`)), makePanelList(profilesData.profileData));
    };

    // eslint-disable-next-line no-var,vars-on-top
    var makePanelList = profileArray =>
        profileArray.sort(CommonUtils.charOrdAFactory(a => a.characterName.toLowerCase())).map((profileData) => {
            const tables = [UI.makeProfileTable(profilesData.characterProfileStructure, profileData.character)];
            let title = profileData.characterName;
            if (profileData.playerName !== undefined) {
                tables.push(UI.makeProfileTable(profilesData.playerProfileStructure, profileData.player));
                title += `/${profileData.playerName}`;
            }

            const panelInfo = UI.makePanelCore(makeText(title), addEls(makeEl('div'), tables));
            UI.attachPanelToggler(panelInfo.a, panelInfo.contentDiv, (event, togglePanel) => {
                queryEls(`${root}.group-content .expanded[panel-toggler]`).filter(el =>
                    !el.contains(event.target)).forEach(el => el.click());
                togglePanel();
            });
            panelInfo.a.click();

            return panelInfo.panel;
        });
})(this.RoleGrid = {});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */


'use strict';

((exports) => {
    const root = '.enter-tab ';

    exports.init = () => {
        $(document.forms['login-form']).on('submit', submit);
        exports.content = queryEl(root);
    };

    exports.refresh = () => {

    };

    function submit() {
        const form = $(this);

        $('.error', form).html('');
        //        $(":submit", form).button("loading");

        const request = $.ajax({
            url: '/login',
            method: 'POST',
            data: form.serialize(),
            complete() {
                $(':submit', form).button('reset');
            },
            //             statusCode : {
            //                 200 : function() {
            //                 },
            //                 403 : function(jqXHR) {
            //                     var error = JSON.parse(jqXHR.responseText);
            //                     $('.error', form).html(error.message);
            //                 }
            //             }
        });
        request.done((data) => {
            //             //window.location.href = "/chat";
            //             window.location.href = "/nims.html";
            window.location.href = '/page.html';
        });

        request.fail((errorInfo, textStatus, errorThrown) => {
            let msg;
            try {
                msg = Utils.handleErrorMsg(JSON.parse(errorInfo.responseText));
            } catch (err) {
                msg = Utils.handleErrorMsg(errorInfo.responseText || textStatus || 'error');
            }
            //             var error = JSON.parse(jqXHR.responseText);
            //             $('.error', form).html(error.message);
            //            $('.error', form).html(textStatus);
            $('.error', form).html(msg);
        });

        return false;
    }
})(this.Enter = {});

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const root = '.player-tab ';
    const characterProfileDiv = `${root}.character-profile-div`;
    const playerProfileDiv = `${root}.player-profile-div`;
    const playerHeader = `${root}.player-profile-header`;
    const characterHeader = `${root}.character-profile-header`;

    let profileEditorCore;

    exports.init = () => {
        profileEditorCore = ProfileEditorCore.makeProfileEditorCore();
        exports.content = queryEl(root);
    };

    exports.refresh = () => {
        DBMS.getWelcomeText((err, text) => {
            if (err) { Utils.handleError(err); return; }
            DBMS.getPlayerProfileInfo((err2, profileInfo) => {
                if (err2) { Utils.handleError(err2); return; }
                DBMS.getPlayersOptions((err3, playersOptions) => {
                    if (err3) { Utils.handleError(err3); return; }
                    buildInterface(text, profileInfo, playersOptions);
                });
            });
        });
    };

    function isEditable(profileName, profileStructure) {
        return R.find(R.propEq('name', profileName), profileStructure).playerAccess === 'write';
    }

    function buildInterface(text, profileInfo, playersOptions) {
        profileEditorCore.initProfileStructure(playerProfileDiv, 'player', profileInfo.player.profileStructure);
        profileEditorCore.fillProfileInformation(playerProfileDiv, 'player', profileInfo.player.profile, isEditable);
        addEl(clearEl(queryEl(playerHeader)), makeText(strFormat(getL10n('briefings-player-profile'), [profileInfo.player.profile.name])));

        if (profileInfo.character === undefined) {
            addEl(clearEl(queryEl(characterHeader)), makeText(strFormat(getL10n('briefings-character-profile'), [''])));
            const el = clearEl(queryEl(characterProfileDiv));
            if (playersOptions.allowCharacterCreation) {
                const label = addEl(makeEl('div'), makeText(getL10n('profiles-player-has-no-character-and-can-create-it')));
                addClass(label, 'margin-bottom-8');
                const input = setAttr(makeEl('input'), 'placeholder', getL10n('profiles-character-name'));
                addClass(input, 'form-control margin-bottom-8');
                const button = addEl(makeEl('button'), makeText(getL10n('common-create')));
                addClass(button, 'btn btn-default');
                listen(button, 'click', () => {
                    DBMS.createCharacterByPlayer(input.value.trim(), Utils.processError(exports.refresh));
                });
                addEls(el, [label, input, button]);
            } else {
                addEl(el, addEl(makeEl('span'), makeText(getL10n('profiles-player-has-no-character-and-cant-create-it'))));
            }
        } else {
            profileEditorCore.initProfileStructure(characterProfileDiv, 'character', profileInfo.character.profileStructure);
            profileEditorCore.fillProfileInformation(characterProfileDiv, 'character', profileInfo.character.profile, isEditable);
            addEl(clearEl(queryEl(characterHeader)), makeText(strFormat(getL10n('briefings-character-profile'), [profileInfo.character.profile.name])));
        }

        queryEl(`${root}.welcome-text-area`).value = text;
    }
})(this.Player = {});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */


'use strict';

((exports) => {
    const root = '.sign-up-tab ';

    exports.init = () => {
        $(document.forms['sign-up-form']).on('submit', submit);
        exports.content = queryEl(root);
    };

    exports.refresh = () => {
    };

    function submit() {
        const form = $(this);

        $('.error', form).html('');
        $(':submit', form).button('loading');

        const request = $.ajax({
            url: '/signUp',
            method: 'POST',
            data: form.serialize(),
            complete() {
                $(':submit', form).button('reset');
            },
        });
        request.done((data) => {
            form.html(getL10n('entrance-sign-up-success')).addClass('alert-success');
        });

        request.fail((errorInfo, textStatus, errorThrown) => {
            let msg;
            try {
                msg = Utils.handleErrorMsg(JSON.parse(errorInfo.responseText));
            } catch (err) {
                msg = Utils.handleErrorMsg(errorInfo.responseText || textStatus || 'error');
            }
            $('.error', form).html(msg);
        });

        return false;
    }
})(this.SignUp = {});

/*Copyright 2018 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const root = '.sliders-tab ';
    const state = {};
    state.sliders = [];
    
    exports.init = () => {
        const createSliderDialog = UI.createModalDialog(root, createSlider, {
            bodySelector: 'create-slider-body',
            dialogTitle: 'sliders-create-slider',
            actionButtonTitle: 'common-create',
        });
        
        state.editSliderDialog = UI.createModalDialog(root, editSlider, {
            bodySelector: 'create-slider-body',
            dialogTitle: 'sliders-edit-slider',
            actionButtonTitle: 'common-save',
        });
        
        state.moveSliderDialog = UI.createModalDialog(root, moveSlider, {
            bodySelector: 'move-slider-body',
            dialogTitle: 'sliders-move-slider',
            actionButtonTitle: 'common-move',
        });
        
        listen(qe(`${root} .create`), 'click', () => createSliderDialog.showDlg());
        
        exports.content = queryEl(root);
    };

    exports.refresh = () => {
        DBMS.getSliderDataPm().then(createSliders).catch(Utils.handleError);
    };
    
    function createSliders(model) {
        const positions = model.map( info => {return {name: strFormat(L10n.get('common', 'set-item-before'), [info.name])}});
        positions.push({name: L10n.get('common', 'set-item-as-last')});
        fillSelector(clearEl(qe(`${root} .move-slider-pos-select`)), positions);
        
        addEls(clearEl(queryEl('.mixer-panel .panel-body')), model.map( makeSliderBackbone )) ;
        
        clearEls(state.sliders);
        
        state.sliders = model.map( (sl, i) => {
            const slider = new Slider('.mixer-panel .panel-body input[pos="' + i + '"]', {
                max: 10,
                min: -10,
                orientation: 'vertical',
                reversed: true,
                tooltip: 'always',
                value: sl.value,
                formatter: function(value) {
                    return Math.abs(value);
                },
            });
            slider.on('change', (event) => {
                DBMS.updateSliderValuePm(i, event.newValue).catch(Utils.handleError);
            });
            return slider;
        });
    }
    
    var makeSliderBackbone = (sl, i) => {
        const el = qmte(`${root} .slider-container-tmpl`);
        setAttr(qee(el, 'input'), 'pos', i);
        addEl(qee(el, '.slider-name'), makeText(sl.name));
        addEl(qee(el, '.slider-top'), makeText(sl.top));
        addEl(qee(el, '.slider-bottom'), makeText(sl.bottom));
        
        listen(qee(el, 'button.move'), 'click', () => {
            state.moveSliderDialog.currentIndex = i;
            state.moveSliderDialog.showDlg();
        });
        listen(qee(el, 'button.rename'), 'click', () => {
            qee(state.editSliderDialog, '.slider-name').value = sl.name;
            qee(state.editSliderDialog, '.slider-top').value = sl.top;
            qee(state.editSliderDialog, '.slider-bottom').value = sl.bottom;
            state.editSliderDialog.pos = i;
            state.editSliderDialog.showDlg();
        });
        listen(qee(el, 'button.remove'), 'click', () => {
            Utils.confirm(L10n.format('sliders', 'are-you-sure-about-removing-slider', [sl.name]), () => {
                DBMS.removeSlider(i, Utils.processError(exports.refresh));
            })
        });
        L10n.localizeStatic(el);
        return el;
    };
    
    function createSlider(dialog) {
        return () => {
            const name = qee(dialog, '.slider-name').value.trim();
            const top = qee(dialog, '.slider-top').value.trim();
            const bottom = qee(dialog, '.slider-bottom').value.trim();
            DBMS.createSlider(name, top, bottom, (err) => {
                if (err) {
                    setError(dialog, err);
                } else {
                    qee(dialog, '.slider-name').value = '';
                    qee(dialog, '.slider-top').value = '';
                    qee(dialog, '.slider-bottom').value = '';
                    dialog.hideDlg();
                    exports.refresh();
                }
            });
        };
    }
    
    function editSlider(dialog) {
        return () => {
            const name = qee(dialog, '.slider-name').value.trim();
            const top = qee(dialog, '.slider-top').value.trim();
            const bottom = qee(dialog, '.slider-bottom').value.trim();
            const pos = dialog.pos;
            DBMS.updateSliderNaming(pos, name, top, bottom, (err) => {
                if (err) {
                    setError(dialog, err);
                } else {
                    qee(dialog, '.slider-name').value = '';
                    qee(dialog, '.slider-top').value = '';
                    qee(dialog, '.slider-bottom').value = '';
                    dialog.hideDlg();
                    exports.refresh();
                }
            });
        }
    }
    
    function moveSlider(dialog) {
        return () => {
            var index = dialog.currentIndex;
            var pos = qee(dialog, '.move-slider-pos-select').selectedIndex;
            
            DBMS.moveSlider(index, pos, (err) => {
                if (err) {
                    setError(dialog, err);
                } else {
                    dialog.hideDlg();
                    exports.refresh();
                }
            })
        }
    }
})(this.Sliders = {});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS, Stories
 */

'use strict';

((exports) => {
    const state = {};
    exports.name = 'EventPresence';
    const root = '#eventPresenceDiv ';

    exports.init = () => {
        listen(getEl('eventPresenceSelector'), 'change', UI.showSelectedEls3(root, 'dependent', 'dependent-index'));
        exports.content = queryEl(root);
    };

    exports.refresh = () => {
        const tableHead = getEl('eventPresenceTableHead');
        const table = getEl('eventPresenceTable');
        const characterSelector = getEl('eventPresenceSelector');

        if (Stories.getCurrentStoryName() === undefined) {
            clearEl(tableHead);
            clearEl(table);
            clearEl(characterSelector);
            return;
        }

        PermissionInformer.isEntityEditable('story', Stories.getCurrentStoryName(), (err, isStoryEditable) => {
            if (err) { Utils.handleError(err); return; }
            PermissionInformer.getEntityNamesArray('character', false, (err2, allCharacters) => {
                if (err2) { Utils.handleError(err2); return; }
                DBMS.getStoryCharacterNamesArray(Stories.getCurrentStoryName(), (err3, characterArray) => {
                    if (err3) { Utils.handleError(err3); return; }
                    const map = {};
                    allCharacters.forEach((elem) => {
                        map[elem.value] = elem;
                    });
                    const dataArray = characterArray.map(elem => map[elem]);

                    dataArray.sort(Utils.charOrdAObject);

                    const displayArray = dataArray.map(elem => elem.displayName);
                    characterArray = dataArray.map(elem => elem.value);

                    DBMS.getStoryEvents(Stories.getCurrentStoryName(), (err4, events) => {
                        if (err4) { Utils.handleError(err4); return; }

                        clearEl(tableHead);
                        clearEl(table);
                        
                        showEl(queryEl(`${root} .alert.no-characters`), characterArray.length === 0);
                        showEl(queryEl(`${root} .alert.no-events`), events.length === 0);
                        showEl(queryEl(`${root} .panel-body`), events.length !== 0 && characterArray.length !== 0);
                        
                        UI.fillShowItemSelector(
                            clearEl(characterSelector),
                            displayArray.map(name => ({ name, hidden: false }))
                        );

                        appendTableHeader(tableHead, displayArray);
                        events.forEach((event, i) => {
                            appendTableInput(table, event, i, characterArray);
                            Utils.enable(exports.content, 'isStoryEditable', isStoryEditable);
                        });
                    });
                });
            });
        });
    };

    function appendTableHeader(table, characterArray) {
        const eventName = addEl(makeEl('th'), makeText(getL10n('stories-event')));
        const els = characterArray.map((characterName, i) => {
            const th = addEl(makeEl('th'), makeText(characterName));
            addClass(th, `dependent`);
            setAttr(th, 'dependent-index', i);
            return th;
        });
        addEl(table, addEls(makeEl('tr'), R.concat([eventName], els)));
    }

    function appendTableInput(table, event, i, characterArray) {
        const tr = makeEl('tr');
        let td = makeEl('td');
        td.appendChild(makeText(event.name));
        tr.appendChild(td);

        addEls(tr, characterArray.map((character, j) => {
            const td = qmte(`${root} .event-presence-cell`);
            addClass(td, `dependent`);
            setAttr(td, 'dependent-index', j);
            const input = qee(td, 'input');
            const label = qee(td, 'label');
            if (event.characters[character]) {
                input.checked = true;
            }
            input.eventIndex = i;
            input.eventName = event.name;
            input.characterName = character;
            input.hasText = event.characters[character] !== undefined && event.characters[character].text !== '';
            input.addEventListener('change', onChangeCharacterCheckbox);
            
            const span = qee(td, 'span');
            if(event.characters[character] !== undefined){
                if(event.characters[character].ready){
                    addClass(span, 'finished');
                    setAttr(span, 'title', L10n.get('adaptations', 'adaptation-finished'));
                } else if(input.hasText) {
                    addClass(span, 'in-progress');
                    setAttr(span, 'title', L10n.get('adaptations', 'adaptation-in-progress'));
                }
            }
            
            const id = i + character;
            setAttr(input, 'id', id);
            setAttr(label, 'for', id);
            return td;
        }));

        table.appendChild(tr);
    }

    function onChangeCharacterCheckbox(event) {
        if (event.target.checked) {
            DBMS.addCharacterToEvent(
                Stories.getCurrentStoryName(),
                event.target.eventIndex, event.target.characterName, Utils.processError()
            );
        } else if (!event.target.hasText) {
            DBMS.removeCharacterFromEvent(
                Stories.getCurrentStoryName(),
                event.target.eventIndex, event.target.characterName, Utils.processError()
            );
        } else {
            Utils.confirm(strFormat(
                getL10n('stories-remove-character-from-event-warning'),
                [event.target.characterName, event.target.eventName]
            ), () => {
                DBMS.removeCharacterFromEvent(
                    Stories.getCurrentStoryName(),
                    event.target.eventIndex, event.target.characterName, Utils.processError()
                );
            }, () => {
                event.target.checked = true;
            });
        }
    }
})(this.EventPresence = {});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS, StoryEvents, StoryCharacters, EventPresence
 */

'use strict';

((exports) => {
    const state = {};
    const root = '.stories-tab ';

    exports.init = () => {
        const createStoryDialog = UI.createModalDialog(root, createStory, {
            bodySelector: 'modal-prompt-body',
            dialogTitle: 'stories-enter-story-name',
            actionButtonTitle: 'common-create',
        });

        const renameStoryDialog = UI.createModalDialog(root, renameStory, {
            bodySelector: 'modal-prompt-body',
            dialogTitle: 'stories-enter-new-story-name',
            actionButtonTitle: 'common-rename',
        });

        state.left = { views: {} };
        state.right = { views: {} };
        let containers = {
            root: state.left,
            navigation: queryEl('.stories-navigation-container .left-side'),
            content: queryEl('.stories-content-container .left-side')
        };
        Utils.addView(containers, 'writer-story', WriterStory, { mainPage: true, toggle: true });
        Utils.addView(containers, 'story-events', StoryEvents, { toggle: true });
        Utils.addView(containers, 'story-characters', StoryCharacters, { toggle: true });
        Utils.addView(containers, 'event-presence', EventPresence, { toggle: true });
        containers = {
            root: state.right,
            navigation: queryEl('.stories-navigation-container .right-side'),
            content: queryEl('.stories-content-container .right-side')
        };
        Utils.addView(containers, 'writer-story', WriterStory, { toggle: true });
        Utils.addView(containers, 'story-events', StoryEvents, { mainPage: true, toggle: true });
        Utils.addView(containers, 'story-characters', StoryCharacters, { toggle: true });
        Utils.addView(containers, 'event-presence', EventPresence, { toggle: true });

        listen(queryEl(`${root}.remove.story`), 'click', removeStory);

        listen(qe(`${root}.create.story`), 'click', () => createStoryDialog.showDlg());
        listen(qe(`${root}.rename.story`), 'click', () => {
            qee(renameStoryDialog, '.entity-input').value = queryEl(`${root}#storySelector`).value.trim();
            renameStoryDialog.showDlg();
        });

        listen(qe(`${root}.create.event`), 'click', () => StoryEvents.createEventDialog.showDlg());
        listen(qe(`${root}.add.character`), 'click', () => StoryCharacters.addCharacterDialog.showDlg());

        $('#storySelector').select2().on('change', onStorySelectorChangeDelegate);

        exports.content = queryEl(root);
    };

    exports.chainRefresh = () => {
        if ((state.left.currentView && state.left.currentView.name === 'EventPresence') ||
            (state.right.currentView && state.right.currentView.name === 'EventPresence')) {
            EventPresence.refresh();
        }
    };

    exports.refresh = () => {
        const storySelector = clearEl(getEl('storySelector'));

        PermissionInformer.getEntityNamesArray('story', false, (err, allStoryNames) => {
            if (err) { Utils.handleError(err); return; }
            const data = getSelect2Data(allStoryNames);
            
            Utils.enableEl(qe(`${root}.rename.story`), allStoryNames.length > 0);
            Utils.enableEl(qe(`${root}.remove.story`), allStoryNames.length > 0);
            Utils.enableEl(qe(`${root}.create.event`), allStoryNames.length > 0);
            Utils.enableEl(qe(`${root}.add.character`), allStoryNames.length > 0);
            Utils.enableEl(qe(`${root}#storySelector`), allStoryNames.length > 0);
            
            showEl(qe(`${root}.alert`), allStoryNames.length === 0);
            showEl(qe(`${root}.stories-main-container`), allStoryNames.length !== 0);
            
            if (allStoryNames.length > 0) {
                const storyName = getSelectedStoryName(allStoryNames);
                $('#storySelector').select2(data).val(storyName).trigger('change');
                onStorySelectorChange(storyName);
            } else {
                $('#storySelector').select2(data);
                onStorySelectorChange();
            }

            R.values(state.left.views).forEach(view => view.refresh());
            if (state.left.currentView)state.left.currentView.refresh();
            if (state.right.currentView)state.right.currentView.refresh();
        });
    };

    function getSelectedStoryName(storyNames) {
        const settings = DBMS.getSettings();
        if (!settings.Stories) {
            settings.Stories = {
                storyName: storyNames[0].value
            };
        }
        let { storyName } = settings.Stories;
        if (storyNames.map(nameInfo => nameInfo.value).indexOf(storyName) === -1) {
            settings.Stories.storyName = storyNames[0].value;
            storyName = storyNames[0].value;
        }
        return storyName;
    }

    function createStory(dialog) {
        return () => {
            const input = qee(dialog, '.entity-input');
            const storyName = input.value.trim();

            DBMS.createStory(storyName, (err) => {
                if (err) {
                    setError(dialog, err);
                } else {
                    updateSettings(storyName);
                    PermissionInformer.refresh((err2) => {
                        if (err2) { Utils.handleError(err2); return; }
                        input.value = '';
                        dialog.hideDlg();
                        exports.refresh();
                    });
                }
            });
        };
    }

    function renameStory(dialog) {
        return () => {
            const toInput = qee(dialog, '.entity-input');
            const fromName = queryEl(`${root}#storySelector`).value.trim();
            const toName = toInput.value.trim();

            DBMS.renameStory(fromName, toName, (err) => {
                if (err) {
                    setError(dialog, err);
                } else {
                    updateSettings(toName);
                    PermissionInformer.refresh((err2) => {
                        if (err2) { Utils.handleError(err2); return; }
                        toInput.value = '';
                        dialog.hideDlg();
                        exports.refresh();
                    });
                }
            });
        };
    }

    function removeStory() {
        const name = queryEl(`${root}#storySelector`).value.trim();

        Utils.confirm(strFormat(getL10n('stories-are-you-sure-about-story-removing'), [name]), () => {
            DBMS.removeStory(name, (err) => {
                if (err) { Utils.handleError(err); return; }
                PermissionInformer.refresh((err2) => {
                    if (err2) { Utils.handleError(err2); return; }
                    exports.refresh();
                });
            });
        });
    }

    function onStorySelectorChangeDelegate(event) {
        const storyName = event.target.value;
        onStorySelectorChange(storyName);
    }

    function onStorySelectorChange(storyName) {
        state.CurrentStoryName = storyName;

        if (storyName) {
            updateSettings(storyName);
            PermissionInformer.isEntityEditable('story', storyName, (err, isStoryEditable) => {
                if (err) { Utils.handleError(err); return; }
                if (state.left.currentView)state.left.currentView.refresh();
                if (state.right.currentView)state.right.currentView.refresh();
                Utils.enable(exports.content, 'isStoryEditable', isStoryEditable);
            });
        } else { // when there are no stories at all
            updateSettings(null);
            if (state.left.currentView)state.left.currentView.refresh();
            if (state.right.currentView)state.right.currentView.refresh();
        }
    }

    exports.getCurrentStoryName = () => state.CurrentStoryName;

    function updateSettings(storyName) {
        const settings = DBMS.getSettings();
        settings.Stories.storyName = storyName;
    }
})(this.Stories = {});

/*Copyright 2015-2018 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const state = {};
    const root = '.story-characters-tab ';
    const superRoot = '.stories-tab ';
    let initialized = false;

    exports.init = () => {
        if (initialized) return;
        exports.addCharacterDialog = UI.createModalDialog(superRoot, addCharacter, {
            bodySelector: 'modal-add-character-body',
            dialogTitle: 'stories-add-character-title',
            actionButtonTitle: 'common-add',
        });

        state.switchCharacterDialog = UI.createModalDialog(root, switchCharacters, {
            bodySelector: 'modal-switch-event-body',
            dialogTitle: 'stories-switch-character-title',
            actionButtonTitle: 'common-replace',
        });

        exports.content = queryEl(root);
        initialized = true;
    };

    exports.refresh = () => {
        clearEl(queryEl(`${superRoot}.storyCharactersAddSelector`));
        clearEl(queryEl(`${root}.storyCharactersToSelector`));

        clearEl(queryEl(`${root}.storyCharactersTable`));

        if (!Stories.getCurrentStoryName()) { return; }

        PermissionInformer.isEntityEditable('story', Stories.getCurrentStoryName(), (err, isStoryEditable) => {
            if (err) { Utils.handleError(err); return; }
            PermissionInformer.getEntityNamesArray('character', false, (err2, allCharacters) => {
                if (err2) { Utils.handleError(err2); return; }
                DBMS.getStoryCharacters(Stories.getCurrentStoryName(), (err3, localCharacters) => {
                    if (err3) { Utils.handleError(err3); return; }
                    rebuildInterface(allCharacters, localCharacters);
                    Utils.enable(exports.content, 'isStoryEditable', isStoryEditable);
                    Stories.chainRefresh();
                });
            });
        });
    };

    function rebuildInterface(allCharacters, localCharacters) {
        const addArray = [];
        const removeArray = [];

        allCharacters.filter(nameInfo => !localCharacters[nameInfo.value]).forEach((nameInfo) => {
            addArray.push(nameInfo);
        });

        allCharacters.filter(nameInfo => localCharacters[nameInfo.value]).forEach((nameInfo) => {
            removeArray.push(nameInfo);
        });

        addArray.sort(Utils.charOrdAObject);
        removeArray.sort(Utils.charOrdAObject);

        const addData = getSelect2Data(addArray);
        const removeData = getSelect2Data(removeArray);

        $(queryEl(`${superRoot}.storyCharactersAddSelector`)).select2({
            data: addData.data,
            dropdownParent: $(exports.addCharacterDialog)
        });
        $(queryEl(`${root}.storyCharactersToSelector`)).select2({
            data: addData.data,
            dropdownParent: $(state.switchCharacterDialog)
        });

        const table = clearEl(queryEl(`${root}.storyCharactersTable`));
        
        showEl(qe(`${root} table`), R.keys(localCharacters).length !== 0 );
        showEl(qe(`${root} .alert`), R.keys(localCharacters).length === 0 );
        
        removeArray.forEach((removeValue) => {
            addEl(table, getCharacterInput(removeValue, localCharacters[removeValue.value]));
        });
    }

    function addCharacter(dialog) {
        return () => {
            const characterName = queryEl(`${superRoot}.storyCharactersAddSelector`).value.trim();
            DBMS.addStoryCharacter(Stories.getCurrentStoryName(), characterName, (err) => {
                if (err) {
                    setError(dialog, err);
                } else {
                    dialog.hideDlg();
                    exports.refresh();
                }
            });
        };
    }

    function switchCharacters(dialog) {
        return () => {
            const toName = queryEl(`${root}.storyCharactersToSelector`).value.trim();
            DBMS.switchStoryCharacters(Stories.getCurrentStoryName(), dialog.characterName, toName, (err) => {
                if (err) {
                    setError(dialog, err);
                } else {
                    dialog.hideDlg();
                    exports.refresh();
                }
            });
        };
    }

    function removeCharacter(characterName) {
        return () => {
            Utils.confirm(strFormat(getL10n('stories-remove-character-from-story-warning'), [characterName]), () => {
                DBMS.removeStoryCharacter(
                    Stories.getCurrentStoryName(),
                    characterName, Utils.processError(exports.refresh)
                );
            });
        };
    }

    function getCharacterInput(characterMeta, character) {
        const el = wrapEl('tr', qte(`${root} .story-character-row-tmpl`));
        L10n.localizeStatic(el);
        const qe = qee(el);

        addEl(qe('.character-name'), makeText(characterMeta.displayName));

        let input = qe('.inventoryInput');
        input.value = character.inventory;
        input.characterName = character.name;
        listen(input, 'change', updateCharacterInventory);

        Constants.characterActivityTypes.forEach((activityType) => {
            input = qe(`.${activityType} input`);
            if (character.activity[activityType]) {
                input.checked = true;
            }
            input.characterName = character.name;
            input.activityType = activityType;
            listen(input, 'change', onChangeCharacterActivity);
            setAttr(input, 'id', character.name + activityType);
            setAttr(qe(`.${activityType} label`), 'for', character.name + activityType);
        });

        listen(qe('.replace.character'), 'click', () => {
            state.switchCharacterDialog.characterName = character.name;
            state.switchCharacterDialog.showDlg();
        });
        listen(qe('.remove.character'), 'click', removeCharacter(character.name));
        return el;
    }

    function updateCharacterInventory(event) {
        DBMS.updateCharacterInventory(
            Stories.getCurrentStoryName(),
            event.target.characterName, event.target.value, Utils.processError()
        );
    }

    function onChangeCharacterActivity(event) {
        DBMS.onChangeCharacterActivity(
            Stories.getCurrentStoryName(), event.target.characterName,
            event.target.activityType, event.target.checked, Utils.processError()
        );
    }
})(this.StoryCharacters = {});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const state = {};
    const root = '.story-events-tab ';
    let initialized = false;

    exports.init = () => {
        if (initialized) return;
        exports.createEventDialog = UI.createModalDialog('.stories-tab ', createEvent, {
            bodySelector: 'create-event-body',
            dialogTitle: 'stories-event-creation',
            actionButtonTitle: 'common-create',
        });

        //        listen(qe(`${root}.create.event`), 'click', () => createEventDialog.showDlg());

        state.moveEventDialog = UI.createModalDialog(root, moveEvent, {
            bodySelector: 'move-event-body',
            dialogTitle: 'stories-move-event',
            actionButtonTitle: 'common-move',
        });
        exports.content = qe(root);
        initialized = true;
    };

    exports.refresh = () => {
        clearInterface();
        if (Stories.getCurrentStoryName() === undefined) {
            return;
        }

        PermissionInformer.isEntityEditable('story', Stories.getCurrentStoryName(), (err, isStoryEditable) => {
            if (err) { Utils.handleError(err); return; }
            DBMS.getMetaInfo((err2, metaInfo) => {
                if (err2) { Utils.handleError(err2); return; }
                DBMS.getStoryEvents(Stories.getCurrentStoryName(), (err3, events) => {
                    if (err3) { Utils.handleError(err3); return; }
                    rebuildInterface(events, metaInfo);
                    Utils.enable(exports.content, 'isStoryEditable', isStoryEditable);
                    Stories.chainRefresh();
                });
            });
        });
    };

    function clearInterface() {
        clearEl(getEl('eventBlock'));
        const positionSelectors = nl2array(document.querySelectorAll('.eventPositionSelector'));
        R.ap([clearEl], positionSelectors);
        const selectorArr = nl2array(document.querySelectorAll('.eventEditSelector'));
        R.ap([clearEl], selectorArr);
    }

    function rebuildInterface(events, metaInfo) {
        // event part
        const table = clearEl(getEl('eventBlock'));
        
        showEl(table, events.length !== 0 );
        showEl(qe(`${root} .alert`), events.length === 0 );

        // refresh position selector
        const addOpt = R.curry((sel, text) => {
            addEl(sel, addEl(makeEl('option'), makeText(text)));
        });

        let option, addOptLoc;
        const positionSelectors = nl2array(document.querySelectorAll('.eventPositionSelector'));
        R.ap([clearEl], positionSelectors);
        positionSelectors.forEach((positionSelector) => {
            addOptLoc = addOpt(positionSelector);

            events.forEach((event) => {
                addOptLoc(strFormat(getL10n('common-set-item-before'), [event.name]));
            });

            addOptLoc(getL10n('common-set-item-as-last'));

            positionSelector.selectedIndex = events.length;
        });

        state.eventsLength = events.length;

        R.ap([addEl(table)], events.map((event, i, events2) =>
            appendEventInput(event, i, events2, metaInfo.date, metaInfo.preGameDate)));

        // refresh swap selector
        const selectorArr = nl2array(document.querySelectorAll('.eventEditSelector'));
        R.ap([clearEl], selectorArr);

        events.forEach((event, i) => {
            selectorArr.forEach((selector) => {
                option = makeEl('option');
                option.appendChild(makeText(event.name));
                option.eventIndex = i;
                selector.appendChild(option);
            });
        });
    }

    function createEvent(dialog) {
        return () => {
            const eventNameInput = qee(dialog, '.eventNameInput');
            const eventName = eventNameInput.value.trim();
            const positionSelector = qee(dialog, '.positionSelector');

            DBMS.createEvent(
                Stories.getCurrentStoryName(), eventName, positionSelector.selectedIndex,
                (err) => {
                    if (err) {
                        setError(dialog, err);
                    } else {
                        eventNameInput.value = '';
                        dialog.hideDlg();
                        exports.refresh();
                    }
                }
            );
        };
    }

    function appendEventInput(event, index, events, date, preGameDate) {
        const el = wrapEl('tr', qte(`${root} .event-tmpl`));
        L10n.localizeStatic(el);
        const qe = qee(el);
        addEl(qe('.event-number'), makeText(index + 1));
        const nameInput = qe('.event-name-input');
        nameInput.value = event.name;
        nameInput.eventIndex = index;
        listen(nameInput, 'change', updateEventName);

        const textInput = qe('.event-text');
        textInput.value = event.text;
        textInput.eventIndex = index;
        listen(textInput, 'change', updateEventText);

        UI.makeEventTimePicker2(qe('.event-time'), {
            eventTime: event.time,
            index,
            preGameDate,
            date,
            onChangeDateTimeCreator
        });

        listen(qee(el, '.move'), 'click', () => {
            state.moveEventDialog.index = index;
            state.moveEventDialog.showDlg();
        });

        listen(qee(el, '.clone'), 'click', cloneEvent(index));
        if (state.eventsLength === index + 1) {
            setAttr(qee(el, '.merge'), 'disabled', 'disabled');
        } else {
            listen(qee(el, '.merge'), 'click', mergeEvents(index, event.name, events[index + 1].name));
        }
        listen(qee(el, '.remove'), 'click', removeEvent(event.name, index));

        return el;
    }

    function moveEvent(dialog) {
        return () => {
            const newIndex = queryEl('.movePositionSelector').selectedIndex;

            Utils.processError(exports.refresh);
            DBMS.moveEvent(Stories.getCurrentStoryName(), dialog.index, newIndex, (err) => {
                if (err) {
                    setError(dialog, err);
                } else {
                    dialog.hideDlg();
                    exports.refresh();
                }
            });
        };
    }

    function cloneEvent(index) {
        return () => {
            DBMS.cloneEvent(Stories.getCurrentStoryName(), index, Utils.processError(exports.refresh));
        };
    }

    function mergeEvents(index, firstName, secondName) {
        return () => {
            if (state.eventsLength === index + 1) {
                Utils.alert(getL10n('stories-cant-merge-last-event'));
                return;
            }

            Utils.confirm(L10n.format('stories', 'confirm-event-merge', [firstName, secondName]), () => {
                DBMS.mergeEvents(Stories.getCurrentStoryName(), index, Utils.processError(exports.refresh));
            });
        };
    }

    function removeEvent(name, index) {
        return () => {
            Utils.confirm(strFormat(getL10n('stories-remove-event-warning'), [name]), () => {
                DBMS.removeEvent(Stories.getCurrentStoryName(), index, Utils.processError(exports.refresh));
            });
        };
    }

    function getEventHeader() {
        const tr = makeEl('tr');
        addEl(tr, addEl(makeEl('th'), makeText('№')));
        addEl(tr, addEl(makeEl('th'), makeText(getL10n('stories-event'))));
        return tr;
    }

    function onChangeDateTimeCreator(myInput) {
        return (dp, input) => {
            DBMS.setEventOriginProperty(Stories.getCurrentStoryName(), myInput.eventIndex, 'time', input.val(), Utils.processError());
            //            StoryEvents.lastDate = input.val();
            removeClass(myInput, 'defaultDate');
        };
    }

    function updateEventName(event) {
        const input = event.target;
        DBMS.setEventOriginProperty(Stories.getCurrentStoryName(), input.eventIndex, 'name', input.value, Utils.processError(exports.refresh));
    }

    function updateEventText(event) {
        const input = event.target;
        DBMS.setEventOriginProperty(Stories.getCurrentStoryName(), input.eventIndex, 'text', input.value, Utils.processError());
    }
})(this.StoryEvents = {});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const state = {};

    exports.init = () => {
        listen(getEl('writerStoryArea'), 'change', updateWriterStory);
        exports.content = getEl('writerStoryDiv2');
    };

    exports.refresh = () => {
        const storyArea = getEl('writerStoryArea');
        const storyName = Stories.getCurrentStoryName();

        if (storyName) {
            DBMS.getWriterStory(storyName, (err, story) => {
                if (err) { Utils.handleError(err); return; }
                storyArea.value = story;
            });
        } else {
            storyArea.value = '';
        }
    };

    function updateWriterStory() {
        const storyArea = getEl('writerStoryArea');
        DBMS.setWriterStory(Stories.getCurrentStoryName(), storyArea.value, Utils.processError());
    }
})(this.WriterStory = {});

/*Copyright 2018 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, BriefingPreview, BriefingExport
 */

'use strict';

function RoutingTabTmpl(exports, opts) {
    const state = {};
    const tmplRoot = '.tab-routing-tmpl';

    exports.init = () => {
        const el = queryEl(tmplRoot).cloneNode(true);
        removeClass(el, 'tab-routing-tmpl');
        addEl(queryEl('.tab-container'), el);
        state.views = {};
        const containers = {
            root: state,
            navigation: qee(el, '.sub-tab-navigation'),
            content: qee(el, '.sub-tab-content')
        };
        const tabs = R.indexBy(R.prop('viewName'), opts.tabs.map(tab => ({
            viewName: tab.viewName,
            viewRes: Utils.addView(containers, tab.btnName, window[tab.viewName])
        })));

        Utils.setFirstTab(containers, tabs[opts.firstTab].viewRes);
        exports.content = el;
    };

    exports.refresh = () => {
        state.currentView.refresh();
    };
}

RoutingTabTmpl(this.Briefings = {}, {
    firstTab: 'BriefingPreview',
    tabs: [{
        btnName: 'briefing-preview',
        viewName: 'BriefingPreview'
    }, {
        btnName: 'briefing-export',
        viewName: 'BriefingExport'
    }]
});

RoutingTabTmpl(this.Characters = {}, {
    firstTab: 'CharacterEditor',
    tabs: [{
        btnName: 'filling-profile',
        viewName: 'CharacterEditor'
    }, {
        btnName: 'changing-profile-structure',
        viewName: 'CharacterConfigurer'
    }, {
        btnName: 'binding-characters-and-players',
        viewName: 'ProfileBinding2'
    }]
});

RoutingTabTmpl(this.Players = {}, {
    firstTab: 'PlayerEditor',
    tabs: [{
        btnName: 'filling-profile',
        viewName: 'PlayerEditor'
    }, {
        btnName: 'changing-profile-structure',
        viewName: 'PlayerConfigurer'
    }, {
        btnName: 'binding-characters-and-players',
        viewName: 'ProfileBinding2'
    }]
});

RoutingTabTmpl(this.LogViewer2 = {}, {
    firstTab: 'LogViewer',
    tabs: [{
        btnName: 'logViewer',
        viewName: 'LogViewer'
    }, {
        btnName: 'group-schema',
        viewName: 'GroupSchema'
    }, {
        btnName: 'about',
        viewName: 'About'
    }]
});

RoutingTabTmpl(this.AccessManager = {}, {
    firstTab: 'OrganizerManagement',
    tabs: [{
        btnName: 'organizerManagement',
        viewName: 'OrganizerManagement'
    }, {
        btnName: 'playerManagement',
        viewName: 'PlayerManagement'
    }]
});

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const root = '.text-search-tab ';

    exports.init = () => {
        listen(queryEl(`${root}.text-search-button`), 'click', findTexts);
        listenOnEnter(queryEl(`${root}.text-search-input`), findTexts);
        exports.content = queryEl(root);
    };

    exports.refresh = () => {
    };

    function findTexts() {
        const selectedTextTypes = queryElEls(queryEl(root), `${root}.textSearchTypeRadio`)
            .filter(el => el.checked).map(el => el.value);
        const searchStr = queryEl(`${root}.text-search-input`).value;
        const caseSensitive = getEl('caseSensitiveTextSearch').checked;
        DBMS.getTexts(searchStr, selectedTextTypes, caseSensitive, (err, texts) => {
            if (err) { Utils.handleError(err); return; }
            const text2panel = text =>
                makePanel(
                    makeText(`${getL10n(`text-search-${text.textType}`)} (${text.result.length})`),
                    makePanelContent(text, searchStr, caseSensitive)
                );
            addEls(clearEl(queryEl(`${root}.result-panel`)), texts.map(text2panel));
        });
    }

    function makePanelContent(textsInfo, searchStr, caseSensitive) {
        textsInfo.result.sort(CommonUtils.charOrdAFactory(R.prop('name')));
        return addEls(makeEl('div'), textsInfo.result.map((textInfo) => {
            const head = addEl(makeEl('div'), makeText(textInfo.name));
            const body = addClass(makeEl('div'), textInfo.type === 'text' ? 'text-body' : 'string-body');
            const regex = new RegExp(CommonUtils.escapeRegExp(searchStr), caseSensitive ? 'g' : 'gi');
            body.innerHTML = textInfo.text.replace(regex, '<span>$&</span>');
            return addEls(addClass(makeEl('div'), 'text-card'), [head, body]);
        }));
    }

    function makePanel(title, content) {
        const panelInfo = UI.makePanelCore(title, content);
        UI.attachPanelToggler(panelInfo.a, panelInfo.contentDiv);
        panelInfo.a.click();
        return panelInfo.panel;
    }
})(this.TextSearch = {});

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 Utils, DBMS
 */

'use strict';

((exports) => {
    const state = {};
    const root = '.timeline-tab';

    exports.init = () => {
        listen(getEl('timelineStorySelector'), 'change', onStorySelectorChangeDelegate);

        state.TimelineDataset = new vis.DataSet();
        state.TagDataset = new vis.DataSet();

        queryEls(`${root} input[name=timelineFilter]`).map(listen(R.__, 'change', refreshTimeline));
        getEl('timelineFilterByStory').checked = true;

        // specify options
        const options = {
            orientation: 'top',
            showCurrentTime: false,
            //        editable : {
            //            updateTime : true
            //        },
            //        onMove : function (item, callback) {
            //            if (item.storyName) {
            //                DBMS.setEventTime(item.storyName, item.eventIndex, item.start, function(err){
            //                    if(err) {Utils.handleError(err); return;}
            //                    callback(item);
            //                });
            //            }
            //        },
            //        multiselect : true
        };

        const timeline = new vis.Timeline(getEl('timelineContainer'), null, options);
        timeline.setGroups(state.TagDataset);
        timeline.setItems(state.TimelineDataset);
        state.timelineComponent = timeline;

        exports.content = queryEl(root);
    };

    exports.refresh = () => {
        DBMS.getMetaInfo((err, metaInfo) => {
            if (err) { Utils.handleError(err); return; }

            state.postDate = metaInfo.date;
            state.preDate = metaInfo.preGameDate;

            const endDate = new Date(state.postDate);
            const startDate = new Date(state.preDate);
            endDate.setFullYear(endDate.getFullYear() + 1);
            startDate.setFullYear(startDate.getFullYear() - 1);

            state.timelineComponent.setOptions({
                end: endDate,
                start: startDate,
            });

            DBMS.getEventsTimeInfo((err1, eventsTimeInfo) => {
                if (err1) { Utils.handleError(err1); return; }
                state.eventsTimeInfo = eventsTimeInfo;
                state.eventsByStories = R.groupBy(R.prop('storyName'), eventsTimeInfo);
                state.eventsByCharacters = R.uniq(R.flatten(eventsTimeInfo.map(event => event.characters)));
                state.eventsByCharacters = R.zipObj(
                    state.eventsByCharacters,
                    R.ap([R.clone], R.repeat([], state.eventsByCharacters.length))
                );
                eventsTimeInfo.forEach(event => event.characters.forEach(character =>
                    state.eventsByCharacters[character].push(event)));

                PermissionInformer.getEntityNamesArray('story', false, (err2, allStoryNames) => {
                    if (err2) { Utils.handleError(err2); return; }
                    PermissionInformer.getEntityNamesArray('character', false, (err3, allCharacterNames) => {
                        if (err3) { Utils.handleError(err3); return; }
                        suffixy(allStoryNames, state.eventsByStories);
                        state.allStoryNames = allStoryNames;
                        suffixy(allCharacterNames, state.eventsByCharacters);
                        state.allCharacterNames = allCharacterNames;
                        refreshTimeline();
                    });
                });
            });
        });
    };

    function suffixy(entityNames, data) {
        entityNames.forEach((nameInfo) => {
            nameInfo.hasEvents = data[nameInfo.value] !== undefined;
        });
    }

    function refreshTimeline() {
        const selectorValues = getEl('timelineFilterByStory').checked ? state.allStoryNames : state.allCharacterNames;

        const selector = clearEl(getEl('timelineStorySelector'));
        fillSelector(selector, selectorValues.map(obj => ({
            name: obj.displayName,
            value: obj.value,
            className: obj.hasEvents ?
                'fa-icon finished transparent-icon select-icon-padding' :
                'fa-icon empty icon-padding select-icon-padding'
        })));
        setAttr(selector, 'size', selectorValues.length > 15 ? 15 : selectorValues.length);

        if (selectorValues.length !== 0) {
            selector.options[0].selected = true;
            onStorySelectorChange([selectorValues[0].value]);
        }
    }

    function onStorySelectorChangeDelegate(event) {
        onStorySelectorChange(nl2array(event.target.selectedOptions).map(opt => opt.value));
    }

    const prepareLabel = label => `<span class="timeline-label">${label}</span>`;

    function onStorySelectorChange(entityNames) {
        state.TagDataset.clear();
        state.TimelineDataset.clear();

        state.TagDataset.add(entityNames.map(entityName => R.always({ id: entityName, content: entityName })()));

        const byStory = getEl('timelineFilterByStory').checked;
        const data = byStory ? state.eventsByStories : state.eventsByCharacters;
        entityNames = R.intersection(entityNames, R.keys(data));
        const usedData = R.pick(entityNames, data);
        fillTimelines(usedData);
        const events = R.uniq(R.flatten(R.values(usedData))
                .map(event => {
                    event.time = new Date(event.time !== '' ? event.time : state.postDate);
                    event.characters.sort(CommonUtils.charOrdA);
                    return event;
                }));
        
        events.sort(CommonUtils.charOrdAFactory(R.prop('time')));
        
        addEls(clearEl(queryEl(`${root} .timeline-list`)), events.map(event => {
            const row = qmte(`${root} .timeline-event-tmpl`);
            addEl(qee(row, '.time'), makeText(event.time.format('yyyy/mm/dd h:MM')));
            addEl(qee(row, '.story-name'), makeText(event.storyName));
            addEl(qee(row, '.event-name'), makeText(event.name));
            addEl(qee(row, '.characters'), makeText(event.characters.join(', ')));
            return row;
        }));

        if (entityNames[0]) {
            state.TimelineDataset.add({
                content: prepareLabel(L10n.getValue('overview-pre-game-end-date')),
                start: new Date(state.postDate),
                group: entityNames[0],
                className: 'importantItem',
                editable: false
            });
            state.TimelineDataset.add({
                content: prepareLabel(L10n.getValue('overview-pre-game-start-date')),
                start: new Date(state.preDate),
                group: entityNames[0],
                className: 'importantItem',
                editable: false
            });
        }
    }
    
    function fillTimelines(usedData) {
        state.TimelineDataset.add(R.flatten(R.toPairs(usedData).map((pair) => {
            const entityName = pair[0];
            return pair[1].map(event => ({
                content: prepareLabel(event.name),
                start: event.time !== '' ? event.time : state.postDate,
                group: entityName
            }));
        })));
    }
})(this.Timeline = {});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
