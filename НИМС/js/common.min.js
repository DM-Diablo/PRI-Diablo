/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*
 */

'use strict';

((exports) => {
    exports.profileFieldTypes = {
        text: {
            name: 'text',
            value: ''
        },
        string: {
            name: 'string',
            value: ''
        },
        enum: {
            name: 'enum',
            value: '_'
        },
        number: {
            name: 'number',
            value: 0
        },
        checkbox: {
            name: 'checkbox',
            value: false
        },
        multiEnum: {
            name: 'multiEnum',
            value: ''
        }
    };

    exports.relationFields = ['origin', 'starterTextReady', 'enderTextReady', 'essence', 'starter', 'ender'];

    exports.relationEssences = ['starterToEnder', 'allies', 'enderToStarter'];

    exports.playerAccessTypes = ['write', 'readonly', 'hidden'];

    exports.originProperties = ['name', 'text', 'time'];

    exports.adaptationProperties = ['text', 'time', 'ready'];

    exports.playersOptionTypes = ['allowPlayerCreation', 'allowCharacterCreation'];

    exports.objectSubsets = [
        'allObjects',
        'selectedCharacters',
        'selectedStories',
    ];

    exports.networks = [
        'socialRelations',
        'characterPresenceInStory',
        'characterActivityInStory',
        'characterRelations',
    ];

    exports.ownedEntityTypes = ['character', 'player', 'story', 'group'];
    exports.ownedEntityTypes2 = ['characters', 'players', 'stories', 'groups'];

    exports.metaInfoStrings = ['name', 'description'];
    
    exports.metaInfoDates = ['date', 'preGameDate'];

    exports.profileTypes = ['character', 'player'];

    exports.groupProfileStructure = [{
        name: 'filterModel',
        type: 'container',
    }, {
        name: 'characterList',
        type: 'container',
    }, {
        name: 'masterDescription',
        type: 'text',
    }, {
        name: 'doExport',
        type: 'checkbox',
    }, {
        name: 'characterDescription',
        type: 'text',
    }];

    exports.groupEditableItems = ['masterDescription', 'characterDescription'];

    exports.noGroup = 'noGroup';

    exports.characterActivityTypes = [
        'active',
        'follower',
        'defensive',
        'passive',
    ];

    exports.characterRelationTypes = [
        'allies',
        'directional',
        'neutral',
    ];

    exports.numberFilter = [
        'ignore',
        'greater',
        'equal',
        'lesser',
    ];

    exports.multiEnumFilter = [
        'ignore',
        'every',
        'equal',
        'some',
    ];

    exports.finishedText = 'finishedText';
    exports.finishedSuffix = 'finishedSuffix';
    exports.emptySuffix = 'emptySuffix';

    exports.true = 'yes';
    exports.false = 'no';

    exports.yesNo = [exports.true, exports.false];

    exports.briefingNumber = [1, 5, 10, 20, 50];

    exports.logFilterTypes = [
        'date',
        'user',
        'action',
        'params',
        'status',
    ];

    exports.adaptationRightsModes = ['ByStory', 'ByCharacter'];

    exports.colorPalette = [
        {color: {border: "#2B7CE9", background: "#97C2FC", highlight: {border: "#2B7CE9", background: "#D2E5FF"},
                    hover: {border: "#2B7CE9", background: "#D2E5FF"}}}, // 0: blue
        {color: {border: "#FFA500", background: "#FFFF00", highlight: {border: "#FFA500", background: "#FFFFA3"},
                    hover: {border: "#FFA500", background: "#FFFFA3"}}}, // 1: yellow
        {
            color: {
                border: '#FA0A10', background: '#FB7E81', highlight: { border: '#FA0A10', background: '#FFAFB1' }, hover: { border: '#FA0A10', background: '#FFAFB1' }
            }
        }, // 2: red
        {
            color: {
                border: '#41A906', background: '#7BE141', highlight: { border: '#41A906', background: '#A1EC76' }, hover: { border: '#41A906', background: '#A1EC76' }
            }
        }, // 3: green
        {
            color: {
                border: '#E129F0', background: '#EB7DF4', highlight: { border: '#E129F0', background: '#F0B3F5' }, hover: { border: '#E129F0', background: '#F0B3F5' }
            }
        }, // 4: magenta
        {
            color: {
                border: '#7C29F0', background: '#AD85E4', highlight: { border: '#7C29F0', background: '#D3BDF0' }, hover: { border: '#7C29F0', background: '#D3BDF0' }
            }
        }, // 5: purple
        {
            color: {
                border: '#C37F00', background: '#FFA807', highlight: { border: '#C37F00', background: '#FFCA66' }, hover: { border: '#C37F00', background: '#FFCA66' }
            }
        }, // 6: orange
        {
            color: {
                border: '#4220FB', background: '#6E6EFD', highlight: { border: '#4220FB', background: '#9B9BFD' }, hover: { border: '#4220FB', background: '#9B9BFD' }
            }
        }, // 7: darkblue
        {
            color: {
                border: '#FD5A77', background: '#FFC0CB', highlight: { border: '#FD5A77', background: '#FFD1D9' }, hover: { border: '#FD5A77', background: '#FFD1D9' }
            }
        }, // 8: pink
        {
            color: {
                border: '#4AD63A', background: '#C2FABC', highlight: { border: '#4AD63A', background: '#E6FFE3' }, hover: { border: '#4AD63A', background: '#E6FFE3' }
            }
        }, // 9: mint

        {
            color: {
                border: '#990000', background: '#EE0000', highlight: { border: '#BB0000', background: '#FF3333' }, hover: { border: '#BB0000', background: '#FF3333' }
            }
        }, // 10:bright red

        {
            color: {
                border: '#FF6000', background: '#FF6000', highlight: { border: '#FF6000', background: '#FF6000' }, hover: { border: '#FF6000', background: '#FF6000' }
            }
        }, // 12: real orange
        {
            color: {
                border: '#97C2FC', background: '#2B7CE9', highlight: { border: '#D2E5FF', background: '#2B7CE9' }, hover: { border: '#D2E5FF', background: '#2B7CE9' }
            }
        }, // 13: blue
        {
            color: {
                border: '#399605', background: '#255C03', highlight: { border: '#399605', background: '#255C03' }, hover: { border: '#399605', background: '#255C03' }
            }
        }, // 14: green
        {
            color: {
                border: '#B70054', background: '#FF007E', highlight: { border: '#B70054', background: '#FF007E' }, hover: { border: '#B70054', background: '#FF007E' }
            }
        }, // 15: magenta
        {
            color: {
                border: '#AD85E4', background: '#7C29F0', highlight: { border: '#D3BDF0', background: '#7C29F0' }, hover: { border: '#D3BDF0', background: '#7C29F0' }
            }
        }, // 16: purple
        {
            color: {
                border: '#4557FA', background: '#000EA1', highlight: { border: '#6E6EFD', background: '#000EA1' }, hover: { border: '#6E6EFD', background: '#000EA1' }
            }
        }, // 17: darkblue
        {
            color: {
                border: '#FFC0CB', background: '#FD5A77', highlight: { border: '#FFD1D9', background: '#FD5A77' }, hover: { border: '#FFD1D9', background: '#FD5A77' }
            }
        }, // 18: pink
        {
            color: {
                border: '#C2FABC', background: '#74D66A', highlight: { border: '#E6FFE3', background: '#74D66A' }, hover: { border: '#E6FFE3', background: '#74D66A' }
            }
        }, // 19: mint

        {
            color: {
                border: '#EE0000', background: '#990000', highlight: { border: '#FF3333', background: '#BB0000' }, hover: { border: '#FF3333', background: '#BB0000' }
            }
        } // 20:bright red
    ];

    exports.CHAR_NAME = 'char-name';
    exports.CHAR_OWNER = 'char-owner';
    exports.CHAR_PREFIX = 'profile-';
    exports.PLAYER_NAME = 'player-name';
    exports.PLAYER_OWNER = 'player-owner';
    exports.PLAYER_PREFIX = 'player-profile-';
    exports.SUMMARY_PREFIX = 'summary-';

    exports.summaryStats = [
        ['active', 'constant-active'],
        ['follower', 'constant-follower'],
        ['defensive', 'constant-defensive'],
        ['passive', 'constant-passive'],
        ['completeness', 'profile-filter-completeness'],
        ['totalStories', 'profile-filter-totalStories']
    ];

    exports.socialNetworkOpts = {
        nodes: {
            shape: 'dot',
            scaling: {
                min: 10,
                max: 30,
                label: {
                    min: 8,
                    // min : 4,
                    max: 30,
                    // max : 50,
                    // drawThreshold : 12,
                    drawThreshold: 5,
                    maxVisible: 30
                // maxVisible : 20
                }
            },
            font: {
                // size : 12,
                size: 20,
                face: 'Tahoma'
            }
        },
        edges: {
            width: 0.15,
            color: {
                inherit: 'from'
            },
            smooth: {
                //                    type : 'continuous'
                type: 'dynamic'
            }
        },
        physics: {
            barnesHut: {
                //                    gravitationalConstant : -15000
                gravitationalConstant: -30000,
                //                 gravitationalConstant : -60000
                //                    springLength: 20,
                springConstant: 0.1
            },
            stabilization: {
                //                    iterations : 2500
                iterations: 50
            }
        },
        // physics : false,
        // layout : true,
        layout: {
            randomSeed: 1200
        },
        interaction: {
            tooltipDelay: 200,
        // hideEdgesOnDrag : true
        },
    };

    exports.groupSchemaOpts = {
        nodes: {
            scaling: {
                min: 10,
                max: 30,
                label: {
                    min: 8,
                    max: 30,
                    drawThreshold: 5,
                    maxVisible: 30
                }
            },
            font: {
                size: 20,
                face: 'Tahoma'
            }
        },
        manipulation: false,
        height: '90%',
        layout: {
            hierarchical: {
                enabled: true,
                levelSeparation: 200
            }
        },
        physics: {
            hierarchicalRepulsion: {
                nodeDistance: 140
            }
        }
    };

    exports.snActivityColors = {
        active: 'red',
        follower: 'blue',
        defensive: 'green',
        passive: 'grey'
    };

    exports.snRelationColors = {
        starterToEnder: 'red',
        enderToStarter: 'red',
        allies: 'green',
        neutral: 'grey'
    };

    exports.snFocusOptions = {
        scale: 1.2,
        offset: {
            x: 0,
            y: 0
        },
        animation: {
            duration: 1000,
            easingFunction: 'easeInOutQuad'
        }
    };

    exports.snFixedColors = {
        storyColor: {
            color: {
                background: 'rgb(255,255,0)',
                border: 'rgb(255,168,3)'
            }
        },
        noGroup: {
            color: {
                background: 'rgb(151,194,252)',
                border: 'rgb(43,124,233)'
            }
        },
        fromGroup: {
            color: {
                background: '#7BE141',
                border: '#41A906'
            }
        },
        thirdDegreeNode: {
            color: {
                background: 'rgba(200,200,200,0.5)',
                border: 'rgba(200,200,200,0.5)'
            }
        },
        secondDegreeNode: {
            color: {
                background: 'rgba(150,150,150,0.75)',
                border: 'rgba(150,150,150,0.75)'
            }
        },
        firstDegreeNode: {
            color: {
                background: 'rgb(151,194,252)',
                border: 'rgb(43,124,233)'
            }
        }
    };


    exports.visLocales = {
        ru: {
            edit: 'Редактировать',
            del: 'Удалить выбранное',
            back: 'Назад',
            addNode: 'Добавить узел',
            addEdge: 'Добавить ребро',
            editNode: 'Редактировать узел',
            editEdge: 'Редактировать ребро',
            addDescription: 'Кликните в свободное место, чтобы добавить новый узел.',
            edgeDescription: 'Кликните на узел и протяните ребро к другому узлу, чтобы соединить их.',
            editEdgeDescription: 'Кликните на контрольные точки и перетащите их к другому узлу, чтобы соединить узлы.',
            createEdgeError: 'Невозможно соединить ребра в кластер.',
            deleteClusterError: 'Кластеры не могут быть удалены',
            editClusterError: 'Кластеры недоступны для редактирования.'
        },
        en: {
            edit: 'Edit',
            del: 'Delete selected',
            back: 'Back',
            addNode: 'Add Node',
            addEdge: 'Add Edge',
            editNode: 'Edit Node',
            editEdge: 'Edit Edge',
            addDescription: 'Click in an empty space to place a new node.',
            edgeDescription: 'Click on a node and drag the edge to another node to connect them.',
            editEdgeDescription: 'Click on the control points and drag them to a node to connect to it.',
            createEdgeError: 'Cannot link edges to a cluster.',
            deleteClusterError: 'Clusters cannot be deleted.',
            editClusterError: 'Clusters cannot be edited.'
        }
    };

    exports.visLocales.en_EN = exports.visLocales.en;
    exports.visLocales.en_US = exports.visLocales.en;
    exports.visLocales.ru_RU = exports.visLocales.ru;

    exports.serverSpecificFunctions = ['getManagementInfo', 'assignAdmin', 'assignEditor', 'removeEditor',
        'changeAdaptationRightsMode',
        'removeOrganizer', 'removePermission', 'assignPermission', 'getPlayerLoginsArray', 'removePlayerLogin',
        'getWelcomeText', 'setWelcomeText', 'getPlayersOptions', 'setPlayerOption', 'createOrganizer',
        'changeOrganizerPassword', 'createPlayer', 'createPlayerLogin', 'changePlayerPassword',
        'getPlayerProfileInfo', 'createCharacterByPlayer', 'publishPermissionsUpdate'];

    exports.commonIgnoreList = ['getSettings', '_init', 'clearSettings', 'log'];
    
    
    
    exports.yedGmlBase = `<?xml version="1.0" encoding="UTF-8" standalone="no"?>
        <graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:java="http://www.yworks.com/xml/yfiles-common/1.0/java" xmlns:sys="http://www.yworks.com/xml/yfiles-common/markup/primitives/2.0" xmlns:x="http://www.yworks.com/xml/yfiles-common/markup/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:y="http://www.yworks.com/xml/graphml" xmlns:yed="http://www.yworks.com/xml/yed/3" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://www.yworks.com/xml/schema/graphml/1.1/ygraphml.xsd">
          <!--Created by yEd 3.15.0.2-->
          <key attr.name="Description" attr.type="string" for="graph" id="d0"/>
          <key for="port" id="d1" yfiles.type="portgraphics"/>
          <key for="port" id="d2" yfiles.type="portgeometry"/>
          <key for="port" id="d3" yfiles.type="portuserdata"/>
          <key attr.name="url" attr.type="string" for="node" id="d4"/>
          <key attr.name="description" attr.type="string" for="node" id="d5"/>
          <key for="node" id="d6" yfiles.type="nodegraphics"/>
          <key for="graphml" id="d7" yfiles.type="resources"/>
          <key attr.name="url" attr.type="string" for="edge" id="d8"/>
          <key attr.name="description" attr.type="string" for="edge" id="d9"/>
          <key for="edge" id="d10" yfiles.type="edgegraphics"/>
          <graph edgedefault="directed" id="G">
            <data key="d0"/>
            {0}
            {1}
          </graph>
          <data key="d7">
            <y:Resources/>
          </data>
        </graphml>`;

    exports.yedNodeTmpl = `<node id="{0}">
          <data key="d5"/>
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="45.0" width="151.0" x="94.0" y="152.75"/>
              <y:Fill color="{2}" transparent="false"/>
              <y:BorderStyle color="{3}" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="custom" textColor="#000000" visible="true" width="35.8515625" x="57.57421875" y="13.1494140625">{1}<y:LabelModel>
                  <y:SmartNodeLabelModel distance="4.0"/>
                </y:LabelModel>
                <y:ModelParameter>
                  <y:SmartNodeLabelModelParameter labelRatioX="0.0" labelRatioY="0.0" nodeRatioX="0.0" nodeRatioY="0.0" offsetX="0.0" offsetY="0.0" upX="0.0" upY="-1.0"/>
                </y:ModelParameter>
              </y:NodeLabel>
              <y:Shape type="roundrectangle"/>
            </y:ShapeNode>
          </data>
        </node>`;
            
    exports.yedEdgeTmpl = `<edge id="{0}" source="{2}" target="{3}">
          <data key="d9"/>
          <data key="d10">
            <y:ArcEdge>
              <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0">
                <y:Point x="346.6875" y="333.375"/>
              </y:Path>
              <y:LineStyle color="#000000" type="line" width="1.0"/>
              <y:Arrows source="none" target="standard"/>
              <y:EdgeLabel alignment="center" configuration="AutoFlippingLabel" distance="2.0" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="custom" preferredPlacement="anywhere" ratio="0.5" textColor="#000000" visible="true" width="41.30078125" x="-234.82116743359467" y="-7.955110597360772">{1}<y:LabelModel>
                  <y:SmartEdgeLabelModel autoRotationEnabled="false" defaultAngle="0.0" defaultDistance="10.0"/>
                </y:LabelModel>
                <y:ModelParameter>
                  <y:SmartEdgeLabelModelParameter angle="0.0" distance="30.0" distanceToCenter="true" position="center" ratio="0.189477660359121" segment="-1"/>
                </y:ModelParameter>
                <y:PreferredPlacementDescriptor angle="0.0" angleOffsetOnRightSide="0" angleReference="absolute" angleRotationOnRightSide="co" distance="-1.0" frozen="true" placement="anywhere" side="anywhere" sideReference="relative_to_edge_flow"/>
              </y:EdgeLabel>
              <y:Arc height="106.20632934570312" ratio="1.0" type="fixedRatio"/>
            </y:ArcEdge>
          </data>
        </edge>`;
    
    exports.gearsNodeRequiredFields = ['id', 'x', 'y', 'label', 'name', 'group', 'notes', 'shape'];

    exports.httpTimeout = 60000;
})(typeof exports === 'undefined' ? this.Constants = {} : exports);

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 // Utils
 */

'use strict';

/* eslint-disable func-names,prefer-rest-params */

((exports) => {
    exports.offlineIgnoreList = ['getUser',
        'setPassword',
        'checkPassword',
        'login',
        'signUp',
        'hasPermission',
        '_getOwnerMap',
        'getPermissionsSummary',
        'subscribeOnPermissionsUpdate'];

    // argument description
    // add function name to log it
    // ignoreParams - make true if you don't need params in log.
    //     Example - createOrganizer params include password.
    // filter - add this function to filter out unnecessary calls.
    //     Example - we need all meta info calls except description.
    // rewrite - make true if you don't want to flood log with some repeated call.
    //     For example auto call of getDatabase will flood everything.
    exports.apiInfo = {
        baseAPI: {
            _init: null,
            getDatabase: { rewrite: true },
            setDatabase: { ignoreParams: true },
            getMetaInfo: null,
            setMetaInfoString: {},
            setMetaInfoDate: {}
        },
        consistencyCheckAPI: {
            getConsistencyCheckResult: null
        },
        statisticsAPI: {
            getStatistics: null
        },
        profilesAPI: {
            getProfileNamesArray: null,
            getProfile: null,
            getAllProfiles: null,
            createProfile: {},
            renameProfile: {},
            removeProfile: {},
            updateProfileField: {}  // text
        },
        profileBindingAPI: {
            getProfileBindings: null,
            getExtendedProfileBindings: null,
            getProfileBinding: null,
            createBinding: {},
            removeBinding: {}
        },
        profileViewAPI: {
            getRoleGridInfo: null,
        },
        groupsAPI: {
            getGroupNamesArray: null,
            getGroup: null,
            getCharacterGroupTexts: null,
            getAllCharacterGroupTexts: null,
            createGroup: {},
            renameGroup: {},
            removeGroup: {},
            saveFilterToGroup: {},
            updateGroupField: {}, // text
            doExportGroup: {},
            getProfileFilterInfo: null,
            getGroupCharacterSets: null
        },
        groupSchemaAPI: {
            getGroupSchemas: null
        },
        relationsAPI: {
            getCharacterRelation: null,
            getRelations: null,
            createCharacterRelation: {},
            removeCharacterRelation: {},
            setCharacterRelationText: {}, // text
            setRelationReadyStatus: {},
            setRelationEssenceStatus: {},
            setOriginRelationText: {}, // text
            getRelationsSummary: null,
        },
        briefingExportAPI: {
            getBriefingData: {}
        },
        profileConfigurerAPI: {
            getProfileStructure: null,
            createProfileItem: {},
            moveProfileItem: {},
            removeProfileItem: {},
            changeProfileItemType: {},
            changeProfileItemPlayerAccess: {},
            renameProfileItem: {},
            doExportProfileItemChange: {},
            showInRoleGridProfileItemChange: {},
            updateDefaultValue: {},
            renameEnumValue: {}
        },
        entityAPI: {
            getEntityNamesArray: null
        },
        storyBaseAPI: {
            getStoryNamesArray: null,
            getAllStories: null,
            getWriterStory: null,
            setWriterStory: {}, // text
            createStory: {},
            renameStory: {},
            removeStory: {}
        },
        storyEventsAPI: {
            getStoryEvents: null,
            createEvent: {},
            moveEvent: {},
            cloneEvent: {},
            mergeEvents: {},
            removeEvent: {},
            setEventOriginProperty: {} // text
        },
        storyCharactersAPI: {
            getStoryCharacterNamesArray: null,
            getStoryCharacters: null,
            addStoryCharacter: {},
            switchStoryCharacters: {},
            removeStoryCharacter: {},
            updateCharacterInventory: {}, // text+-
            onChangeCharacterActivity: {},
            addCharacterToEvent: {},
            removeCharacterFromEvent: {}
        },
        storyViewAPI: {
            getAllInventoryLists: null,
            getCharacterEventGroupsByStory: null,
            getCharacterEventsByTime: null,
            getEventsTimeInfo: null,
            getCharactersSummary: null,
            getCharacterReport: null
        },
        storyAdaptationsAPI: {
            getFilteredStoryNames: null,
            getStory: null,
            setEventAdaptationProperty: {} // text
        },
        accessManagerAPI: {
            getManagementInfo: null,
            assignAdmin: {},
            assignEditor: {},
            removeEditor: {},
            changeAdaptationRightsMode: {},
            createOrganizer: { ignoreParams: true },
            changeOrganizerPassword: { ignoreParams: true },
            removeOrganizer: {},
            removePermission: {},
            assignPermission: {},
            publishPermissionsUpdate: null,
            getPlayerLoginsArray: null,
            createPlayer: { ignoreParams: true },
            createPlayerLogin: { ignoreParams: true },
            changePlayerPassword: { ignoreParams: true },
            removePlayerLogin: {},
            getWelcomeText: null,
            setWelcomeText: {},  // text
            getPlayersOptions: null,
            setPlayerOption: {},
            getPlayerProfileInfo: null,
            createCharacterByPlayer: {}
        },
        textSearchAPI: {
            getTexts: null
        },
        userAPI: {
            getUser: null,
            setPassword: null,
            checkPassword: null,
            login: null,
            signUp: null
        },
        accessManagerOverridesAPI: {},
        overridesAPI: {},
        permissionAPI: {
            hasPermission: null
        },
        permissionSummaryAPI: {
            _getOwnerMap: null,
            getPermissionsSummary: null, // special case
            subscribeOnPermissionsUpdate: null // special case
        },
        logAPI: {
            log: null,
            getLog: null
        },
        gearsAPI: {
            getAllGearsData: null,
            setGearsData: null,
            setGearsPhysicsEnabled: {},
            setGearsShowNotesEnabled: {}
        },
        slidersAPI: {
            getSliderData: null,
            updateSliderNaming: {},
            updateSliderValue: {},
            createSlider: {},
            removeSlider: {},
            moveSlider: {},
        }
    };


    // isServer - used in server mode. If false then user in logs will be named "user".
    // environment - used to disable this.log function in thin client in server version.
    //      I agree it is strange.
    exports.attachLogCalls = (LocalDBMS, R, isServer) => {
        const apiInfoObj = R.mergeAll(R.values(exports.apiInfo));
        const filteredApi = R.filter(R.compose(R.not, R.isNil), apiInfoObj);

        Object.keys(LocalDBMS.prototype)
            .filter(R.prop(R.__, filteredApi))
            .forEach((funcName) => {
                const oldFun = LocalDBMS.prototype[funcName];
                LocalDBMS.prototype[funcName] = function () {
                    const arr = [];
                    for (let i = 0; i < arguments.length - 1; i++) {
                        arr.push(arguments[i]);
                    }

                    const { length } = arguments;
                    const callbackPos = length + (typeof arguments[length - 1] === 'function' ? -1 : -2);
                    const callback = arguments[callbackPos];


                    let accept = true;
                    if (filteredApi[funcName].filter) {
                        accept = filteredApi[funcName].filter(arr);
                    }

                    if (accept) {
                        let userName = 'user';
                        if (isServer && arguments[arguments.length - 1] !== undefined) {
                            userName = arguments[arguments.length - 1].name;
                        }

                        const beginTime = new Date().toString();
                        this.log(
                            userName, beginTime, funcName, !!filteredApi[funcName].rewrite,
                            filteredApi[funcName].ignoreParams ? [] : arr, JSON.stringify(['begin'])
                        );

                        const callbackOverride = function () {
                            const endTime = new Date().toString();
                            const hasError = (arguments[0] !== null && arguments[0] !== undefined);
                            let text;
                            if (hasError) {
                                text = 'ERR: ';
                                if (arguments[0].messageId !== undefined) {
                                    text += `${arguments[0].messageId}, ${JSON.stringify(arguments[0].parameters)}`;
                                } else {
                                    text += arguments[0];
                                }
                            } else {
                                text = 'OK';
                            }
                            this.log(
                                userName, endTime, funcName, !!filteredApi[funcName].rewrite,
                                filteredApi[funcName].ignoreParams ? [] : arr, JSON.stringify([beginTime,
                                    text])
                            );
                            callback(...arguments);
                        }.bind(this);
                        arguments[callbackPos] = callbackOverride;
                    }

                    return oldFun.apply(this, arguments);
                };
            });

        Object.keys(LocalDBMS.prototype)
            .forEach((funcName) => {
                const oldFun = LocalDBMS.prototype[funcName];
                LocalDBMS.prototype[funcName] = function () {
                    try {
                        return oldFun.apply(this, arguments);
                    } catch (err) {
                        const { length } = arguments;
                        const callbackPos = length + (typeof arguments[length - 1] === 'function' ? -1 : -2);
                        const callback = arguments[callbackPos];
                        console.error(funcName, err);
                        return callback(err);
                    }
                };
            });
    };
})(typeof exports === 'undefined' ? this.Logger = {} : exports);

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((callback) => {
    function ProjectUtils(exports, R, Constants, Errors, CU) {
        exports.acceptDataRow = R.curry((model, dataString) => {
            const dataMap = CU.arr2map(dataString, 'itemName');
            return model.every((filterItem) => {
                let regex, result, values;
                result = true;
                const { value } = dataMap[filterItem.name];
                if (value === undefined) {
                    result = false;
                    return result;
                }
                switch (filterItem.type) {
                case 'enum':
                case 'checkbox':
                    if (!filterItem.selectedOptions[value]) {
                        result = false;
                    }
                    break;
                case 'multiEnum':
                    values = value === '' ? [] : value.split(',');
                    switch (filterItem.condition) {
                    case 'every':
                        if (R.keys(filterItem.selectedOptions).length === 0) {
                            result = false;
                        } else {
                            result = R.difference(R.keys(filterItem.selectedOptions), values).length === 0;
                        }
                        break;
                    case 'some':
                        result = R.difference(values, R.keys(filterItem.selectedOptions)).length !== values.length;
                        break;
                    case 'equal':
                        result = R.symmetricDifference(values, R.keys(filterItem.selectedOptions)).length === 0;
                        break;
                    default:
                        throw new Error(`Unexpected condition ${filterItem.condition}`);
                    }
                    break;
                case 'number':
                    switch (filterItem.condition) {
                    case 'greater':
                        result = value > filterItem.num;
                        break;
                    case 'equal':
                        result = value === filterItem.num;
                        break;
                    case 'lesser':
                        result = value < filterItem.num;
                        break;
                    default:
                        throw new Error(`Unexpected condition ${filterItem.condition}`);
                    }
                    break;
                case 'text':
                case 'string':
                    result = value.toLowerCase().indexOf(filterItem.regexString.toLowerCase()) !== -1;
                    break;
                default:
                    throw new Error(`Unexpected type ${filterItem.type}`);
                }
                return result;
            });
        });

        exports.makeGroupedProfileFilterInfo = (opts) => {
            const groupedProfileFilterItems = [];
            let arr = [];
            arr.push({
                name: Constants.CHAR_NAME,
                type: 'string',
                displayName: 'profile-filter-character',
            });
            arr.push({
                name: Constants.CHAR_OWNER,
                type: 'string',
                displayName: 'profile-filter-character-owner',
            });
            arr = arr.concat(opts.characters.profileStructure.map(element => ({
                name: Constants.CHAR_PREFIX + element.name,
                type: element.type,
                displayName: element.name,
                value: element.value
            })));
            groupedProfileFilterItems.push({
                name: 'characterFilterItems',
                profileFilterItems: arr
            });

            arr = [];
            arr.push({
                name: Constants.PLAYER_NAME,
                type: 'string',
                displayName: 'profile-filter-player-name',
            });
            arr.push({
                name: Constants.PLAYER_OWNER,
                type: 'string',
                displayName: 'profile-filter-player-owner',
            });
            arr = arr.concat(opts.players.profileStructure.map(element => ({
                name: Constants.PLAYER_PREFIX + element.name,
                type: element.type,
                displayName: element.name,
                value: element.value
            })));
            groupedProfileFilterItems.push({
                name: 'playerFilterItems',
                profileFilterItems: arr
            });

            arr = Constants.summaryStats.map(stat => ({
                name: Constants.SUMMARY_PREFIX + stat[0],
                type: 'number',
                displayName: stat[1],
            }));
            groupedProfileFilterItems.push({
                name: 'summaryFilterItems',
                profileFilterItems: arr
            });
            opts.groupedProfileFilterItems = groupedProfileFilterItems;
            return opts;
        };

        const getCharacterInfoValue = (info, characterName, profileItemName) => {
            if (profileItemName === Constants.CHAR_NAME) {
                return characterName;
            } else if (profileItemName === Constants.CHAR_OWNER) {
                return info.characters.owners[characterName];
            } else if (CU.startsWith(profileItemName, Constants.SUMMARY_PREFIX)) {
                return info.charactersSummary[characterName][profileItemName.substring(Constants
                    .SUMMARY_PREFIX.length)];
            } else if (CU.startsWith(profileItemName, Constants.CHAR_PREFIX)) {
                return info.characters.profiles[characterName][profileItemName.substring(Constants
                    .CHAR_PREFIX.length)];
            }
            throw new Error(`Unexpected profileItemName: ${profileItemName}`);
        };
        const getCharacterInfoValue2 = (info, profileId, profileItemName) => {
            if (profileItemName === Constants.CHAR_NAME ||
                    profileItemName === Constants.CHAR_OWNER ||
                    CU.startsWith(profileItemName, Constants.SUMMARY_PREFIX) ||
                    CU.startsWith(profileItemName, Constants.CHAR_PREFIX)) {
                if (profileId[0] === '') return undefined;
                const characterName = profileId[0];
                if (profileItemName === Constants.CHAR_NAME) {
                    return characterName;
                } else if (profileItemName === Constants.CHAR_OWNER) {
                    return info.characters.owners[characterName];
                } else if (CU.startsWith(profileItemName, Constants.SUMMARY_PREFIX)) {
                    return info.charactersSummary[characterName][profileItemName.substring(Constants
                        .SUMMARY_PREFIX.length)];
                } else if (CU.startsWith(profileItemName, Constants.CHAR_PREFIX)) {
                    return info.characters.profiles[characterName][profileItemName.substring(Constants
                        .CHAR_PREFIX.length)];
                }
            } else if (profileItemName === Constants.PLAYER_NAME ||
                    profileItemName === Constants.PLAYER_OWNER ||
                    CU.startsWith(profileItemName, Constants.PLAYER_PREFIX)) {
                if (profileId[1] === '') return undefined;
                const playerName = profileId[1];
                if (profileItemName === Constants.PLAYER_NAME) {
                    return playerName;
                } else if (profileItemName === Constants.PLAYER_OWNER) {
                    return info.players.owners[playerName];
                } else if (CU.startsWith(profileItemName, Constants.PLAYER_PREFIX)) {
                    return info.players.profiles[playerName][profileItemName.substring(Constants.PLAYER_PREFIX.length)];
                }
            }
            throw new Error(`Unexpected profileItemName: ${profileItemName}`);
        };

        exports.getDataArray = R.curry((info, profileId) => R.flatten(info.groupedProfileFilterItems.map(R.prop('profileFilterItems'))).map((profileItemInfo) => {
            const value = getCharacterInfoValue2(info, profileId, profileItemInfo.name);
            return {
                value,
                type: profileItemInfo.type,
                itemName: profileItemInfo.name
            };
        }));

        exports.getDataArrays = (info, filterModel) =>
            info.bindingData.map(exports.getDataArray(info)).filter(exports.acceptDataRow(filterModel));

        const findProfileStructureConflicts = (prefix, profileStructure, filterModel) => {
            const conflictTypes = [];
            const profilePart = filterModel.filter(R.compose(R.test(new RegExp(`^${prefix}`)), R.prop('name')));
            const profileSettingsMap = R.indexBy(R.prop('name'), profileStructure);
            profilePart.forEach((modelItem) => {
                const itemName = modelItem.name.substring(prefix.length);
                const profileItem = profileSettingsMap[itemName];
                if (!profileItem || profileItem.type !== modelItem.type) {
                    conflictTypes.push(itemName);
                    return;
                }
                if (profileItem.type === 'enum' || profileItem.type === 'multiEnum') {
                    const profileEnum = profileItem.value.split(',');
                    const modelEnum = Object.keys(modelItem.selectedOptions);
                    if (R.difference(modelEnum, profileEnum).length !== 0) {
                        conflictTypes.push(itemName);
                    }
                }
            });
            return conflictTypes;
        };

        exports.isFilterModelCompatibleWithProfiles = (profileStructure, filterModel) => {
            const charConflicts = findProfileStructureConflicts(
                Constants.CHAR_PREFIX, profileStructure.characters,
                filterModel
            );
            const playerConflicts = findProfileStructureConflicts(
                Constants.PLAYER_PREFIX, profileStructure.players,
                filterModel
            );
            return charConflicts.concat(playerConflicts);
        };

        exports.rel2charArr = R.props(['starter', 'ender']);
        exports.get2ndRelChar = R.curry((char1, rel) => (rel.starter === char1 ? rel.ender : rel.starter));
    }

    callback(ProjectUtils);
})(api => ((typeof exports === 'undefined') ? api((this.ProjectUtils = {}), R, Constants, Errors, CommonUtils) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 // Utils
 */

'use strict';

((callback) => {
    function Migrator(exports, R) {
        exports.migrate = (data) => {
            if (!data.Version) {
                data.Settings = {};

                let story, storyCharacters;
                Object.keys(data.Stories).forEach((storyName) => {
                    story = data.Stories[storyName];
                    storyCharacters = Object.keys(story.characters);
                    storyCharacters.forEach((character) => {
                        story.characters[character].activity = {};
                    });
                });

                data.Version = '0.0.4';
            }
            if (data.Version === '0.0.4') { // new versioning rule
                data.Version = '0.4.1';
            }
            if (data.Version === '0.4.1') { // new
                delete data.Settings.Events;
                data.Version = '0.4.3';
            }
            if (data.Version === '0.4.3') {
                data.Log = [];
                data.Version = '0.4.4';
                data.Meta.saveTime = new Date();
            }
            if (data.Version === '0.4.4') {
                // see #3
                Object.keys(data.Characters).forEach((charName) => {
                    const char = data.Characters[charName];
                    delete char.displayName;
                });
                Object.keys(data.Stories).forEach((storyName) => {
                    const story = data.Stories[storyName];
                    delete story.displayName;
                });
                data.Version = '0.4.4u1';
            }
            if (data.Version === '0.4.4u1') {
                // see #12
                data.ProfileSettings.forEach((item) => {
                    item.doExport = true;
                });
                data.Meta.saveTime = new Date().toString();
                // see #13
                Object.keys(data.Stories).forEach((storyName) => {
                    const story = data.Stories[storyName];
                    story.events.forEach((event) => {
                        delete event.index;
                        delete event.storyName;
                    });
                });
                // see #17
                Object.keys(data.Stories).forEach((storyName) => {
                    const story = data.Stories[storyName];
                    story.events.forEach((event) => {
                        Object.keys(event.characters).forEach((character) => {
                            delete event.characters[character].name;
                            event.characters[character].time = '';
                        });
                    });
                });
                data.Version = '0.4.4u2';
            }
            if (data.Version === '0.4.4u2') {
                // see #17 - reopened
                Object.keys(data.Stories).forEach((storyName) => {
                    const story = data.Stories[storyName];
                    story.events.forEach((event) => {
                        Object.keys(event.characters).forEach((character) => {
                            delete event.characters[character].name;
                        });
                    });
                });
                data.Version = '0.4.4u3';
            }
            if (data.Version === '0.4.4u3') {
                data.Groups = {};
                if (data.ManagementInfo) {
                    Object.keys(data.ManagementInfo.UsersInfo).forEach((userName) => {
                        data.ManagementInfo.UsersInfo[userName].groups = [];
                    });
                }

                data.Version = '0.5.0';
            }
            if (data.Version === '0.5.0') {
                data.InvestigationBoard = {
                    groups: {},
                    resources: {},
                    relations: {}
                };
                data.Version = '0.5.1';
            }
            if (data.Version === '0.5.1') {
                data.Relations = {};
                data.Version = '0.5.2';
            }
            if (data.Version === '0.5.2') {
                if (data.Meta.date === '') {
                    data.Meta.date = '1970/01/01 00:00';
                }
                if (data.Meta.preGameDate === '') {
                    data.Meta.preGameDate = '1970/01/01 00:00';
                }
                data.Version = '0.5.2u1';
            }
            if (data.Version === '0.5.2u1') {
                data.CharacterProfileStructure = data.ProfileSettings;
                delete data.ProfileSettings;
                data.PlayerProfileStructure = [];
                data.Players = {};
                data.ProfileBindings = {};
                if (data.ManagementInfo) {
                    Object.keys(data.ManagementInfo.UsersInfo).forEach((userName) => {
                        data.ManagementInfo.UsersInfo[userName].players = [];
                    });
                }
                data.Version = '0.5.3';
            }
            if (data.Version === '0.5.3') {
                if (data.ManagementInfo) {
                    data.ManagementInfo.PlayersInfo = {};
                    data.ManagementInfo.WelcomeText = '';
                    data.ManagementInfo.PlayersOptions = {
                        allowPlayerCreation: false,
                        allowCharacterCreation: false,
                    };
                }
                data.Version = '0.6.0';
            }
            if (data.Version === '0.6.0') {
                data.CharacterProfileStructure.forEach((item) => {
                    item.playerAccess = 'hidden';
                });
                data.PlayerProfileStructure.forEach((item) => {
                    item.playerAccess = 'hidden';
                });
                data.Version = '0.6.1';
            }
            if (data.Version === '0.6.1') {
                data.CharacterProfileStructure.forEach((item) => {
                    item.showInRoleGrid = false;
                });
                data.PlayerProfileStructure.forEach((item) => {
                    item.showInRoleGrid = false;
                });
                const beginStr = JSON.stringify(['begin']);
                data.Log = data.Log.map((el) => { el.push(beginStr); return el; });
                const oldRelations = data.Relations;
                const triplets = R.toPairs(oldRelations).map(pair => R.toPairs(pair[1]).map(R.prepend(pair[0])));
                const acc2 = R.unnest(triplets).reduce((acc, triplet) => {
                    const key = JSON.stringify([triplet[0], triplet[1]].sort());
                    if (acc[key] === undefined) {
                        acc[key] = {
                            [triplet[0]]: triplet[2],
                            [triplet[1]]: '',
                            starter: triplet[0],
                            ender: triplet[1],
                        };
                    } else {
                        // eslint-disable-next-line prefer-destructuring
                        acc[key][triplet[0]] = triplet[2];
                    }
                    return acc;
                }, {});

                data.Relations = R.values(acc2).map(R.merge({
                    origin: '',
                    starterTextReady: false,
                    enderTextReady: false,
                    essence: []
                }));

                data.Version = '0.6.2';
            }
            if (data.Version === '0.6.2') {
                data.Gears = {
                    nodes: [],
                    edges: [],
                    settings: {
                        physicsEnabled: false,
                        showNotes: false,
                    }
                }
                data.Version = '0.7.0';
            }
            if (data.Version === '0.7.0') {
                data.Sliders = [];
                data.Version = '0.7.2';
            }
            
            return data;
        };
    }
    callback(Migrator);
})(api => ((typeof exports === 'undefined') ? api((this.Migrator = {}), R) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/*global
 // Utils
 */

'use strict';

/* eslint-disable func-names */

((callback) => {
    let makeProfileStructureItemSchema;

    function Schema(exports, R, CommonUtils, Constants) {
        exports.getSchema = function (base) {
            const schema = {
                title: 'Larpwriter Toolkit NIMS base',
                description: 'Larpwriter Toolkit base schema.',
                type: 'object',
                definitions: {}
            };

            const Meta = getMetaSchema();
            const CharacterProfileStructure = getProfileSettingsSchema();
            const PlayerProfileStructure = CharacterProfileStructure;
            const Log = getLogSchema();
            const Characters = getProfileSchema(base.CharacterProfileStructure);
            const Players = getProfileSchema(base.PlayerProfileStructure);
            const ProfileBindings = getProfileBindings(base.Characters, base.Players);
            const Stories = getStoriesSchema(base.Characters);
            const Groups = getGroupsSchema(base.CharacterProfileStructure, base.PlayerProfileStructure);
            const InvestigationBoard = getInvestigationBoardSchema(base.Groups, base.InvestigationBoard);
            const Relations = getRelationsSchema(base.Characters, schema.definitions);
            const Gears = getGearsSchema();
            const Sliders = getSlidersSchema();
            let ManagementInfo = {};
            if (base.ManagementInfo) {
                ManagementInfo = getManagementInfoSchema(
                    base.ManagementInfo, base.Characters, base.Stories,
                    base.Groups, base.Players
                );
            }

            schema.properties = {
                Meta,
                CharacterProfileStructure,
                PlayerProfileStructure,
                Characters,
                Players,
                ProfileBindings,
                Stories,
                Version: {
                    type: 'string'
                },
                Log,
                Groups,
                InvestigationBoard,
                Settings: {},
                Gears,
                Sliders,
                Relations,
                ManagementInfo
            };

            schema.required = ['Meta', 'CharacterProfileStructure', 'PlayerProfileStructure', 'Version', 'Characters',
                'Players', 'ProfileBindings', 'Stories', 'Log', 'Groups', 'InvestigationBoard', 'Relations', 'Gears', 'Sliders'];
            schema.additionalProperties = false;

            schema.moduleList = R.keys(schema.properties);
            schema.moduleDeps = [
                ['InvestigationBoard', 'Groups'],
                ['Groups', 'CharacterProfileStructure'],
                ['Groups', 'PlayerProfileStructure'],
                ['Players', 'PlayerProfileStructure'],
                ['Characters', 'CharacterProfileStructure'],

                ['ManagementInfo', 'Groups'],
                ['ManagementInfo', 'Players'],
                ['ManagementInfo', 'Stories'],
                ['ManagementInfo', 'Characters'],
                ['ProfileBindings', 'Players'],

                ['ProfileBindings', 'Characters'],
                ['Relations', 'Characters'],
                ['Stories', 'Characters'],
            ];

            return schema;
        };

        function getMetaSchema() {
            return {
                title: 'Meta',
                description: 'Contains meta data for game: name, description, dates and saving time.',
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        description: 'Game name'
                    },
                    date: {
                        type: 'string',
                        description: 'Time of starting game in game universe.'
                    },
                    preGameDate: {
                        type: 'string',
                        description: 'Time of starting pregame events in game universe.'
                    },
                    description: {
                        type: 'string',
                        description: 'Description text for game.'
                    },
                    saveTime: {
                        type: 'string',
                        description: 'Stringified date of last database saving.'
                    }
                },
                required: ['name', 'date', 'preGameDate', 'description', 'saveTime'],
                additionalProperties: false
            };
        }

        function getProfileSettingsSchema() {
            return {
                title: 'CharacterProfileStructure',
                description: 'Describes character profile settings.',
                type: 'array',
                items: {
                    oneOf: [{
                        type: 'object',
                        properties: {
                            name: {
                                type: 'string'
                            },
                            type: {
                                type: 'string',
                                enum: ['string', 'text', 'enum', 'multiEnum']
                            },
                            value: {
                                type: ['string']
                            },
                            doExport: {
                                type: 'boolean'
                            },
                            showInRoleGrid: {
                                type: 'boolean'
                            },
                            playerAccess: {
                                type: 'string',
                                enum: ['write', 'readonly', 'hidden']
                            },
                        },
                        required: ['name', 'type', 'value', 'doExport', 'playerAccess', 'showInRoleGrid'],
                        additionalProperties: false
                    }, {
                        type: 'object',
                        properties: {
                            name: {
                                type: 'string'
                            },
                            type: {
                                type: 'string',
                                enum: ['number']
                            },
                            value: {
                                type: ['number']
                            },
                            doExport: {
                                type: 'boolean'
                            },
                            showInRoleGrid: {
                                type: 'boolean'
                            },
                            playerAccess: {
                                type: 'string',
                                enum: ['write', 'readonly', 'hidden']
                            },
                        },
                        required: ['name', 'type', 'value', 'doExport', 'playerAccess', 'showInRoleGrid'],
                        additionalProperties: false
                    }, {
                        type: 'object',
                        properties: {
                            name: {
                                type: 'string'
                            },
                            type: {
                                type: 'string',
                                enum: ['checkbox']
                            },
                            value: {
                                type: ['boolean']
                            },
                            doExport: {
                                type: 'boolean'
                            },
                            showInRoleGrid: {
                                type: 'boolean'
                            },
                            playerAccess: {
                                type: 'string',
                                enum: ['write', 'readonly', 'hidden']
                            },
                        },
                        required: ['name', 'type', 'value', 'doExport', 'playerAccess', 'showInRoleGrid'],
                        additionalProperties: false
                    }]
                }
            };
        }

        function getLogSchema() {
            return {
                type: 'array',
                items: {
                    type: 'array',
                    items: {
                        type: 'string',
                    },
                    minItems: 5,
                    maxItems: 5
                }
            };
        }
        
        function getSlidersSchema() {
            return {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        top: {
                            type: 'string'
                        },
                        bottom: {
                            type: 'string'
                        },
                        value: {
                            type: 'integer',
                            minimum: -10,
                            maximum: 10,
                        },
                    },
                    required: ['name', 'top', 'bottom', 'value'],
                    additionalProperties: false
                }
            };
        }
        
        function getGearsSchema() {
            return {
                type: 'object',
                properties: {
                    nodes: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                id: {
                                    type: 'string'
                                },
                                x: {
                                    type: 'number'
                                },
                                y: {
                                    type: 'number'
                                },
                                label: {
                                    type: 'string'
                                },
                                name: {
                                    type: 'string'
                                },
                                group: {
                                    type: 'string'
                                },
                                notes: {
                                    type: 'string'
                                },
                                shape: {
                                    type: 'string'
                                },
                            },
                            required: ['id', 'x', 'y', 'label', 'name', 'group', 'notes', 'shape'],
                            additionalProperties: false
                        },
                    },
                    edges: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                id: {
                                    type: 'string'
                                },
                                from: {
                                    type: 'string'
                                },
                                to: {
                                    type: 'string'
                                },
                                label: {
                                    type: 'string'
                                },
                                arrows: {
                                    type: 'string'
                                }
                             },
                            required: ['id', 'from', 'to', 'label', 'arrows'],
                            additionalProperties: false
                        },
                    },
                    settings: {
                        type: 'object',
                        properties: {
                            physicsEnabled: {
                                type: 'boolean'
                            },
                            showNotes: {
                                type: 'boolean'
                            }
                        },
                        required: ['physicsEnabled', 'showNotes'],
                        additionalProperties: false
                    },
                },
                required: ['nodes', 'edges', 'settings'],
                additionalProperties: false
            };
        }

        function getInvestigationBoardSchema(groups, investigationBoard) {
            const ibGroupNames = Object.keys(investigationBoard.groups);
            const relGroupNames = ibGroupNames.map(groupName => `group-${groupName}`);
            const resourceNames = Object.keys(investigationBoard.resources);
            const relResourceNames = resourceNames.map(resourceName => `resource-${resourceName}`);

            const relationSetSchema = {
                type: 'object',
                properties: {},
                additionalProperties: false
            };
            relGroupNames.forEach((relGroupName) => {
                relationSetSchema.properties[relGroupName] = {
                    type: 'string'
                };
            });
            relResourceNames.forEach((relResourceName) => {
                relationSetSchema.properties[relResourceName] = {
                    type: 'string'
                };
            });

            const relationsSchema = {
                type: 'object',
                properties: {},
                additionalProperties: false
            };
            if (relGroupNames.length !== 0) {
                relationsSchema.required = relGroupNames;
            }

            relGroupNames.forEach((relGroupNames2) => {
                relationsSchema.properties[relGroupNames2] = relationSetSchema;
            });

            const resourcesSchema = {
                type: 'object',
                properties: {},
                additionalProperties: false
            };

            resourceNames.forEach((resourceName) => {
                resourcesSchema.properties[resourceName] = {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string',
                            enum: [resourceName]
                        }
                    },
                    required: ['name'],
                    additionalProperties: false
                };
            });

            const groupsSchema = {
                type: 'object',
                properties: {},
                additionalProperties: false
            };
            const groupNames = Object.keys(groups);
            groupNames.forEach((groupName) => {
                groupsSchema.properties[groupName] = {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string',
                            enum: [groupName]
                        },
                        notes: {
                            type: 'string'
                        }
                    },
                    required: ['name', 'notes'],
                    additionalProperties: false
                };
            });
            const schema = {
                type: 'object',
                properties: {
                    groups: groupsSchema,
                    resources: resourcesSchema,
                    relations: relationsSchema
                },
                required: ['groups', 'resources', 'relations'],
                additionalProperties: false
            };
            return schema;
        }

        function getGroupsSchema(characterProfileSettings, playerProfileSettings) {
            let filterItems = [];
            const staticStringTemplate = {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        enum: [] // enum can't be empty, it is necessary to populate it
                    },
                    type: {
                        type: 'string',
                        enum: ['string']
                    },
                    regexString: {
                        type: 'string',
                        minLength: 0
                    }
                },
                required: ['name', 'type', 'regexString'],
                additionalProperties: false
            };

            const assocFunc = R.assocPath(['properties', 'name', 'enum']);
            filterItems.push(assocFunc([Constants.CHAR_NAME], R.clone(staticStringTemplate)));
            filterItems.push(assocFunc([Constants.CHAR_OWNER], R.clone(staticStringTemplate)));
            filterItems.push(assocFunc([Constants.PLAYER_NAME], R.clone(staticStringTemplate)));
            filterItems.push(assocFunc([Constants.PLAYER_OWNER], R.clone(staticStringTemplate)));

            filterItems = filterItems.concat(characterProfileSettings
                .map(makeProfileStructureItemSchema(Constants.CHAR_PREFIX)));
            filterItems = filterItems.concat(playerProfileSettings
                .map(makeProfileStructureItemSchema(Constants.PLAYER_PREFIX)));

            R.keys(R.fromPairs(Constants.summaryStats)).forEach((item) => {
                filterItems.push({
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string',
                            enum: [Constants.SUMMARY_PREFIX + item]
                        },
                        type: {
                            type: 'string',
                            enum: ['number']
                        },
                        num: {
                            type: 'number'
                        },
                        condition: {
                            type: 'string',
                            enum: ['greater', 'lesser', 'equal']
                        }
                    },
                    required: ['name', 'type', 'num', 'condition'],
                    additionalProperties: false
                });
            });

            const groupProperties = {
                name: {
                    type: 'string'
                },
                masterDescription: {
                    type: 'string'
                },
                characterDescription: {
                    type: 'string'
                },
                filterModel: {
                    type: 'array',
                    items: {
                        oneOf: filterItems
                    }
                },
                doExport: {
                    type: 'boolean'
                }
            };
            const schema = {
                type: 'object',
                additionalProperties: {
                    type: 'object',
                    properties: groupProperties,
                    required: Object.keys(groupProperties),
                    additionalProperties: false
                }
            };
            return schema;
        }

        makeProfileStructureItemSchema = R.curry((prefix, item) => {
            const data = {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        enum: [prefix + item.name]
                    },
                    type: {
                        type: 'string',
                        enum: [item.type]
                    },
                },
                required: ['name', 'type'],
                additionalProperties: false
            };

            let properties;
            switch (item.type) {
            case 'text':
            case 'string':
                data.properties.regexString = {
                    type: 'string',
                    minLength: 0
                };
                data.required.push('regexString');
                break;
            case 'number':
                data.properties.num = {
                    type: 'number'
                };
                data.properties.condition = {
                    type: 'string',
                    enum: ['greater', 'lesser', 'equal']
                };
                data.required.push('num');
                data.required.push('condition');
                break;
            case 'checkbox':
                data.properties.selectedOptions = {
                    type: 'object',
                    properties: {
                        false: {},
                        true: {}
                    },
                    additionalProperties: false
                };
                data.required.push('selectedOptions');
                break;
            case 'enum':
                properties = item.value.split(',').reduce((result, item2) => {
                    result[item2] = {};
                    return result;
                }, {});
                data.properties.selectedOptions = {
                    type: 'object',
                    properties,
                    additionalProperties: false
                };
                data.required.push('selectedOptions');
                break;
            case 'multiEnum':
                data.properties.condition = {
                    type: 'string',
                    enum: ['every', 'equal', 'some']
                };
                properties = item.value.split(',').reduce((result, item2) => {
                    result[item2] = {};
                    return result;
                }, {});
                data.properties.selectedOptions = {
                    type: 'object',
                    properties,
                    additionalProperties: false
                };
                data.required.push('selectedOptions');
                data.required.push('condition');
                break;
            default:
                console.log(`Unexpected type ${item.type}`);
            }
            return data;
        });

        function getProfileSchema(profileSettings) {
            const characterProperties = {
                name: {
                    type: 'string'
                }
            };
            let value;
            profileSettings.forEach((item) => {
                switch (item.type) {
                case 'text':
                case 'string':
                case 'multiEnum': // it is hard to check multiEnum with schema. There is second check in consistency checker.
                    value = {
                        type: 'string'
                    };
                    break;
                case 'checkbox':
                    value = {
                        type: 'boolean'
                    };
                    break;
                case 'number':
                    value = {
                        type: 'number'
                    };
                    break;
                case 'enum':
                    value = {
                        type: 'string',
                        enum: item.value.split(',').map(R.trim)
                    };
                    break;
                default:
                    console.log(`Unexpected type ${item.type}`);
                }
                characterProperties[item.name] = value;
            });

            //        console.log(characterProperties);

            const schema = {
                type: 'object',
                additionalProperties: {
                    type: 'object',
                    properties: characterProperties,
                    required: Object.keys(characterProperties),
                    additionalProperties: false
                }
            };
            return schema;
        }

        function getProfileBindings(characters, players) {
            let playerNames = Object.keys(players);
            if (playerNames.length === 0) {
                playerNames = ['123'];
            }

            const names = `^(${R.keys(characters).map(CommonUtils.escapeRegExp).join('|')})$`;
            const schema = {
                type: 'object',
                additionalProperties: false,
                patternProperties: {}
            };
            schema.patternProperties[names] = {
                type: 'string',
                enum: playerNames
            };

            return schema;
        }

        function getStoriesSchema(characters) {
            const charNames = Object.keys(characters);

            const eventCharacter = {
                type: 'object',
                properties: {
                    text: {
                        type: 'string'
                    },
                    time: {
                        type: 'string'
                    },
                    ready: {
                        type: 'boolean'
                    }
                },
                required: ['text', 'time'],
                additionalProperties: false
            };

            const eventSchema = {
                type: 'object',
                properties: {
                    name: {
                        type: 'string'
                    },
                    text: {
                        type: 'string'
                    },
                    time: {
                        type: 'string'
                    },
                    characters: {
                        type: 'object',
                        // depends on story but for simplicity we check charNames only
                        properties: charNames.reduce((obj, char) => {
                            obj[char] = eventCharacter;
                            return obj;
                        }, {}),
                        additionalProperties: false
                    }
                },
                required: ['name', 'text', 'time', 'characters'],
                additionalProperties: false
            };


            const storyCharacterSchema = {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        enum: charNames
                    },
                    inventory: {
                        type: 'string'
                    },
                    activity: {
                        type: 'object',
                        properties: {
                            active: {
                                type: 'boolean'
                            },
                            follower: {
                                type: 'boolean'
                            },
                            defensive: {
                                type: 'boolean'
                            },
                            passive: {
                                type: 'boolean'
                            },
                        },
                        additionalProperties: false
                    },
                },
                required: ['name', 'inventory', 'activity'],
                additionalProperties: false
            };

            const storySchema = {
                type: 'object',
                properties: {
                    name: {
                        type: 'string'
                    },
                    story: {
                        type: 'string'
                    },
                    characters: {
                        type: 'object',
                        properties: charNames.reduce((obj, char) => {
                            obj[char] = storyCharacterSchema;
                            return obj;
                        }, {}),
                        additionalProperties: false
                    },
                    events: {
                        type: 'array',
                        items: eventSchema
                    }
                },
                required: ['name', 'story', 'characters', 'events'],
                additionalProperties: false
            };


            const storiesSchema = {
                type: 'object',
                additionalProperties: storySchema
            };

            return storiesSchema;
        }


        function getManagementInfoSchema(managementInfo, characters, stories, groups, players) {
            let charNames = Object.keys(characters);
            let storyNames = Object.keys(stories);
            let groupNames = Object.keys(groups);
            let playerNames = Object.keys(players);
            const userNames = Object.keys(managementInfo.UsersInfo);
            // enum can't be empty, ask about it here
            // http://stackoverflow.com/questions/37635675/how-to-validate-empty-array-of-strings-with-ajv
            if (storyNames.length === 0) {
                storyNames = ['123'];
            }
            if (charNames.length === 0) {
                charNames = ['123'];
            }
            if (groupNames.length === 0) {
                groupNames = ['123'];
            }
            if (playerNames.length === 0) {
                playerNames = ['123'];
            }

            const userSchema = {
                type: 'object',
                properties: {
                    name: {
                        type: 'string'
                    },
                    stories: {
                        type: 'array',
                        items: {
                            type: 'string',
                            enum: storyNames
                        },
                        minItems: 0
                    },
                    characters: {
                        type: 'array',
                        items: {
                            type: 'string',
                            enum: charNames
                        }
                    },
                    groups: {
                        type: 'array',
                        items: {
                            type: 'string',
                            enum: groupNames
                        }
                    },
                    players: {
                        type: 'array',
                        items: {
                            type: 'string',
                            enum: playerNames
                        }
                    },
                    salt: {
                        type: 'string'
                    },
                    hashedPassword: {
                        type: 'string'
                    },
                },
                required: ['name', 'stories', 'characters', 'groups', 'players', 'salt', 'hashedPassword'],
                additionalProperties: false
            };
            const playerSchema = {
                type: 'object',
                properties: {
                    name: {
                        type: 'string'
                    },
                    salt: {
                        type: 'string'
                    },
                    hashedPassword: {
                        type: 'string'
                    },
                },
                required: ['name', 'salt', 'hashedPassword'],
                additionalProperties: false
            };
            const playersOptionsSchema = {
                type: 'object',
                properties: {
                    allowPlayerCreation: {
                        type: 'boolean'
                    },
                    allowCharacterCreation: {
                        type: 'boolean'
                    },
                },
                required: ['allowPlayerCreation', 'allowCharacterCreation'],
                additionalProperties: false
            };

            const managementInfoSchema = {
                type: 'object',
                properties: {
                    UsersInfo: {
                        type: 'object',
                        additionalProperties: userSchema
                    },
                    PlayersInfo: {
                        type: 'object',
                        additionalProperties: playerSchema
                    },
                    admin: {
                        type: 'string',
                        enum: userNames
                    },
                    editor: {
                        type: ['string', 'null'],
                        enum: userNames.concat(null)
                    },
                    adaptationRights: {
                        type: 'string',
                        enum: Constants.adaptationRightsModes
                    },
                    WelcomeText: {
                        type: 'string',
                    },
                    PlayersOptions: playersOptionsSchema,
                },
                required: ['UsersInfo', 'PlayersInfo', 'admin', 'editor', 'adaptationRights', 'WelcomeText', 'PlayersOptions'],
                additionalProperties: false
            };

            return managementInfoSchema;
        }

        function getRelationsSchema(Characters, definitions) {
            let chars = R.keys(Characters);
            const names = `^(${R.keys(Characters).map(CommonUtils.escapeRegExp).join('|')})$`;
            if (chars.length === 0) {
                chars = ['123'];
            }

            const schema = {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        origin: {
                            type: 'string'
                        },
                        starterTextReady: {
                            type: 'boolean'
                        },
                        enderTextReady: {
                            type: 'boolean'
                        },
                        essence: {
                            type: 'array',
                            items: {
                                type: 'string',
                                enum: Constants.relationEssences
                            }
                        },
                        starter: {
                            type: 'string',
                            enum: chars
                        },
                        ender: {
                            type: 'string',
                            enum: chars
                        },
                    },
                    required: ['origin', 'starterTextReady', 'enderTextReady', 'essence', 'starter', 'ender'],
                    patternProperties: {
                        [names]: {
                            type: 'string',
                        }
                    },
                    additionalProperties: false,
                    minProperties: 8,
                    maxProperties: 8
                }
            };
            return schema;
        }
    }

    callback(Schema);
})(api => ((typeof exports === 'undefined') ? api((this.Schema = {}), R, CommonUtils, Constants) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function accessManagerAPI(LocalDBMS, opts) {
        const {
            R, addListener, Errors, Constants, CU, PC
        } = opts;

        LocalDBMS.prototype.getManagementInfo = function (callback) {
            const { ManagementInfo } = this.database;
            const usersInfo = CU.clone(R.keys(ManagementInfo.UsersInfo).reduce((result, user) => {
                result[user] = R.pick(['characters', 'groups', 'stories', 'players'], ManagementInfo.UsersInfo[user]);
                return result;
            }, {}));
            callback(null, {
                usersInfo,
                admin: ManagementInfo.admin,
                editor: ManagementInfo.editor,
                adaptationRights: ManagementInfo.adaptationRights
            });
        };

        LocalDBMS.prototype.assignAdmin = function (name, callback) {
            PC.precondition(
                PC.entityExistsCheck(name, R.keys(this.database.ManagementInfo.UsersInfo)), callback,
                () => {
                    this.database.ManagementInfo.admin = name;
                    this.publishPermissionsUpdate();
                    callback();
                }
            );
        };
        LocalDBMS.prototype.assignEditor = function (name, callback) {
            PC.precondition(
                PC.entityExistsCheck(name, R.keys(this.database.ManagementInfo.UsersInfo)), callback,
                () => {
                    this.database.ManagementInfo.editor = name;
                    this.publishPermissionsUpdate();
                    callback();
                }
            );
        };
        LocalDBMS.prototype.removeEditor = function (callback) {
            this.database.ManagementInfo.editor = null;
            this.publishPermissionsUpdate();
            callback();
        };
        LocalDBMS.prototype.changeAdaptationRightsMode = function (mode, callback) {
            const chain = [PC.isString(mode), PC.elementFromEnum(mode, Constants.adaptationRightsModes)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                this.database.ManagementInfo.adaptationRights = mode;
                this.publishPermissionsUpdate();
                callback();
            });
        };

        LocalDBMS.prototype.removeOrganizer = function (name, callback) {
            const chain = [PC.isString(name), 
                PC.entityExistsCheck(name, R.keys(this.database.ManagementInfo.UsersInfo)),
                PC.notEquals(name, this.database.ManagementInfo.admin)];
            PC.precondition(
                    PC.chainCheck(chain), callback,
                () => {
                    delete this.database.ManagementInfo.UsersInfo[name];
                    if(this.database.ManagementInfo.editor === name){
                        this.database.ManagementInfo.editor = null;
                    }
                    this.publishPermissionsUpdate();
                    callback();
                }
            );
        };

        LocalDBMS.prototype.removePermission = function (userName, names, callback) {
            const { ManagementInfo } = this.database;
            Object.keys(names).forEach((entity) => {
                if (names[entity].length !== 0) {
                    ManagementInfo.UsersInfo[userName][entity] = ManagementInfo.UsersInfo[userName][entity]
                        .filter(charName => names[entity].indexOf(charName) === -1);
                }
            });
            this.publishPermissionsUpdate();
            callback();
        };

        LocalDBMS.prototype.assignPermission = function (userName, names, callback) {
            const { ManagementInfo } = this.database;
            Object.keys(names).forEach((entity) => {
                if (names[entity].length !== 0) {
                    names[entity].forEach((charName) => {
                        if (ManagementInfo.UsersInfo[userName][entity].indexOf(charName) === -1) {
                            ManagementInfo.UsersInfo[userName][entity].push(charName);
                        }
                    });

                    Object.keys(ManagementInfo.UsersInfo).forEach((name) => {
                        if (name === userName) {
                            return;
                        }

                        ManagementInfo.UsersInfo[name][entity] = ManagementInfo.UsersInfo[name][entity]
                            .filter(charName => names[entity].indexOf(charName) === -1);
                    });
                }
            });
            this.publishPermissionsUpdate();
            callback();
        };

        LocalDBMS.prototype.getPlayerLoginsArray = function (callback) {
            callback(null, R.keys(this.database.ManagementInfo.PlayersInfo));
        };

        LocalDBMS.prototype.removePlayerLogin = function (userName, callback) {
            PC.precondition(
                PC.entityExistsCheck(userName, R.keys(this.database.ManagementInfo.PlayersInfo)), callback,
                () => {
                    delete this.database.ManagementInfo.PlayersInfo[userName];
                    if (callback) callback();
                }
            );
        };

        LocalDBMS.prototype.getWelcomeText = function (callback) {
            callback(null, this.database.ManagementInfo.WelcomeText);
        };

        LocalDBMS.prototype.setWelcomeText = function (text, callback) {
            PC.precondition(PC.isString(text), callback, () => {
                this.database.ManagementInfo.WelcomeText = text;
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.getPlayersOptions = function (callback) {
            callback(null, CU.clone(this.database.ManagementInfo.PlayersOptions));
        };

        LocalDBMS.prototype.setPlayerOption = function (name, value, callback) {
            const chain = [PC.isString(name), PC.elementFromEnum(name, Constants.playersOptionTypes),
                PC.isBoolean(value)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                this.database.ManagementInfo.PlayersOptions[name] = value;
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.createOrganizer = function (name, password, callback) {
            callback(new Errors.ValidationError('admins-function-must-be-overridden-on-server', ['createOrganizer']));
        };

        LocalDBMS.prototype.changeOrganizerPassword = function (userName, newPassword, callback) {
            callback(new Errors.ValidationError('admins-function-must-be-overridden-on-server', ['changeOrganizerPassword']));
        };

        LocalDBMS.prototype.publishPermissionsUpdate = function (callback) {
            callback(new Errors.ValidationError('admins-function-must-be-overridden-on-server', ['publishPermissionsUpdate']));
        };

        LocalDBMS.prototype.createPlayer = function (userName, password, callback) {
            callback(new Errors.ValidationError('admins-function-must-be-overridden-on-server', ['createPlayer']));
        };

        LocalDBMS.prototype.createPlayerLogin = function (userName, password, callback) {
            callback(new Errors.ValidationError('admins-function-must-be-overridden-on-server', ['createPlayerLogin']));
        };

        LocalDBMS.prototype.changePlayerPassword = function (userName, password, callback) {
            callback(new Errors.ValidationError('admins-function-must-be-overridden-on-server', ['changePlayerPassword']));
        };

        LocalDBMS.prototype.getPlayerProfileInfo = function (callback) {
            callback(new Errors.ValidationError('admins-function-must-be-overridden-on-server', ['getPlayerProfileInfo']));
        };

        LocalDBMS.prototype.createCharacterByPlayer = function (characterName, callback) {
            callback(new Errors.ValidationError('admins-function-must-be-overridden-on-server', ['createCharacterByPlayer']));
        };

        function _renameProfile(type, fromName, toName) {
            if (type === 'character') return;
            if (this.database.ManagementInfo !== undefined) {
                const playersInfo = this.database.ManagementInfo.PlayersInfo;
                if (playersInfo[fromName] !== undefined) {
                    playersInfo[toName] = playersInfo[fromName];
                    playersInfo[toName].name = toName;
                    delete playersInfo[fromName];
                }
            }
        }

        addListener('renameProfile', _renameProfile);

        function _removeProfile(type, characterName) {
            if (type === 'character') return;
            if (this.database.ManagementInfo !== undefined) {
                const playersInfo = this.database.ManagementInfo.PlayersInfo;
                if (playersInfo[characterName] !== undefined) {
                    delete playersInfo[characterName];
                }
            }
        }

        addListener('removeProfile', _removeProfile);
    }

    callback2(accessManagerAPI);
})(api => (typeof exports === 'undefined' ? (this.accessManagerAPI = api) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function baseAPI(LocalDBMS, opts) {
        const {
            Migrator, EventEmitter, Constants, CU, PC
        } = opts;

        LocalDBMS.prototype._init = function (listeners) {
            this.ee = new EventEmitter();
            const that = this;
            Object.keys(listeners).forEach((triggerName) => {
                listeners[triggerName].forEach((listener) => {
                    that.ee.on(triggerName, listener.bind(that));
                });
            });
        };

        LocalDBMS.prototype.getDatabase = function (callback) {
            this.database.Meta.saveTime = new Date().toString();
            callback(null, CU.clone(this.database));
        };

        LocalDBMS.prototype.setDatabase = function (database, callback) {
            try {
                this.database = Migrator.migrate(database);
            } catch (err) {
                callback(err);
                return;
            }
            if (callback) callback();
        };

        LocalDBMS.prototype.getMetaInfo = function (callback) {
            callback(null, CU.clone(this.database.Meta));
        };
//  [
//      {
//          name: 'name',
//          check: [{
//              type: 'isString'
//          }, {
//              type: 'elementFromEnum',
//              arr: Constants.metaInfoStrings
//          }]
//      },
//      {
//          name: 'value',
//          check: [{
//              type: 'isString'
//          }]
//      },
//  ]
        // overview
        LocalDBMS.prototype.setMetaInfoString = function (name, value, callback) {
            const chain = PC.chainCheck([PC.isString(name), PC.elementFromEnum(name, Constants.metaInfoStrings),
                PC.isString(value)]);
            PC.precondition(chain, callback, () => {
                this.database.Meta[name] = value;
                if (callback) callback();
            });
        };
        
//  [
//      {
//          name: 'name',
//          check: [{
//              type: 'isString'
//          }, {
//              type: 'elementFromEnum',
//              arr: Constants.metaInfoDates
//          }]
//      },
//      {
//          name: 'value',
//          check: [{
//              type: 'isString'
//          }, {
//              type: 'isDate',
//          }]
//      },
//  ]
        LocalDBMS.prototype.setMetaInfoDate = function (name, value, callback) {
            const chain = PC.chainCheck([PC.isString(name), PC.elementFromEnum(name, Constants.metaInfoDates),
                PC.isString(value)]);
            PC.precondition(chain, callback, () => {
                this.database.Meta[name] = value;
                if (callback) callback();
            });
        };
    }

    callback2(baseAPI);
})(api => (typeof exports === 'undefined' ? (this.baseAPI = api) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function briefingExportAPI(LocalDBMS, opts) {
        const {
            R, Constants, dbmsUtils, CU, PC
        } = opts;

        const check = (selChars, selStories, exportOnlyFinishedStories, database) => {
            const charsCheck = PC.eitherCheck(PC.chainCheck([PC.isArray(selChars),
                PC.entitiesExist(selChars, R.keys(database.Characters))]), PC.isNil(selChars));
            const storiesCheck = PC.eitherCheck(PC.chainCheck([PC.isArray(selStories),
                PC.entitiesExist(selStories, R.keys(database.Stories))]), PC.isNil(selStories));
            return PC.chainCheck([charsCheck, storiesCheck, PC.isBoolean(exportOnlyFinishedStories)]);
        };

        let _getBriefingData, _makeProfileInfo, _makeRelationsInfo, _makeCharInventory,
            _getProfileInfoNotEmpty, _getSimpleProfileInfoObject, _getSplittedProfileInfoObject, _getProfileInfoArray,
            _getStoriesInfo, _getEventsInfo, _getStoryEventsInfo, _makeEventInfo, _splitText;
        
//  [
//      {
//          name: 'selCharacters',
//          check: [{
//              type: 'either',
//              or: [{
//                  type: 'isNil'
//              }, [{
//                      type: 'isArray',
//                      subType: 'string'
//                  }, {
//                      type: 'entitiesExist',
//                      arr: (db) => R.keys(db.Characters)
//                  }]
//              ]
//          }]
//      },
//      {
//          name: 'selStories',
//          check: [{
//              type: 'either',
//              or: [{
//                  type: 'isNil'
//              }, [{
//                  type: 'isArray',
//                  subType: 'string'
//              }, {
//                  type: 'entitiesExist',
//                  arr: (db) => R.keys(db.Stories)
//              }]
//              ]
//          }]
//      },
//      {
//          name: 'exportOnlyFinishedStories',
//          check: 
//              type: 'isBoolean'
//          }]
//      }
//  ]
        LocalDBMS.prototype.getBriefingData = function (
            selCharacters, selStories, exportOnlyFinishedStories,
            callback
        ) {
            PC.precondition(
                check(selCharacters, selStories, exportOnlyFinishedStories, this.database), callback,
                () => {
                    const that = this;
                    selCharacters = selCharacters || R.keys(this.database.Characters);
                    selStories = selStories || R.keys(this.database.Stories);
                    that.getAllCharacterGroupTexts((err, groupTexts) => {
                        if (err) { callback(err); return; }
                        _getBriefingData(
                            that.database, selCharacters, selStories, groupTexts, exportOnlyFinishedStories,
                            callback
                        );
                    });
                }
            );
        };

        _getBriefingData = (
            database, selectedCharacters, selectedStories, groupTexts, exportOnlyFinishedStories,
            callback
        ) => {
            const charArray = selectedCharacters.map((charName) => {
                groupTexts[charName].forEach((groupText) => {
                    groupText.splittedText = _splitText(groupText.text);
                });
                let dataObject = {
                    gameName: database.Meta.name,
                    charName,
                    inventory: _makeCharInventory(database, charName),
                    storiesInfo: _getStoriesInfo(database, charName, selectedStories, exportOnlyFinishedStories),
                    eventsInfo: _getEventsInfo(database, charName, selectedStories, exportOnlyFinishedStories),
                    groupTexts: groupTexts[charName],
                    relations: _makeRelationsInfo(dbmsUtils._getKnownCharacters(database, charName), database, charName)
                };

                dataObject = R.merge(dataObject, _makeProfileInfo(charName, 'character', database));

                const playerName = database.ProfileBindings[charName];
                if (playerName !== undefined) {
                    dataObject = R.merge(dataObject, _makeProfileInfo(playerName, 'player', database));
                    dataObject.playerName = playerName;
                }

                return dataObject;
            });

            charArray.sort(CU.charOrdAFactory(R.prop('charName')));
            callback(null, {
                briefings: charArray,
                gameName: database.Meta.name
            });
        };

        _makeProfileInfo = (profileName, profileType, database) => {
            let profileStructure, prefix, profile;
            if (profileType === 'character') {
                profileStructure = database.CharacterProfileStructure;
                prefix = 'profileInfo';
                profile = database.Characters[profileName];
            } else if (profileType === 'player') {
                profileStructure = database.PlayerProfileStructure;
                prefix = 'playerInfo';
                profile = database.Players[profileName];
            } else {
                throw new Error(`Unexpected profile type ${profileType}`);
            }
            let dataObject = {};
            dataObject[`${prefix}Array`] = _getProfileInfoArray(profile, profileStructure);
            dataObject = R.merge(dataObject, _getSimpleProfileInfoObject(`${prefix}-`, profile, profileStructure));
            dataObject = R.merge(dataObject, _getSplittedProfileInfoObject(
                `${prefix}-splitted-`, profile,
                profileStructure
            ));
            dataObject = R.merge(dataObject, _getProfileInfoNotEmpty(`${prefix}-notEmpty-`, profile, profileStructure));
            return dataObject;
        };

        _makeRelationsInfo = (knownCharacters, database, charName) => {
            const relations = database.Relations.filter(R.has(charName));
            const exportInfo = relations.map( relation => {
                const charIsStarter = relation.starter === charName;
                const toCharacter = charIsStarter ? relation.ender: relation.starter;
                let obj = {
                    toCharacter,
                    text: relation[charName],
                    splittedText: _splitText(relation[charName]),
                    stories: R.keys(knownCharacters[charName] || {}).join(', ')
                };
                obj = R.merge(obj, _makeProfileInfo(toCharacter, 'character', database));
                return obj;
            });
            exportInfo.sort(CU.charOrdAFactory(R.prop('toCharacter')));
            return exportInfo;
        };

        _makeCharInventory = (database, charName) => R.values(database.Stories)
            .filter(story => !R.isNil(story.characters[charName]) && !R.isEmpty(story.characters[charName].inventory))
            .map(story => story.characters[charName].inventory).join(', ');

        const _processProfileInfo = R.curry((processor, prefix, profile, profileStructure) =>
            R.fromPairs(profileStructure.map(element => [prefix + element.name, processor(profile[element.name])])));

        _getProfileInfoNotEmpty = _processProfileInfo(el => String(el).length !== 0);
        _getSimpleProfileInfoObject = _processProfileInfo(el => (el));
        _getSplittedProfileInfoObject = _processProfileInfo(el => (_splitText(String(el))));

        _getProfileInfoArray = (profile, profileStructure) => {
            let value, splittedText;
            const filter = R.compose(R.equals(true), R.prop('doExport'));
            return profileStructure.filter(filter).map((element) => {
                value = profile[element.name];
                return {
                    itemName: element.name,
                    value,
                    splittedText: _splitText(String(value)),
                    notEmpty: String(value).length !== 0
                };
            });
        };

        _getStoriesInfo = (database, charName, selectedStories, exportOnlyFinishedStories) =>
            R.values(database.Stories).filter((story) => {
                if (!R.contains(story.name, selectedStories)) return false;
                if (exportOnlyFinishedStories) {
                    if (!dbmsUtils._isStoryFinished(database, story.name) ||
                        dbmsUtils._isStoryEmpty(database, story.name)) {
                        return false;
                    }
                }
                return story.characters[charName];
            }).map(story => ({
                storyName: story.name,
                eventsInfo: _getStoryEventsInfo(story, charName, database.Meta.date)
            })).sort(CU.charOrdAFactory(a => a.storyName.toLowerCase()));

        _getEventsInfo = (database, charName, selectedStories, exportOnlyFinishedStories) => {
            let eventsInfo = R.values(database.Stories).filter((story) => {
                if (!R.contains(story.name, selectedStories)) return false;
                if (exportOnlyFinishedStories) {
                    if (!dbmsUtils._isStoryFinished(database, story.name) ||
                            dbmsUtils._isStoryEmpty(database, story.name)) {
                        return false;
                    }
                }
                return story.characters[charName];
            }).map(story => _getStoryEventsInfo(story, charName, database.Meta.date));

            eventsInfo = eventsInfo.reduce((result, array) => result.concat(array), []);

            eventsInfo.sort(CU.eventsByTime);

            return eventsInfo;
        };

        _getStoryEventsInfo = (story, charName, defaultTime) =>
            story.events.filter(event => event.characters[charName])
                .map(_makeEventInfo(charName, story.name, defaultTime));

        _makeEventInfo = R.curry((charName, storyName, defaultTime, event) => {
            const eventInfo = {};
            if (event.characters[charName].text !== '') {
                eventInfo.text = event.characters[charName].text;
            } else {
                eventInfo.text = event.text;
            }
            eventInfo.splittedText = _splitText(eventInfo.text);
            eventInfo.time = event.time === '' ? defaultTime : event.time;
            if (event.characters[charName].time !== '') {
                eventInfo.displayTime = event.characters[charName].time;
            } else {
                eventInfo.displayTime = eventInfo.time;
            }
            eventInfo.eventName = event.name;
            eventInfo.storyName = storyName;
            return eventInfo;
        });

        _splitText = text => text.split('\n').map(string => ({ string }));
    }
    callback2(briefingExportAPI);
})(api => (typeof exports === 'undefined' ? (this.briefingExportAPI = api) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function consistencyCheckAPI(LocalDBMS, opts) {
        const {
            R, CommonUtils, Constants, dbmsUtils
        } = opts;
        const CU = CommonUtils;
        const validatorLib = opts.Ajv;
        const schemaBuilder = opts.Schema;

        LocalDBMS.prototype.getConsistencyCheckResult = function (callback) {
            let errors = [];

            let errors2 = [
                checkProfileStructureConsistency(this.database, 'character', 'CharacterProfileStructure'),
                checkProfileStructureConsistency(this.database, 'player', 'PlayerProfileStructure'),
                checkProfileConsistency(this.database, 'Characters', 'CharacterProfileStructure'),
                checkProfileConsistency(this.database, 'Players', 'PlayerProfileStructure'),
                checkProfileValueConsistency(this.database, 'Characters', 'CharacterProfileStructure'),
                checkProfileValueConsistency(this.database, 'Players', 'PlayerProfileStructure'),
                checkStoryCharactersConsistency(this.database),
                checkEventsCharactersConsistency(this.database),
                checkBindingsConsistency(this.database),
                checkRelationsConsistency(this.database)
            ];
            if (this.database.ManagementInfo) {
                errors2.push(checkObjectRightsConsistency(this.database));
                errors2.push(checkPlayerLoginConsistency(this.database));
            }

            errors2.forEach((module) => {
                module.errors = module.errors.map(R.apply(CU.strFormat));
            });
            errors = errors.concat(R.flatten(errors2.map(R.prop('errors'))));

            const schema = schemaBuilder.getSchema(this.database);
            const validator = validatorLib({ allErrors: true }); // options can be passed, e.g. {allErrors: true}
            const validate = validator.compile(schema);
            const valid = validate(this.database);
            if (!valid) {
                errors = errors.concat(validate.errors);

                errors2 = R.concat(errors2, schema.required.map((moduleName) => {
                    const validate2 = validator.compile(schema.properties[moduleName]);
                    const valid2 = validate2(this.database[moduleName]);
                    return {
                        module: moduleName,
                        errors: valid2 ? [] : validate2.errors
                    };
                }));
                if (this.database.ManagementInfo) {
                    const moduleName = 'ManagementInfo';
                    const validate2 = validator.compile(schema.properties[moduleName]);
                    const valid2 = validate2(this.database[moduleName]);
                    errors2.push( {
                        module: moduleName,
                        errors: valid2 ? [] : validate2.errors
                    });
                }
            }

            const details = R.mapObjIndexed(arr => R.flatten(arr.map(R.prop('errors'))), R.groupBy(R.prop('module'), errors2));

            callback(null, {
                errors,
                details,
                nodes: R.clone(schema.moduleList),
                edges: R.clone(schema.moduleDeps),
            });
        };

        const getErrorProcessor = callback => R.curry(R.compose(callback, CommonUtils.strFormat));

        function checkObjectRightsConsistency(data) {
            const errors = [];
            const entities = {
                characters: R.keys(data.Characters),
                stories: R.keys(data.Stories),
                groups: R.keys(data.Groups),
                players: R.keys(data.Players)
            };
            const types = R.keys(entities);

            R.values(data.ManagementInfo.UsersInfo).forEach((user) => {
                types.forEach((type) => {
                    const difference = R.difference(user[type], entities[type]);
                    if (difference.length !== 0) {
                        const msg = 'Object rights inconsistent, user entity is not exist: user {0}, entity {1}, type {2}';
                        errors.push([msg, [user.name, difference, type]]);
                    }
                });
            });
            return {
                module: 'ManagementInfo',
                errors
            };
        }

        function checkPlayerLoginConsistency(data) {
            const errors = [];
            const playerNames = R.values(data.Players).map(R.prop('name'));
            const loginNames = R.keys(data.ManagementInfo.PlayersInfo);

            const difference = R.difference(loginNames, playerNames);
            if (difference.length !== 0) {
                const msg = 'Player logins inconsistent, logins which have no player: logins {0}';
                errors.push([msg, [difference]]);
            }
            return {
                module: 'ManagementInfo',
                errors
            };
        }

        function checkEventsCharactersConsistency(data) {
            const errors = [];
            R.values(data.Stories).forEach((story) => {
                const storyCharacters = R.values(story.characters).map(R.prop('name'));
                story.events.forEach((event, i) => {
                    const eventCharacters = R.keys(event.characters);
                    const difference = R.difference(eventCharacters, storyCharacters);
                    if (difference.length !== 0) {
                        const msg = 'Event characters inconsistent, some character is not exist: story {0}, character {1}';
                        errors.push([msg, [`${story.name}-${i}-${event.name}`, difference]]);
                    }
                });
            });
            return {
                module: 'Stories',
                errors
            };
        }

        function checkBindingsConsistency(data) {
            const errors = [];
            R.toPairs(R.invert(data.ProfileBindings)).filter(pair => pair[1].length > 1).forEach((pair) => {
                const msg = 'Profile bindings inconsistent, player has multiple characters: player {0}, characters {1}';
                errors.push([msg, [pair[0], JSON.stringify(pair[1])]]);
            });
            return {
                module: 'ProfileBindings',
                errors
            };
        }

        function checkRelationsConsistency(data, callback) {
            const errors = [];
            data.Relations.filter(rel => rel[rel.starter] === undefined).forEach((rel) => {
                const msg = 'Relation inconsistent, starter is not from relation: starter {0}, relation {1}';
                errors.push([msg, [rel.starter, JSON.stringify(rel)]]);
            });
            data.Relations.filter(rel => rel[rel.ender] === undefined).forEach((rel) => {
                const msg = 'Relation inconsistent, ender is not from relation: ender {0}, relation {1}';
                errors.push([msg, [rel.ender, JSON.stringify(rel)]]);
            });

            const keys = data.Relations.map(dbmsUtils._rel2RelKey);
            const groups = R.groupBy(str => str, keys);
            R.values(groups).filter(R.pipe(R.length, R.gt(R.__, 1))).forEach((group) => {
                const msg = 'Relations inconsistent, duplicated relations with key: key {0}';
                errors.push([msg, [group[0]]]);
            });
            return {
                module: 'Relations',
                errors
            };
        }

        function checkStoryCharactersConsistency(data, callback) {
            const charNames = R.values(data.Characters).map(R.prop('name'));
            const errors = [];

            R.values(data.Stories).forEach((story) => {
                const storyCharactersInner = R.values(story.characters).map(R.prop('name'));
                const differenceInner = R.difference(storyCharactersInner, charNames);
                if (differenceInner.length !== 0) {
                    const msg = 'Story characters inconsistent, some character is not exist: story {0}, character {1}';
                    errors.push([msg, [story.name, differenceInner]]);
                }
                const storyCharactersOuter = R.keys(story.characters);
                const differenceOuter = R.symmetricDifference(storyCharactersInner, storyCharactersOuter);
                if (differenceOuter.length !== 0) {
                    const msg = 'Story characters inconsistent, inner and outer character name are inconsistent: story {0}, character {1}';
                    errors.push([msg, [story.name, differenceOuter]]);
                }
            });
            return {
                module: 'Stories',
                errors
            };
        }

        const isInconsistent = (charValue, type, profileItemValue) => {
            let values, charValues;
            switch (type) {
            case 'text':
            case 'string':
                return !R.is(String, charValue);
            case 'enum':
                if (!R.is(String, charValue)) {
                    return true;
                }
                values = profileItemValue.split(',').map(R.trim);
                return !R.contains(charValue.trim(), values);

            case 'multiEnum':
                if (!R.is(String, charValue)) {
                    return true;
                }
                values = profileItemValue === '' ? [] : profileItemValue.split(',').map(R.trim);
                charValues = charValue === '' ? [] : charValue.split(',').map(R.trim);
                return R.difference(charValues, values).length !== 0;

            case 'number':
                return !R.is(Number, charValue);
            case 'checkbox':
                return !R.is(Boolean, charValue);
            default:
                return true;
            }
        };

        function checkProfileValueConsistency(data, profiles, structure, callback) {
            const msg = 'Profile value inconsistency, item type is inconsistent: char {0}, item {1}, value {2}';
            const errors = [];

            R.values(data[profiles]).forEach((character) => {
                data[structure].forEach((profileItem) => {
                    if (isInconsistent(character[profileItem.name], profileItem.type, profileItem.value)) {
                        errors.push([msg, [character.name, profileItem.name, character[profileItem.name]]]);
                    }
                });
            });
            return {
                module: profiles,
                errors
            };
        }

        function checkProfileConsistency(data, profiles, structure) {
            const profileItems = data[structure].map(R.prop('name'));
            const errors = [];

            R.values(data[profiles]).forEach((profile) => {
                const charItems = R.keys(profile).filter(R.compose(R.not, R.equals('name')));
                const difference = R.symmetricDifference(charItems, profileItems);
                if (difference.length !== 0) {
                    if (charItems.length !== profileItems.length) {
                        const msg = 'Character profile inconsistent, lengths are different: char {0}, difference [{1}]';
                        errors.push([msg, [profile.name, difference]]);
                        return;
                    }
                    if (!R.all(R.contains(R.__, profileItems))(charItems)) {
                        const msg = 'Character profile inconsistent, item name inconsistency: char {0}, difference [{1}]';
                        errors.push([msg, [profile.name, difference]]);
                    }
                }
            });
            return {
                module: profiles,
                errors
            };
        }

        function checkProfileStructureConsistency(data, type, structure) {
            const profileItems = data[structure].map(R.prop('name'));
            const errors = [];
            if (profileItems.length !== R.uniq(profileItems).length) {
                const diff = R.toPairs(R.groupBy(name => name, profileItems))
                    .filter(pair => pair[1].length > 1).map(pair => pair[0]);
                const msg = 'Profile structure inconsistent, item names are repeated: type {0}, values {1}';
                errors.push([msg, [type, diff]]);
            }
            return {
                module: structure,
                errors
            };
        }
    }

    callback2(consistencyCheckAPI);
})(api => (typeof exports === 'undefined' ? (this.consistencyCheckAPI = api) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function entityAPI(LocalDBMS, opts) {
        const {
            R, Constants, Errors, CU, PC
        } = opts;

        LocalDBMS.prototype.getEntityNamesArray = function (type, callback) {
            const chain = PC.chainCheck([PC.isString(type), PC.elementFromEnum(type, Constants.ownedEntityTypes)]);
            PC.precondition(chain, callback, () => {
                switch (type) {
                case 'character':
                case 'player':
                    this.getProfileNamesArray(type, callback);
                    break;
                case 'group':
                    this.getGroupNamesArray(callback);
                    break;
                case 'story':
                    this.getStoryNamesArray(callback);
                    break;
                default:
                    callback(new Errors.InternalError('errors-unexpected-switch-argument', [type]));
                }
            });
        };
    }
    callback2(entityAPI);
})(api => (typeof exports === 'undefined' ? (this.entityAPI = api) : (module.exports = api)));

/*Copyright 2018 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function gearsAPI(LocalDBMS, opts) {
        const {
            Migrator, EventEmitter, Constants, CU, PC
        } = opts;
        
        LocalDBMS.prototype.getAllGearsData = function (callback) {
            callback(null, CU.clone(this.database.Gears));
        };
        
        LocalDBMS.prototype.setGearsData = function (data, callback) {
            this.database.Gears.nodes = data.nodes;
            this.database.Gears.edges = data.edges;
            if (callback) callback();
        };
        
        LocalDBMS.prototype.setGearsPhysicsEnabled = function (enabled, callback) {
            this.database.Gears.settings.physicsEnabled = enabled;
            if (callback) callback();
        };
        
        LocalDBMS.prototype.setGearsShowNotesEnabled = function (enabled, callback) {
            this.database.Gears.settings.showNotes = enabled;
            if (callback) callback();
        };
    }

    callback2(gearsAPI);
})(api => (typeof exports === 'undefined' ? (this.gearsAPI = api) : (module.exports = api)));

/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names,prefer-rest-params */

((callback2) => {
    function groupsAPI(LocalDBMS, opts) {
        const {
            R, Constants, Errors, addListener, CU, PC, PU
        } = opts;

        LocalDBMS.prototype.getGroupNamesArray = function (callback) {
            callback(null, Object.keys(this.database.Groups).sort(CU.charOrdA));
        };

        const groupCheck = (groupName, database) => PC.chainCheck([PC.isString(groupName),
            PC.entityExists(groupName, R.keys(database.Groups))]);

//        [
//            {
//                name: 'groupName',
//                check: [{
//                    type: 'isString'
//                }, {
//                    type: 'entityExists',
//                    arr: (db) => R.keys(db.Groups)
//                }]
//            }
//        ]
        LocalDBMS.prototype.getGroup = function (groupName, callback) {
            PC.precondition(groupCheck(groupName, this.database), callback, () => {
                callback(null, CU.clone(this.database.Groups[groupName]));
            });
        };

        const _getCharacterGroupTexts = (groups, info, profileId) => {
            const dataArray = PU.getDataArray(info, profileId);
            const array = R.values(groups)
                .filter(group => group.doExport && PU.acceptDataRow(group.filterModel, dataArray)).map(group => ({
                    groupName: group.name,
                    text: group.characterDescription
                }));
            array.sort(CU.charOrdAFactory(R.prop('groupName')));
            return array;
        };

        // preview
        LocalDBMS.prototype.getCharacterGroupTexts = function (characterName, callback) {
            const that = this;
            this.getProfileBinding('character', characterName, (err, profileId) => {
                if (err) { callback(err); return; }
                that.getProfileFilterInfo((err2, info) => {
                    if (err2) { callback(err2); return; }
                    callback(null, _getCharacterGroupTexts(that.database.Groups, info, profileId));
                });
            });
        };

        // export
        LocalDBMS.prototype.getAllCharacterGroupTexts = function (callback) {
            const that = this;
            this.getProfileFilterInfo((err, info) => {
                if (err) { callback(err); return; }
                that.getProfileBindings((err2, bindings) => {
                    if (err2) { callback(err2); return; }
                    const texts = Object.keys(that.database.Characters).reduce((result, characterName) => {
                        const profileId = bindings[characterName] === undefined ? [characterName, ''] : [characterName, bindings[characterName]];
                        result[characterName] = _getCharacterGroupTexts(that.database.Groups, info, profileId);
                        return result;
                    }, {});
                    callback(null, texts);
                });
            });
        };

//  [
//      {
//          name: 'groupName',
//          check: [{
//              type: 'isString'
//          }, {
//              type: 'stringIsNotEmpty'
//          }, {
//              type: 'entityIsNotUsed',
//              arr: (db) => R.keys(db.Groups)
//          }]
//      }
//  ]
        LocalDBMS.prototype.createGroup = function (groupName, callback) {
            PC.precondition(PC.createEntityCheck2(groupName, R.keys(this.database.Groups), 'entity-lifeless-name', 'entity-of-group'), callback, () => {
                const newGroup = {
                    name: groupName,
                    masterDescription: '',
                    characterDescription: '',
                    filterModel: [],
                    doExport: true
                };

                this.database.Groups[groupName] = newGroup;
                this.ee.trigger('createGroup', arguments);
                if (callback) callback();
            });
        };

//  [
//      {
//          name: 'fromName',
//          check: [{
//              type: 'isString'
//          }, {
//              type: 'entityExists',
//              arr: (db) => R.keys(db.Groups)
//          }]
//      },
//      {
//          name: 'toName',
//          check: [{
//              type: 'isString'
//          }, {
//              type: 'stringIsNotEmpty'
//          }, {
//              type: 'entityIsNotUsed',
//              arr: (db) => R.keys(db.Groups)
//          }]
//      }
//  ]
        LocalDBMS.prototype.renameGroup = function (fromName, toName, callback) {
            PC.precondition(PC.renameEntityCheck(fromName, toName, R.keys(this.database.Groups)), callback, () => {
                const data = this.database.Groups[fromName];
                data.name = toName;
                this.database.Groups[toName] = data;
                delete this.database.Groups[fromName];
                this.ee.trigger('renameGroup', arguments);
                if (callback) callback();
            });
        };
        
//  [
//      {
//          name: 'groupName',
//          check: [{
//              type: 'isString'
//          }, {
//              type: 'entityExists',
//              arr: (db) => R.keys(db.Groups)
//          }]
//      },
//  ]
        LocalDBMS.prototype.removeGroup = function (groupName, callback) {
            PC.precondition(PC.removeEntityCheck(groupName, R.keys(this.database.Groups)), callback, () => {
                delete this.database.Groups[groupName];
                this.ee.trigger('removeGroup', arguments);
                if (callback) callback();
            });
        };

//  [
//      {
//          name: 'groupName',
//          check: [{
//              type: 'isString'
//          }, {
//              type: 'entityExists',
//              arr: (db) => R.keys(db.Groups)
//          }]
//      },
//  ]
        LocalDBMS.prototype.saveFilterToGroup = function (groupName, filterModel, callback) {
            PC.precondition(groupCheck(groupName, this.database), callback, () => {
                const conflictTypes = PU.isFilterModelCompatibleWithProfiles({
                    characters: this.database.CharacterProfileStructure,
                    players: this.database.PlayerProfileStructure
                }, filterModel);
                if (conflictTypes.length !== 0) {
                    callback(new Errors.ValidationError('groups-page-filter-is-incompatible-with-base-profiles', [conflictTypes.join(',')]));
                    return;
                }
                this.database.Groups[groupName].filterModel = filterModel;
                if (callback) callback();
            });
        };
        
//  [
//      {
//          name: 'groupName',
//          check: [{
//              type: 'isString'
//          }, {
//              type: 'entityExists',
//              arr: (db) => R.keys(db.Groups)
//          }]
//      },
//      {
//          name: 'fieldName',
//          check: [{
//              type: 'isString'
//          }, {
//              type: 'elementFromEnum',
//              arr: Constants.groupEditableItems
//          }]
//      },
//      {
//          name: 'value',
//          check: [{
//              type: 'isString'
//          }]
//      },
//  ]
        LocalDBMS.prototype.updateGroupField = function (groupName, fieldName, value, callback) {
            const chain = PC.chainCheck([groupCheck(groupName, this.database),
                PC.isString(fieldName), PC.elementFromEnum(fieldName, Constants.groupEditableItems),
                PC.isString(value)]);
            PC.precondition(chain, callback, () => {
                const profileInfo = this.database.Groups[groupName];
                profileInfo[fieldName] = value;
                if (callback) callback();
            });
        };
        
//  [
//      {
//          name: 'groupName',
//          check: [{
//              type: 'isString'
//          }, {
//              type: 'entityExists',
//              arr: (db) => R.keys(db.Groups)
//          }]
//      },
//      {
//          name: 'value',
//          check: [{
//              type: 'isBoolean'
//          }]
//      },
//  ]
        LocalDBMS.prototype.doExportGroup = function (groupName, value, callback) {
            const chain = PC.chainCheck([groupCheck(groupName, this.database), PC.isBoolean(value)]);
            PC.precondition(chain, callback, () => {
                const profileInfo = this.database.Groups[groupName];
                profileInfo['doExport'] = value;
                if (callback) callback();
            });
        };

        const initProfileInfo = (that, type, ownerMapType, callback) => {
            that.getAllProfiles(type, (err, profiles) => {
                if (err) { callback(err); return; }
                let owners = R.keys(profiles);
                if (that._getOwnerMap) {
                    owners = that._getOwnerMap(ownerMapType);
                } else {
                    owners = R.zipObj(owners, R.repeat('user', owners.length));
                }
                that.getProfileStructure(type, (err2, profileStructure) => {
                    if (err2) { callback(err2); return; }
                    callback(null, {
                        profileStructure,
                        owners,
                        profiles
                    });
                });
            });
        };

        LocalDBMS.prototype.getProfileFilterInfo = function (callback) {
            const that = this;
            initProfileInfo(that, 'character', 'Characters', (err, charactersInfo) => {
                if (err) { callback(err); return; }
                initProfileInfo(that, 'player', 'Players', (err2, playersInfo) => {
                    if (err2) { callback(err2); return; }
                    that.getCharactersSummary((err3, charactersSummary) => {
                        if (err3) { callback(err3); return; }
                        that.getExtendedProfileBindings((err4, bindingData) => {
                            if (err4) { callback(err4); return; }
                            const info = PU.makeGroupedProfileFilterInfo({
                                characters: charactersInfo,
                                players: playersInfo,
                                charactersSummary,
                                bindingData
                            });
                            callback(null, info);
                        });
                    });
                });
            });
        };

        const _getGroupCharacterSets = (groups, characterNames, bindings, info) => {
            const groupNames = R.keys(groups);
            const groupCharacterSets = R.zipObj(groupNames, R.ap([R.clone], R.repeat({}, groupNames.length)));
            characterNames.forEach((characterName) => {
                const profileId = bindings[characterName] === undefined ? [characterName, ''] : [characterName, bindings[characterName]];
                const dataArray = PU.getDataArray(info, profileId);
                groupNames.forEach((groupName) => {
                    if (PU.acceptDataRow(groups[groupName].filterModel, dataArray)) {
                        groupCharacterSets[groupName][characterName] = true;
                    }
                });
            });
            return groupCharacterSets;
        };

        LocalDBMS.prototype.getGroupCharacterSets = function (callback) {
            const that = this;
            this.getProfileFilterInfo((err, info) => {
                if (err) { callback(err); return; }
                callback(null, _getGroupCharacterSets(
                    that.database.Groups, R.keys(that.database.Characters),
                    R.clone(that.database.ProfileBindings), info
                ));
            });
        };

        function _removeProfileItem(type, index, profileItemName) {
            const prefix = (type === 'character' ? Constants.CHAR_PREFIX : Constants.PLAYER_PREFIX);
            const subFilterName = prefix + profileItemName;
            const that = this;
            Object.keys(this.database.Groups).forEach((groupName) => {
                const group = that.database.Groups[groupName];
                group.filterModel = group.filterModel.filter(filterItem => filterItem.name !== subFilterName);
            });
        }

        addListener('removeProfileItem', _removeProfileItem);

        function _changeProfileItemType(type, profileItemName, newType) {
            _removeProfileItem.apply(this, [type, -1, profileItemName]);
        }

        addListener('changeProfileItemType', _changeProfileItemType);

        function _renameProfileItem(type, newName, oldName) {
            const prefix = (type === 'character' ? Constants.CHAR_PREFIX : Constants.PLAYER_PREFIX);
            const subFilterName = prefix + oldName;
            const that = this;
            Object.keys(this.database.Groups).forEach((groupName) => {
                const group = that.database.Groups[groupName];
                group.filterModel = group.filterModel.map((filterItem) => {
                    if (filterItem.name === subFilterName) {
                        filterItem.name = prefix + newName;
                    }
                    return filterItem;
                });
            });
        }

        addListener('renameProfileItem', _renameProfileItem);

        function _replaceEnumValue(type, profileItemName, defaultValue, newOptionsMap) {
            const subFilterName = (type === 'character' ? Constants.CHAR_PREFIX : Constants.PLAYER_PREFIX) +
                profileItemName;
            const that = this;
            Object.keys(this.database.Groups).forEach((groupName) => {
                const group = that.database.Groups[groupName];
                group.filterModel.forEach((filterItem) => {
                    if (filterItem.name === subFilterName) {
                        R.keys(filterItem.selectedOptions).forEach((selectedOption) => {
                            if (!newOptionsMap[selectedOption]) {
                                delete filterItem.selectedOptions[selectedOption];
                            }
                        });
                    }
                });
            });
            Object.keys(this.database.Groups).forEach((groupName) => {
                const group = that.database.Groups[groupName];
                group.filterModel = group.filterModel.filter((filterItem) => {
                    if (filterItem.name !== subFilterName) {
                        return true;
                    }
                    return Object.keys(filterItem.selectedOptions).length !== 0;
                });
            });
        }

        addListener('replaceEnumValue', _replaceEnumValue);

        addListener('replaceMultiEnumValue', _replaceEnumValue);
        
        function _renameEnumValue(type, profileItemName, fromValue, toValue) {
            const subFilterName = (type === 'character' ? Constants.CHAR_PREFIX : Constants.PLAYER_PREFIX) +
                profileItemName;
            const that = this;
            Object.keys(this.database.Groups).forEach((groupName) => {
                const group = that.database.Groups[groupName];
                group.filterModel.forEach((filterItem) => {
                    if (filterItem.name === subFilterName) {
                        if(filterItem.selectedOptions[fromValue]){
                            delete filterItem.selectedOptions[fromValue];
                            filterItem.selectedOptions[toValue] = true;
                        }
                    }
                });
            });
        }
        
        addListener('renameEnumValue', _renameEnumValue);
        
        addListener('renameMultiEnumValue', _renameEnumValue);
    }

    callback2(groupsAPI);
})(api => (typeof exports === 'undefined' ? (this.groupsAPI = api) : (module.exports = api)));

/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names,no-continue */

((callback2) => {
    function groupSchemaAPI(LocalDBMS, opts) {
        const {
            R, CommonUtils, Constants, Errors
        } = opts;

        const _isGroupsEqualByFilterModel = (fm1, fm2) => {
            const fmMap1 = R.indexBy(R.prop('name'), fm1);
            const fmMap2 = R.indexBy(R.prop('name'), fm2);
            return R.equals(fmMap1, fmMap2);
        };
        const _isGroupsEqualByElements = (els1, els2) =>
            R.symmetricDifference(R.keys(els1), R.keys(els2)).length === 0;
        const _isSuperGroupByElements = (subGroupEls, superGroupEls) =>
            R.difference(R.keys(subGroupEls), R.keys(superGroupEls)).length === 0;
        const _isSuperGroupByFilterModel = (subGroupFm, superGroupFm) => {
            const subMap = R.indexBy(R.prop('name'), subGroupFm);
            const superMap = R.indexBy(R.prop('name'), superGroupFm);
            const subKeys = R.keys(subMap);
            const superKeys = R.keys(superMap);
            if (superKeys.length === 0) {
                return true;
            }
            if (R.difference(superKeys, subKeys).length !== 0) {
                return false;
            }

            return superKeys.every((superKey) => {
                const superItem = superMap[superKey];
                const subItem = subMap[superKey];
                switch (superItem.type) {
                case 'text':
                case 'string':
                    return subItem.regexString.indexOf(superItem.regexString) !== -1;
                case 'enum':
                case 'checkbox':
                    return R.difference(
                        R.keys(subItem.selectedOptions),
                        R.keys(superItem.selectedOptions)
                    ).length === 0;
                case 'number':
                    if (subItem.condition === 'greater' && superItem.condition === 'lesser') {
                        return false;
                    }
                    if (subItem.condition === 'lesser' && superItem.condition === 'greater') {
                        return false;
                    }
                    if (subItem.condition === 'lesser' && superItem.condition === 'equal') {
                        return false;
                    }
                    if (subItem.condition === 'greater' && superItem.condition === 'equal') {
                        return false;
                    }
                    if (subItem.condition === 'equal' && superItem.condition === 'greater') {
                        return subItem.num > superItem.num;
                    }
                    if (subItem.condition === 'equal' && superItem.condition === 'lesser') {
                        return subItem.num < superItem.num;
                    }
                    
                    if (subItem.condition === 'equal' && superItem.condition === 'equal') {
                        return subItem.num === superItem.num;
                    }
                    if (subItem.condition === 'greater' && superItem.condition === 'greater') {
                        return subItem.num >= superItem.num;
                    }
                    if (subItem.condition === 'lesser' && superItem.condition === 'lesser') {
                        return subItem.num <= superItem.num;
                    }
                    break;
                case 'multiEnum':
                    // fix rest problems
                    if (subItem.condition === 'every' && superItem.condition === 'some') {
                        return false;
                    }
                    if (subItem.condition === 'some' && superItem.condition === 'every') {
                        return false;
                    }
                    
                    if (subItem.condition === 'every' && superItem.condition === 'equal') {
//                        return R.keys(subItem.selectedOptions).length === 0;
//                          if(R.keys(subItem.selectedOptions).length === 0){
//                              return true;
//                          }
//                        return R.difference(
//                            R.keys(subItem.selectedOptions),
//                            R.keys(superItem.selectedOptions)
//                        ).length === 0;
                        return false;
                    }
                    if (subItem.condition === 'equal' && superItem.condition === 'every') {
                        return R.difference(
                            R.keys(superItem.selectedOptions),
                            R.keys(subItem.selectedOptions)
                        ).length === 0;
//                        if(R.keys(subItem.selectedOptions).length === 0){
//                            return true;
//                        }
//                        return R.difference(
//                            R.keys(subItem.selectedOptions),
//                            R.keys(superItem.selectedOptions)
//                        ).length === 0;
                        return false;
                    }
                    
                    if (subItem.condition === 'some' && superItem.condition === 'equal') {
                        return false;
                    }
                    if (subItem.condition === 'equal' && superItem.condition === 'some') {
                        return false;
                    }
                    
                    if (subItem.condition === 'every' && superItem.condition === 'every') {
                        if(R.keys(superItem.selectedOptions).length === 0){
                            return false;
                        }
                        if(R.keys(subItem.selectedOptions).length === 0){
                            return true;
                        }
                        return R.difference(
                            R.keys(superItem.selectedOptions),
                            R.keys(subItem.selectedOptions)
                        ).length === 0;
                    }
                    if (subItem.condition === 'equal' && superItem.condition === 'equal') {
                        return R.symmetricDifference(
                            R.keys(superItem.selectedOptions),
                            R.keys(subItem.selectedOptions)
                        ).length === 0;
                    }
                    if (subItem.condition === 'some' && superItem.condition === 'some') {
                        return R.difference(
                            R.keys(subItem.selectedOptions),
                            R.keys(superItem.selectedOptions)
                        ).length === 0;
                    }
                    break;
                default:
                    throw new Error(`Unexpected type ${superItem.type}`);
                }
                throw new Error();
            });
        };

        const _removeSuperSuperGroups = (superGroups) => {
            R.values(superGroups).forEach((superGroupSet) => {
                const superGroupKeys = R.keys(superGroupSet);
                for (let i = 0; i < superGroupKeys.length; ++i) {
                    for (let j = 0; j < superGroupKeys.length; ++j) {
                        if (i === j) continue;
                        const subGroup = superGroupKeys[i];
                        const superGroup = superGroupKeys[j];
                        if (superGroups[subGroup][superGroup]) {
                            delete superGroupSet[superGroup];
                        }
                    }
                }
            });
        };

        const _makeGraph = (equalGroups, superGroups, groupCharacterSets) => {
            const levels = {};
            function getLevel(groupName) {
                if (levels[groupName]) {
                    return levels[groupName];
                }
                const supers = R.keys(superGroups[groupName]);
                if (supers.length === 0) {
                    return 1;
                }
                return supers.map(getLevel).reduce((max, cur) => (cur > max ? cur : max), -1) + 1;
            }

            R.keys(superGroups).forEach((subGroup) => {
                if (!levels[subGroup]) {
                    levels[subGroup] = getLevel(subGroup);
                }
            });


            const nodes = R.keys(superGroups).map(subGroup => ({
                id: subGroup,
                label: [subGroup].concat(equalGroups[subGroup] || []).join(', '),
                level: levels[subGroup],
                title: R.keys(groupCharacterSets[subGroup]).join(', ')
            }));
            const edges = R.keys(superGroups).reduce((result, subGroup) =>
                result.concat(R.keys(superGroups[subGroup]).map(superGroup => ({
                    from: subGroup,
                    to: superGroup,
                    arrow: 'to'
                }))), []);
            return {
                nodes,
                edges
            };
        };

        const _makeGroupSchema = (groups, _isGroupsEqual, _isSuperGroup, _extractKeyInfo, groupCharacterSets) => {
            const groupNames = R.keys(groups);
            const groupNamesSet = R.zipObj(groupNames, R.repeat(true, groupNames.length));
            const equalGroups = {};

            for (let i = 0; i < groupNames.length; ++i) {
                const groupName1 = groupNames[i];
                if (groupNamesSet[groupName1]) {
                    for (let j = i + 1; j < groupNames.length; ++j) {
                        const groupName2 = groupNames[j];
                        if (groupNamesSet[groupName2]) {
                            if (_isGroupsEqual(_extractKeyInfo(groupName1), _extractKeyInfo(groupName2))) {
                                groupNamesSet[groupName2] = false;
                                equalGroups[groupName1] = equalGroups[groupName1] || [];
                                equalGroups[groupName1].push(groupName2);
                            }
                        }
                    }
                }
            }
            //            console.log(equalGroups);
            const uniqueGroups = R.toPairs(groupNamesSet).filter(item => item[1]).map(R.head);
            //            console.log(uniqueGroups);
            const superGroups = R.zipObj(uniqueGroups, R.ap([R.clone], R.repeat({}, uniqueGroups.length)));
            for (let i = 0; i < uniqueGroups.length; ++i) {
                for (let j = 0; j < uniqueGroups.length; ++j) {
                    if (i === j) continue;
                    const groupName1 = uniqueGroups[i];
                    const groupName2 = uniqueGroups[j];
                    if (_isSuperGroup(_extractKeyInfo(groupName1), _extractKeyInfo(groupName2))) {
                        superGroups[groupName1][groupName2] = true;
                    }
                }
            }
            //            console.log(superGroups);
            _removeSuperSuperGroups(superGroups);
            //            console.log(superGroups);

            return _makeGraph(equalGroups, superGroups, groupCharacterSets);
        };

        LocalDBMS.prototype.getGroupSchemas = function (callback) {
            const that = this;

            this.getGroupCharacterSets((err, groupCharacterSets) => {
                if (err) { callback(err); return; }
                const schemas = {};
                const groups = that.database.Groups;

                schemas.theory = _makeGroupSchema(
                    groups, _isGroupsEqualByFilterModel, _isSuperGroupByFilterModel,
                    groupName => groups[groupName].filterModel, groupCharacterSets
                );

                schemas.practice = _makeGroupSchema(
                    groups, _isGroupsEqualByElements, _isSuperGroupByElements,
                    groupName => groupCharacterSets[groupName], groupCharacterSets
                );

                callback(null, schemas);
            });
        };
    }

    callback2(groupSchemaAPI);
})(api => (typeof exports === 'undefined' ? (this.groupSchemaAPI = api) : (module.exports = api)));

/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function logAPI(LocalDBMS, opts) {
        const {
            R, CU, PC, Constants
        } = opts;

        const filterMap = [
            ['user', 1],
            ['date', 2],
            ['action', 3],
            ['params', 4],
            ['status', 5],
        ];

        LocalDBMS.prototype.log = function (userName, time, funcName, rewrite, params, status, callback) {
            const chain = PC.chainCheck([PC.isString(userName), PC.isString(time), PC.isString(funcName),
                PC.isBoolean(rewrite), PC.isArray(params), PC.isString(status)]);
            PC.precondition(chain, err => console.error(err), () => {
                const info = [userName, time, funcName, JSON.stringify(params), status];
                if (this.database) {
                    if (rewrite && this.database.Log[this.database.Log.length - 1] !== undefined) {
                        if (this.database.Log[this.database.Log.length - 1][2] === funcName) {
                            this.database.Log[this.database.Log.length - 1] = info;
                        }
                    } else {
                        this.database.Log.push(info);
                        if (this.database.Log.length > 2000) {
                            this.database.Log.splice(0, 1000);
                        }
                    }
                    //                console.log(this.database.Log.length);
                }
//                console.log(CU.strFormat('{0},{1},{2},{3},{4}', info));
                if (callback) callback();
            });
        };


        LocalDBMS.prototype.getLog = function (pageNumber, filter, callback) {
            const chain = PC.chainCheck([PC.isNumber(pageNumber), PC.isObject(filter)]);
            PC.precondition(chain, callback, () => {
                const chain2 = PC.chainCheck([PC.elementsFromEnum(
                    R.keys(filter),
                    Constants.logFilterTypes
                )].concat(R.values(filter).map(PC.isString)));
                PC.precondition(chain2, callback, () => {
                    const tmp = this.database.Log.map((arr, i) => [i + 1].concat(arr))
                        .filter(arr => filterMap.every((pair) => {
                            if (filter[pair[0]] === undefined) return true;
                            return arr[pair[1]].toLowerCase().indexOf(filter[pair[0]].toLowerCase()) !== -1;
                        }));

                    const max = tmp.length;
                    const requestedLog = R.slice((pageNumber * 100), ((pageNumber + 1) * 100), R.reverse(tmp));

                    callback(null, {
                        requestedLog,
                        pageNumber,
                        max,
                        logSize: Math.ceil(max / 100)
                    });
                });
            });
        };
    }

    callback2(logAPI);
})(api => (typeof exports === 'undefined' ? (this.logAPI = api) : (module.exports = api)));

/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function profileBindingAPI(LocalDBMS, opts) {
        const {
            R, Constants, Errors, addListener, dbmsUtils, CU, PC
        } = opts;

        const path = ['ProfileBindings'];
        const charPath = ['Characters'];
        const playerPath = ['Players'];

        LocalDBMS.prototype.getProfileBindings = function (callback) {
            callback(null, CU.clone(R.path(path, this.database)));
        };

        LocalDBMS.prototype.getExtendedProfileBindings = function (callback) {
            let characters = R.keys(R.path(charPath, this.database));
            let players = R.keys(R.path(playerPath, this.database));
            const bindings = CU.clone(R.path(path, this.database));
            characters = R.difference(characters, R.keys(bindings));
            players = R.difference(players, R.values(bindings));

            const bindingData = R.reduce(R.concat, [], [R.toPairs(bindings),
                R.zip(characters, R.repeat('', characters.length)),
                R.zip(R.repeat('', players.length), players)]);
            callback(null, bindingData);
        };

        const _getProfileBinding = (type, name, db) => {
            let arr;
            if (type === 'character') {
                const bindings = R.path(path, db);
                arr = [name, bindings[name] || ''];
            } else {
                const bindings = R.invertObj(R.path(path, db));
                arr = [bindings[name] || '', name];
            }
            return arr;
        };

        dbmsUtils._getProfileBinding = _getProfileBinding;

        LocalDBMS.prototype.getProfileBinding = function (type, name, callback) {
            const conditions = [PC.isString(type), PC.elementFromEnum(type, Constants.profileTypes), PC.isString(name),
                PC.entityExists(name, R.keys(this.database[type === 'character' ? 'Characters' : 'Players']))];
            PC.precondition(PC.chainCheck(conditions), callback, () => {
                callback(null, _getProfileBinding(type, name, this.database));
            });
        };

        LocalDBMS.prototype.createBinding = function (characterName, playerName, callback) {
            const bindings = R.path(path, this.database);
            const conditions = [PC.isString(characterName),
                PC.entityExists(characterName, R.keys(this.database.Characters)), PC.isString(playerName),
                PC.entityExists(playerName, R.keys(this.database.Players)),
                PC.entityIsNotUsed(characterName, R.keys(bindings)),
                PC.entityIsNotUsed(playerName, R.keys(R.invertObj(bindings)))];
            PC.precondition(PC.chainCheck(conditions), callback, () => {
                bindings[characterName] = playerName;
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.removeBinding = function (characterName, playerName, callback) {
            const bindingArr = R.toPairs(R.path(path, this.database)).map(pair => `${pair[0]}/${pair[1]}`);
            const conditions = [PC.isString(characterName),
                PC.entityExists(characterName, R.keys(this.database.Characters)),
                PC.isString(playerName), PC.entityExists(playerName, R.keys(this.database.Players)),
                PC.entityExists(`${characterName}/${playerName}`, bindingArr)];
            PC.precondition(PC.chainCheck(conditions), callback, () => {
                delete R.path(path, this.database)[characterName];
                if (callback) callback();
            });
        };

        function _renameProfile(type, fromName, toName) {
            const bindings = R.path(path, this.database);
            if (type === 'character') {
                const playerName = bindings[fromName];
                if (playerName !== undefined) {
                    bindings[toName] = playerName;
                    delete bindings[fromName];
                }
            } else if (type === 'player') {
                const invertedBindings = R.invertObj(bindings);
                const characterName = invertedBindings[fromName];
                if (characterName !== undefined) {
                    bindings[characterName] = toName;
                }
            } else {
                console.log(`binding._renameProfile: Unexpected type ${type}`);
            }
        }

        addListener('renameProfile', _renameProfile);

        function _removeProfile(type, profileName) {
            const bindings = R.path(path, this.database);
            if (type === 'character') {
                delete bindings[profileName];
            } else if (type === 'player') {
                const invertedBindings = R.invertObj(bindings);
                const characterName = invertedBindings[profileName];
                if (characterName !== undefined) {
                    delete bindings[characterName];
                }
            } else {
                console.log(`binding._removeProfile: Unexpected type ${type}`);
            }
        }

        addListener('removeProfile', _removeProfile);
    }

    callback2(profileBindingAPI);
})(api => (typeof exports === 'undefined' ? (this.profileBindingAPI = api) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names,prefer-rest-params */

((callback2) => {
    function profileConfigurerAPI(LocalDBMS, opts) {
        const {
            R, Constants, Errors, CU, PC
        } = opts;

        function getPath(type) {
            if (type === 'character') return ['CharacterProfileStructure'];
            if (type === 'player') return ['PlayerProfileStructure'];
            return null;
        }

        const typeCheck = type => PC.chainCheck([PC.isString(type), PC.elementFromEnum(type, Constants.profileTypes)]);
        const itemTypeCheck = type => PC.chainCheck([PC.isString(type),
            PC.elementFromEnum(type, R.keys(Constants.profileFieldTypes))]);
        const playerAccessCheck = type => PC.chainCheck([PC.isString(type),
            PC.elementFromEnum(type, Constants.playerAccessTypes)]);

        LocalDBMS.prototype.getProfileStructure = function (type, callback) {
            PC.precondition(typeCheck(type), callback, () => {
                callback(null, CU.clone(R.path(getPath(type), this.database)));
            });
        };
        // profile configurer
        LocalDBMS.prototype.createProfileItem = function (type, name, itemType, selectedIndex, callback) {
            let chain = [typeCheck(type), PC.isString(name), PC.notEquals(name, 'name'),
                PC.isNumber(selectedIndex), itemTypeCheck(itemType)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const container = R.path(getPath(type), this.database);
                chain = [PC.createEntityCheck2(name, container.map(R.prop('name')), 'entity-lifeless-name', 'entity-of-profile-item'), PC.isInRange(selectedIndex, 0, container.length)];
                PC.precondition(PC.chainCheck(chain), callback, () => {
                    const { value } = Constants.profileFieldTypes[itemType];
                    const profileItem = {
                        name,
                        type: itemType,
                        value,
                        doExport: true,
                        playerAccess: 'hidden',
                        showInRoleGrid: false
                    };

                    container.splice(selectedIndex, 0, profileItem);
                    this.ee.trigger('createProfileItem', [type, name, itemType, value]);
                    callback();
                });
            });
        };

        //profile configurer
        LocalDBMS.prototype.moveProfileItem = function (type, index, newIndex, callback) {
            let chain = [typeCheck(type), PC.isNumber(index), PC.isNumber(newIndex)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const container = R.path(getPath(type), this.database);
                chain = [PC.isInRange(index, 0, container.length - 1), PC.isInRange(newIndex, 0, container.length)];
                PC.precondition(PC.chainCheck(chain), callback, () => {
                    if (newIndex > index) {
                        newIndex--;
                    }
                    const tmp = container[index];
                    container.splice(index, 1);
                    container.splice(newIndex, 0, tmp);
                    callback();
                });
            });
        };
        // profile configurer
        LocalDBMS.prototype.removeProfileItem = function (type, index, profileItemName, callback) {
            const chain = [typeCheck(type), PC.isNumber(index), PC.isString(profileItemName)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const container = R.path(getPath(type), this.database);
                const els = container.map((item, i) => `${i}/${item.name}`);
                PC.precondition(PC.entityExists(`${index}/${profileItemName}`, els), callback, () => {
                    CU.removeFromArrayByIndex(container, index);
                    this.ee.trigger('removeProfileItem', arguments);
                    callback();
                });
            });
        };
        // profile configurer
        LocalDBMS.prototype.changeProfileItemType = function (type, profileItemName, newType, callback) {
            const chain = [typeCheck(type), PC.isString(profileItemName), itemTypeCheck(newType)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const container = R.path(getPath(type), this.database);
                PC.precondition(PC.entityExists(profileItemName, container.map(R.prop('name'))), callback, () => {
                    const profileItem = container.filter(elem => elem.name === profileItemName)[0];
                    profileItem.type = newType;
                    profileItem.value = Constants.profileFieldTypes[newType].value;
                    this.ee.trigger('changeProfileItemType', arguments);
                    callback();
                });
            });
        };

        LocalDBMS.prototype.changeProfileItemPlayerAccess = function (
            type, profileItemName, playerAccessType,
            callback
        ) {
            const chain = [typeCheck(type), PC.isString(profileItemName), playerAccessCheck(playerAccessType)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const container = R.path(getPath(type), this.database);
                PC.precondition(PC.entityExists(profileItemName, container.map(R.prop('name'))), callback, () => {
                    const profileStructure = R.path(getPath(type), this.database);
                    const profileItem = R.find(R.propEq('name', profileItemName), profileStructure);
                    profileItem.playerAccess = playerAccessType;
                    callback();
                });
            });
        };

        // profile configurer
        LocalDBMS.prototype.renameProfileItem = function (type, newName, oldName, callback) {
            PC.precondition(typeCheck(type), callback, () => {
                const container = R.path(getPath(type), this.database);
                PC.precondition(PC.renameEntityCheck(oldName, newName, container.map(R.prop('name'))), callback, () => {
                    this.ee.trigger('renameProfileItem', [type, newName, oldName]);
                    container.filter(elem => elem.name === oldName)[0].name = newName;
                    callback();
                });
            });
        };

        LocalDBMS.prototype.doExportProfileItemChange = function (type, profileItemName, checked, callback) {
            const chain = [typeCheck(type), PC.isString(profileItemName), PC.isBoolean(checked)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const container = R.path(getPath(type), this.database);
                PC.precondition(PC.entityExists(profileItemName, container.map(R.prop('name'))), callback, () => {
                    const profileItem = container.filter(elem => elem.name === profileItemName)[0];

                    profileItem.doExport = checked;
                    callback();
                });
            });
        };

        LocalDBMS.prototype.showInRoleGridProfileItemChange = function (type, profileItemName, checked, callback) {
            const chain = [typeCheck(type), PC.isString(profileItemName), PC.isBoolean(checked)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const container = R.path(getPath(type), this.database);
                PC.precondition(PC.entityExists(profileItemName, container.map(R.prop('name'))), callback, () => {
                    container.filter(R.pipe(R.prop('name'), R.equals(profileItemName)))[0].showInRoleGrid = checked;
                    callback();
                });
            });
        };

        const typeSpecificPreconditions = (itemType, value) => {
            switch (itemType) {
            case 'text':
            case 'string':
            case 'checkbox':
            case 'number':
            case 'multiEnum':
                return PC.nil();
            case 'enum':
                return PC.isNotEmptyString(value);
            default:
                throw new Error(`Unexpected itemType ${itemType}`);
            }
        };

        // profile configurer
        LocalDBMS.prototype.updateDefaultValue = function (type, profileItemName, value, callback) {
            let chain = [typeCheck(type), PC.isString(profileItemName)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const container = R.path(getPath(type), this.database);
                PC.precondition(PC.entityExists(profileItemName, container.map(R.prop('name'))), callback, () => {
                    const info = container.filter(R.compose(R.equals(profileItemName), R.prop('name')))[0];
                    chain = [PC.getValueCheck(info.type)(value), typeSpecificPreconditions(info.type, value)];
                    PC.precondition(PC.chainCheck(chain), callback, () => {
                        let newOptions, newOptionsMap, missedValues;

                        switch (info.type) {
                        case 'text':
                        case 'string':
                        case 'checkbox':
                            info.value = value;
                            break;
                        case 'number':
                            info.value = Number(value);
                            break;
                        case 'enum':
                        case 'multiEnum':
                            newOptions = R.uniq(value.split(',').map(R.trim));
                            missedValues = info.value.trim() === '' ? [] : R.difference(info.value.split(','), newOptions);
                            newOptionsMap = R.zipObj(newOptions, R.repeat(true, newOptions.length));

                            if (missedValues.length !== 0) {
                                this.ee.trigger(info.type === 'enum' ? 'replaceEnumValue' : 'replaceMultiEnumValue', [type, profileItemName, newOptions[0], newOptionsMap]);
                            }

                            info.value = newOptions.join(',');
                            break;
                        default:
                            callback(new Errors.InternalError('errors-unexpected-switch-argument', [info.type]));
                        }
                        callback();
                    });
                });
            });
        };
        
        LocalDBMS.prototype.renameEnumValue = function (type, profileItemName, fromValue, toValue, callback) {
            let chain = [typeCheck(type), PC.isString(profileItemName),
                PC.isString(fromValue), PC.isString(toValue), 
                PC.isNotEmptyString(fromValue), PC.isNotEmptyString(toValue)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const container = R.path(getPath(type), this.database);
                PC.precondition(PC.entityExists(profileItemName, container.map(R.prop('name'))), callback, () => {
                    const info = container.filter(R.compose(R.equals(profileItemName), R.prop('name')))[0];
                    chain = [PC.elementFromEnum(info.type, ['enum', 'multiEnum'])];
                    PC.precondition(PC.chainCheck(chain), callback, () => {
                        const list = info.value.trim() === '' ? [] : info.value.split(',');
                        chain = [PC.elementFromEnum(fromValue, list), PC.createEntityCheck(toValue, list)];
                        PC.precondition(PC.chainCheck(chain), callback, () => {
                            list[R.indexOf(fromValue, list)] = toValue;
                            info.value = list.join(',');
                            this.ee.trigger(info.type === 'enum' ? 'renameEnumValue' : 'renameMultiEnumValue', [type, profileItemName, fromValue, toValue]);
                            callback();
                        });
                    });
                });
            });
        }
    }
    callback2(profileConfigurerAPI);
})(api => (typeof exports === 'undefined' ? (this.profileConfigurerAPI = api) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names,prefer-rest-params,prefer-destructuring */

((callback2) => {
    function profilesAPI(LocalDBMS, opts) {
        const {
            R, Constants, Errors, addListener, CU, PC
        } = opts;

        function getPath(type) {
            if (type === 'character') return ['Characters'];
            if (type === 'player') return ['Players'];
            return null;
        }
        function getStructurePath(type) {
            if (type === 'character') return ['CharacterProfileStructure'];
            if (type === 'player') return ['PlayerProfileStructure'];
            return null;
        }

        const typeCheck = type => PC.chainCheck([PC.isString(type), PC.elementFromEnum(type, Constants.profileTypes)]);

        LocalDBMS.prototype.getProfileNamesArray = function (type, callback) {
            PC.precondition(typeCheck(type), callback, () => {
                callback(null, Object.keys(R.path(getPath(type), this.database)).sort(CU.charOrdA));
            });
        };

        // profile, preview
        LocalDBMS.prototype.getProfile = function (type, name, callback) {
            PC.precondition(typeCheck(type), callback, () => {
                const container = R.path(getPath(type), this.database);
                PC.precondition(PC.entityExistsCheck(name, R.keys(container)), callback, () => {
                    callback(null, CU.clone(container[name]));
                });
            });
        };
        // social network, character filter
        LocalDBMS.prototype.getAllProfiles = function (type, callback) {
            PC.precondition(typeCheck(type), callback, () => {
                callback(null, CU.clone(R.path(getPath(type), this.database)));
            });
        };

        // profiles
        LocalDBMS.prototype.createProfile = function (type, characterName, callback) {
            PC.precondition(typeCheck(type), callback, () => {
                const container = R.path(getPath(type), this.database);
                PC.precondition(PC.createEntityCheck2(characterName, R.keys(container), 'entity-living-name', `entity-of-${type}`), callback, () => {
                    const newCharacter = {
                        name: characterName
                    };

                    R.path(getStructurePath(type), this.database).forEach((profileSettings) => {
                        if (profileSettings.type === 'enum') {
                            newCharacter[profileSettings.name] = profileSettings.value.split(',')[0];
                        } else if (profileSettings.type === 'multiEnum') {
                            newCharacter[profileSettings.name] = '';
                        } else {
                            newCharacter[profileSettings.name] = profileSettings.value;
                        }
                    });

                    R.path(getPath(type), this.database)[characterName] = newCharacter;
                    this.ee.trigger('createProfile', arguments);
                    if (callback) callback();
                });
            });
        };
        // profiles
        LocalDBMS.prototype.renameProfile = function (type, fromName, toName, callback) {
            PC.precondition(typeCheck(type), callback, () => {
                const container = R.path(getPath(type), this.database);
                PC.precondition(PC.renameEntityCheck(fromName, toName, R.keys(container)), callback, () => {
                    const data = container[fromName];
                    data.name = toName;
                    container[toName] = data;
                    delete container[fromName];
                    this.ee.trigger('renameProfile', arguments);
                    if (callback) callback();
                });
            });
        };

        // profiles
        LocalDBMS.prototype.removeProfile = function (type, characterName, callback) {
            PC.precondition(typeCheck(type), callback, () => {
                const container = R.path(getPath(type), this.database);
                PC.precondition(PC.removeEntityCheck(characterName, R.keys(container)), callback, () => {
                    delete container[characterName];
                    this.ee.trigger('removeProfile', arguments);
                    if (callback) callback();
                });
            });
        };

        const typeSpecificPreconditions = (itemType, itemDesc, value) => {
            switch (itemType) {
            case 'text':
            case 'string':
            case 'checkbox':
            case 'number':
                return PC.nil();
            case 'enum':
                return PC.elementFromEnum(value, itemDesc.value.split(','));
            case 'multiEnum':
                return PC.eitherCheck(
                    PC.elementsFromEnum(value.split(','), itemDesc.value.split(',')),
                    PC.isEmptyString(value)
                );
            default:
                throw new Error(`Unexpected itemType ${itemType}`);
            }
        };

        // profile editor
        LocalDBMS.prototype.updateProfileField = function (type, characterName, fieldName, itemType, value, callback) {
            PC.precondition(typeCheck(type), callback, () => {
                const container = R.path(getPath(type), this.database);
                const containerStructure = R.path(getStructurePath(type), this.database);
                const arr = [PC.entityExistsCheck(characterName, R.keys(container)),
                    PC.entityExistsCheck(
                        `${fieldName}/${itemType}`,
                        containerStructure.map(item => `${item.name}/${item.type}`)
                    ),
                    PC.getValueCheck(itemType)(value)];
                PC.precondition(PC.chainCheck(arr), callback, () => {
                    const itemDesc = R.find(R.propEq('name', fieldName), containerStructure);
                    PC.precondition(typeSpecificPreconditions(itemType, itemDesc, value), callback, () => {
                        const profileInfo = container[characterName];
                        switch (itemType) {
                        case 'text':
                        case 'string':
                        case 'enum':
                        case 'multiEnum':
                        case 'checkbox':
                            profileInfo[fieldName] = value;
                            break;
                        case 'number':
                            profileInfo[fieldName] = Number(value);
                            break;
                        default:
                            callback(new Errors.InternalError('errors-unexpected-switch-argument', [itemType]));
                        }
                        if (callback) callback();
                    });
                });
            });
        };

        function _createProfileItem(type, name, itemType, value) {
            const profileSet = R.path(getPath(type), this.database);
            Object.keys(profileSet).forEach((characterName) => {
                profileSet[characterName][name] = value;
            });
        }

        addListener('createProfileItem', _createProfileItem);

        function _removeProfileItem(type, index, profileItemName) {
            const profileSet = R.path(getPath(type), this.database);
            Object.keys(profileSet).forEach((characterName) => {
                delete profileSet[characterName][profileItemName];
            });
        }

        addListener('removeProfileItem', _removeProfileItem);

        function _changeProfileItemType(type, profileItemName, newType) {
            const profileSet = R.path(getPath(type), this.database);
            Object.keys(profileSet).forEach((characterName) => {
                profileSet[characterName][profileItemName] = Constants.profileFieldTypes[newType].value;
            });
        }

        addListener('changeProfileItemType', _changeProfileItemType);

        function _renameProfileItem(type, newName, oldName) {
            const profileSet = R.path(getPath(type), this.database);
            Object.keys(profileSet).forEach((characterName) => {
                const tmp = profileSet[characterName][oldName];
                delete profileSet[characterName][oldName];
                profileSet[characterName][newName] = tmp;
            });
        }

        addListener('renameProfileItem', _renameProfileItem);

        function _replaceEnumValue(type, profileItemName, defaultValue, newOptionsMap) {
            const profileSet = R.path(getPath(type), this.database);
            Object.keys(profileSet).forEach((characterName) => {
                const enumValue = profileSet[characterName][profileItemName];
                if (!newOptionsMap[enumValue]) {
                    profileSet[characterName][profileItemName] = defaultValue;
                }
            });
        }

        addListener('replaceEnumValue', _replaceEnumValue);

        function _replaceMultiEnumValue(type, profileItemName, defaultValue, newOptionsMap) {
            const profileSet = R.path(getPath(type), this.database);
            Object.keys(profileSet).forEach((characterName) => {
                let value = profileSet[characterName][profileItemName];
                if (value !== '') {
                    value = R.intersection(value.split(','), R.keys(newOptionsMap));
                    profileSet[characterName][profileItemName] = value.join(',');
                }
            });
        }

        addListener('replaceMultiEnumValue', _replaceMultiEnumValue);
        
        function _renameEnumValue(type, profileItemName, fromValue, toValue) {
            const profileSet = R.path(getPath(type), this.database);
            Object.keys(profileSet).forEach((characterName) => {
                const enumValue = profileSet[characterName][profileItemName];
                if(enumValue === fromValue){
                    profileSet[characterName][profileItemName] = toValue;
                }
            });
        }
        addListener('renameEnumValue', _renameEnumValue);
        
        function _renameMultiEnumValue(type, profileItemName, fromValue, toValue) {
            const profileSet = R.path(getPath(type), this.database);
            Object.keys(profileSet).forEach((characterName) => {
                let value = profileSet[characterName][profileItemName];
                if (value !== '') {
                    const list = value.split(',');
                    if(R.contains(fromValue, list)){
                        list[R.indexOf(fromValue, list)] = toValue;
                        profileSet[characterName][profileItemName] = list.join(',');
                    }
                }
            });
        }
        addListener('renameMultiEnumValue', _renameMultiEnumValue);
    }

    callback2(profilesAPI);
})(api => (typeof exports === 'undefined' ? (this.profilesAPI = api) : (module.exports = api)));

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((callback2) => {
    function profileViewAPI(LocalDBMS, opts) {
        const {
            R, CU, Constants, Errors
        } = opts;

        function getPath(type) {
            if (type === 'character') return ['Characters'];
            if (type === 'player') return ['Players'];
            return null;
        }
        function getStructurePath(type) {
            if (type === 'character') return ['CharacterProfileStructure'];
            if (type === 'player') return ['PlayerProfileStructure'];
            return null;
        }

        const getProfileInfo = (type, database) => {
            // var structure = R.path(getStructurePath(type), database).filter(el => el.showInRoleGrid === true);
            const structure = R.path(getStructurePath(type), database);
            return {
                structure,
                profiles: R.mapObjIndexed(R.pick(structure.map(R.prop('name'))), R.path(getPath(type), database))
            };
        };

        LocalDBMS.prototype.getRoleGridInfo = function (callback){
            const characters = getProfileInfo('character', this.database);
            const players = getProfileInfo('player', this.database);

            const bindings = this.database.ProfileBindings;
            const profileData = R.keys(characters.profiles).map((characterName) => {
                const playerName = bindings[characterName];
                return {
                    character: characters.profiles[characterName],
                    player: playerName === undefined ? undefined : players.profiles[playerName],
                    characterName,
                    playerName,
                };
            });

            callback(null, {
                profileData,
                characterProfileStructure: characters.structure,
                playerProfileStructure: players.structure
            });
        };
    }

    callback2(profileViewAPI);
})(api => (typeof exports === 'undefined' ? (this.profileViewAPI = api) : (module.exports = api)));

/*Copyright 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function relationsAPI(LocalDBMS, opts) {
        const {
            R, Constants, Errors, addListener, dbmsUtils, CU, PC
        } = opts;

        const relationsPath = ['Relations'];

        const rel2RelKey = R.pipe(R.props(['starter', 'ender']), R.sort(CU.charOrdA), JSON.stringify);
        dbmsUtils._rel2RelKey = rel2RelKey;
        const arr2RelKey = R.pipe(R.sort(CU.charOrdA), JSON.stringify);
        dbmsUtils._arr2RelKey = arr2RelKey;

        const findRel = R.curry((fromCharacter, toCharacter, relations) => {
            const findFunc = R.curry((fromCharacter2, toCharacter2, rel) =>
                rel[fromCharacter2] !== undefined && rel[toCharacter2] !== undefined);
            return R.find(findFunc(fromCharacter, toCharacter), relations);
        });

        dbmsUtils._getKnownCharacters = (database, characterName) => {
            const stories = database.Stories;
            const knownCharacters = {};
            R.values(stories).forEach((story) => {
                const filter = R.compose(R.not, R.isNil, R.prop(characterName), R.prop('characters'));
                story.events.filter(filter).forEach((event) => {
                    R.keys(event.characters).forEach((charName) => {
                        knownCharacters[charName] = knownCharacters[charName] || {};
                        knownCharacters[charName][story.name] = true;
                    });
                });
            });
            delete knownCharacters[characterName];
            return knownCharacters;
        };

        const characterCheck = (characterName, database) => PC.chainCheck([PC.isString(characterName),
            PC.entityExists(characterName, R.keys(database.Characters))]);

        const charFilter = R.curry((char, data) => R.filter(rel => rel[char] !== undefined, data));

        LocalDBMS.prototype.getRelations = function (callback) {
            callback(null, R.clone(R.path(relationsPath, this.database)));
        };

        LocalDBMS.prototype.getRelationsSummary = function (characterName, callback) {
            PC.precondition(characterCheck(characterName, this.database), callback, () => {
                const relData = R.clone(R.path(relationsPath, this.database));
                const relations = charFilter(characterName, relData);

                callback(null, {
                    relations,
                    knownCharacters: dbmsUtils._getKnownCharacters(this.database, characterName)
                });
            });
        };

        LocalDBMS.prototype.getCharacterRelation = function (fromCharacter, toCharacter, callback) {
            const relData = R.path(relationsPath, this.database);
            const chain = PC.chainCheck([characterCheck(fromCharacter, this.database),
                characterCheck(toCharacter, this.database),
                PC.entityExistsCheck(arr2RelKey([fromCharacter, toCharacter]), relData.map(rel2RelKey))]);
            PC.precondition(chain, callback, () => {
                callback(null, R.clone(findRel(fromCharacter, toCharacter, relData)));
            });
        };

        LocalDBMS.prototype.createCharacterRelation = function (fromCharacter, toCharacter, callback) {
            const relData = R.path(relationsPath, this.database);
            const chain = PC.chainCheck([characterCheck(fromCharacter, this.database),
                characterCheck(toCharacter, this.database),
                PC.createEntityCheck(arr2RelKey([fromCharacter, toCharacter]), relData.map(rel2RelKey))]);
            PC.precondition(chain, callback, () => {
                relData.push({
                    origin: '',
                    starterTextReady: false,
                    enderTextReady: false,
                    essence: [],
                    [fromCharacter]: '',
                    [toCharacter]: '',
                    starter: fromCharacter,
                    ender: toCharacter
                });
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.removeCharacterRelation = function (fromCharacter, toCharacter, callback) {
            const relData = R.path(relationsPath, this.database);
            const chain = PC.chainCheck([characterCheck(fromCharacter, this.database),
                characterCheck(toCharacter, this.database),
                PC.entityExistsCheck(arr2RelKey([fromCharacter, toCharacter]), relData.map(rel2RelKey))]);
            PC.precondition(chain, callback, () => {
                const rel = findRel(fromCharacter, toCharacter, relData);
                relData.splice(R.indexOf(rel, relData), 1);
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.setCharacterRelationText = function (
            fromCharacter, toCharacter, character, text,
            callback
        ) {
            const relData = R.path(relationsPath, this.database);
            const chain = PC.chainCheck([characterCheck(fromCharacter, this.database),
                characterCheck(toCharacter, this.database),
                PC.isString(character), PC.elementFromEnum(character, [fromCharacter, toCharacter]),
                PC.isString(text),
                PC.entityExistsCheck(arr2RelKey([fromCharacter, toCharacter]), relData.map(rel2RelKey))]);
            PC.precondition(chain, callback, () => {
                const rel = findRel(fromCharacter, toCharacter, relData);
                text = text.trim();
                rel[character] = text;
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.setRelationReadyStatus = function (fromCharacter, toCharacter, character, ready, callback) {
            const relData = R.path(relationsPath, this.database);
            const chain = PC.chainCheck([characterCheck(fromCharacter, this.database),
                characterCheck(toCharacter, this.database),
                PC.isString(character), PC.elementFromEnum(character, [fromCharacter, toCharacter]),
                PC.isBoolean(ready),
                PC.entityExistsCheck(arr2RelKey([fromCharacter, toCharacter]), relData.map(rel2RelKey))]);
            PC.precondition(chain, callback, () => {
                const rel = findRel(fromCharacter, toCharacter, relData);
                if (rel.starter === character) {
                    rel.starterTextReady = ready;
                } else {
                    rel.enderTextReady = ready;
                }
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.setRelationEssenceStatus = function (fromCharacter, toCharacter, essence, flag, callback) {
            const relData = R.path(relationsPath, this.database);
            const chain = PC.chainCheck([characterCheck(fromCharacter, this.database),
                characterCheck(toCharacter, this.database),
                PC.isString(essence), PC.elementFromEnum(essence, Constants.relationEssences),
                PC.isBoolean(flag),
                PC.entityExistsCheck(arr2RelKey([fromCharacter, toCharacter]), relData.map(rel2RelKey))]);
            PC.precondition(chain, callback, () => {
                const rel = findRel(fromCharacter, toCharacter, relData);
                if (flag === true) {
                    rel.essence = R.uniq(R.append(essence, rel.essence));
                } else {
                    rel.essence.splice(R.indexOf(essence, rel.essence), 1);
                }
                if (callback) callback();
            });
        };

        LocalDBMS.prototype.setOriginRelationText = function (fromCharacter, toCharacter, text, callback) {
            const relData = R.path(relationsPath, this.database);
            const chain = PC.chainCheck([characterCheck(fromCharacter, this.database),
                characterCheck(toCharacter, this.database), PC.isString(text),
                PC.entityExistsCheck(arr2RelKey([fromCharacter, toCharacter]), relData.map(rel2RelKey))]);
            PC.precondition(chain, callback, () => {
                const rel = findRel(fromCharacter, toCharacter, relData);
                text = text.trim();
                rel.origin = text;
                if (callback) callback();
            });
        };

        function _renameCharacter(type, fromName, toName) {
            if (type === 'player') return;
            const relData = R.path(relationsPath, this.database);
            const arrPair = R.partition(R.pipe(R.prop(fromName), R.isNil), relData);
            arrPair[1] = arrPair[1].map((rel) => {
                rel[toName] = rel[fromName];
                delete rel[fromName];
                if (rel.starter === fromName) {
                    rel.starter = toName;
                }
                if (rel.ender === fromName) {
                    rel.ender = toName;
                }
                return rel;
            });
            this.database.Relations = R.concat(arrPair[0], arrPair[1]);
        }

        addListener('renameProfile', _renameCharacter);

        function _removeCharacter(type, characterName) {
            if (type === 'player') return;
            const relData = R.path(relationsPath, this.database);
            this.database.Relations = R.filter(R.pipe(R.prop(characterName), R.isNil), relData);
        }

        addListener('removeProfile', _removeCharacter);
    }

    callback2(relationsAPI);
})(api => (typeof exports === 'undefined' ? (this.relationsAPI = api) : (module.exports = api)));

/*Copyright 2018 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((callback2) => {
    function slidersAPI(LocalDBMS, opts) {
        const {
            R, Constants, Errors, addListener, dbmsUtils, CU, PC
        } = opts;
        
        const path = ['Sliders'];
        
        LocalDBMS.prototype.getSliderData = function(callback){
            callback(null, R.clone(R.path(path, this.database)));
        }
        
        LocalDBMS.prototype.moveSlider = function(index, pos, callback){
            const model = R.path(path, this.database);
            const chain = PC.chainCheck([PC.isNumber(index), PC.isInRange(index, 0, model.length-1),
                PC.isNumber(pos), PC.isInRange(pos, 0, model.length)]);
            PC.precondition2(chain).then(() => {
                if(pos > index){
                    pos--;
                }
                var tmp = model[index];
                model.splice(index, 1);
                model.splice(pos, 0, tmp);
                
                if(callback) callback();
            }).catch(callback);
        }
        
        LocalDBMS.prototype.createSlider = function(name, top, bottom, callback){
            const chain = PC.chainCheck([PC.isString(name),PC.isString(top),PC.isString(bottom)]);
            PC.precondition2(chain).then(() => {
                R.path(path, this.database).push({ name, top, bottom, value: 0 });
                callback();
            }).catch(callback);
        }
        
        LocalDBMS.prototype.updateSliderNaming = function(index, name, top, bottom, callback){
            const model = R.path(path, this.database);
            const chain = PC.chainCheck([PC.isNumber(index), PC.isInRange(index, 0, model.length-1),
                PC.isString(name),PC.isString(top),PC.isString(bottom)]);
            PC.precondition2(chain).then(() => {
                model[index].name = name;
                model[index].top = top;
                model[index].bottom = bottom;
                callback();
            }).catch(callback);
        }
        
        LocalDBMS.prototype.updateSliderValue = function(index, value, callback){
            const model = R.path(path, this.database);
            const chain = PC.chainCheck([PC.isNumber(index), PC.isInRange(index, 0, model.length-1),
                PC.isNumber(value), PC.isInRange(value, -10, 10)]);
            PC.precondition2(chain).then(() => {
                model[index].value = value;
                callback();
            }).catch(callback);
        }
        
        LocalDBMS.prototype.removeSlider = function(index, callback){
            const model = R.path(path, this.database);
            const chain = PC.chainCheck([PC.isNumber(index), PC.isInRange(index, 0, model.length-1)]);
            PC.precondition2(chain).then(() => {
                CU.removeFromArrayByIndex(model, index);
                callback();
            }).catch(callback);
        }
    }
    callback2(slidersAPI);
})(api => (typeof exports === 'undefined' ? (this.slidersAPI = api) : (module.exports = api)));
/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function statisticsAPI(LocalDBMS, opts) {
        const { R, CommonUtils, Constants } = opts;

        let _countCharacterSymbols;

        LocalDBMS.prototype.getStatistics = function (callback) {
            const that = this;
            this.getAllCharacterGroupTexts((err, groupTexts) => {
                if (err) { callback(err); return; }
                _getStatistics(that.database, groupTexts, callback);
            });
        };

        function _getStatistics(database, groupTexts, callback) {
            const statistics = {};
            statistics.storyNumber = Object.keys(database.Stories).length;
            statistics.characterNumber = Object.keys(database.Characters).length;
            statistics.groupNumber = Object.keys(database.Groups).length;
            statistics.playerNumber = Object.keys(database.Players).length;

            statistics.eventsNumber = R.sum(R.values(database.Stories).map(R.compose(R.length, R.prop('events'))));

            statistics.userNumber = 1;
            if (database.ManagementInfo && database.ManagementInfo.UsersInfo) {
                statistics.userNumber = Object.keys(database.ManagementInfo.UsersInfo).length;
            }

            statistics.textCharactersCount = _countTextCharacters(database);
            statistics.textCharacterNumber = R.sum(R.values(statistics.textCharactersCount));
            statistics.bindingStats = _countBindingStats(database);

            const firstLastEventTime = _getFirstLastEventTime(database);

            statistics.firstEvent = firstLastEventTime[0] ? firstLastEventTime[0] : '';
            statistics.lastEvent = firstLastEventTime[1] ? firstLastEventTime[1] : '';

            statistics.storyEventsHist = _getHistogram(database, story => story.events.length);

            statistics.storyCharactersHist = _getHistogram(database, story => Object.keys(story.characters).length);

            statistics.eventCompletenessHist = _getEventCompletenessHist(database);
            statistics.characterStoriesHist = _getCharacterHist(database, _countCharactersInStories);
            statistics.characterSymbolsHist = _getCharacterHist(database, _countCharacterSymbols(groupTexts));

            statistics.generalCompleteness = _getGeneralCompleteness(database);
            statistics.storyCompleteness = _getStoryCompleteness(database);
            statistics.relationCompleteness = _getRelationCompleteness(database);

            statistics.characterChart = _getChartData(database, 'characters', 'Characters');
            statistics.storyChart = _getChartData(database, 'stories', 'Stories');
            statistics.groupChart = _getChartData(database, 'groups', 'Groups');
            statistics.playerChart = _getChartData(database, 'players', 'Players');

            statistics.profileCharts = _getProfileChartData(database);

            callback(null, statistics);
        }

        function _makeNumberStep(array) {
            const max = array.reduce((max2, cur) => (cur > max2 ? cur : max2), array[0]);
            const min = array.reduce((min3, cur) => (cur < min3 ? cur : min3), array[0]);
            let step = Math.ceil((max - min) / 20);
            step = step === 0 ? 1 : step;
            let base = 1;
            while (step > base * 10) {
                base *= 10;
            }
            const arr = [1, 2, 5, 10, 12];
            for (let i = 0; i < arr.length - 1; i++) {
                if (base * arr[i] < step && step < base * arr[i + 1]) {
                    step = base * arr[i];
                    break;
                }
            }
            return step;
        }

        const filter = R.compose(R.contains(R.__, ['enum', 'number', 'checkbox']), R.prop('type'));

        function _getProfileChartData(database) {
            const characterCharts = _getProfileChartArray(database, 'Characters', 'CharacterProfileStructure');
            const playerCharts = _getProfileChartArray(database, 'Players', 'PlayerProfileStructure');
            const postProcess = R.curry((prefix, el) => {
                el.id = prefix + el.name;
                return el;
            });
            return {
                characterCharts: characterCharts.map(postProcess('character-')),
                playerCharts: playerCharts.map(postProcess('player-'))
            };
        }

        function _getProfileChartArray(database, profileType, profileStructureType) {
            const profileItems = database[profileStructureType].filter(filter).map(R.pick(['name', 'type']));

            const groupProfiles = R.groupBy(R.__, R.values(database[profileType]));
            const groupReduce = group => R.fromPairs(R.toPairs(group).map((elem) => {
                elem[1] = elem[1].length;
                return elem;
            }));
            const groupedValues = profileItems.map((profileItem) => {
                if (profileItem.type === 'enum' || profileItem.type === 'checkbox') {
                    return groupReduce(groupProfiles(R.prop(profileItem.name)));
                } else if (profileItem.type === 'number') {
                    const array = R.ap([R.prop(profileItem.name)], R.values(database[profileType]));
                    const step = _makeNumberStep(array);
                    return {
                        groups: groupReduce(groupProfiles(profile => Math.floor(profile[profileItem.name] / step))),
                        step
                    };
                }
                throw new Error(`Unexpected profile item type: ${profileItem.type}`);
            });

            return R.transpose([profileItems, groupedValues]).map(arr => R.assoc('data', arr[1], arr[0]));
        }

        function _makeChartLabel(key, value, total) {
            return [key, ': ', ((value / total) * 100).toFixed(0), '% (', value, '/', total, ')'].join('');
        }

        function _getChartData(database, objectKey, totalKey) {
            const characterChartData = [];
            const total = Object.keys(database[totalKey]).length;
            let sum = 0;
            if (database.ManagementInfo && database.ManagementInfo.UsersInfo) {
                let userInfo, value;
                R.keys(database.ManagementInfo.UsersInfo).forEach((key) => {
                    userInfo = database.ManagementInfo.UsersInfo[key];
                    value = userInfo[objectKey].length;
                    characterChartData.push({
                        value,
                        label: _makeChartLabel(key, value, total),
                    });
                    sum += value;
                });
                if (sum !== total) {
                    characterChartData.push({
                        value: total - sum,
                        label: _makeChartLabel('unknown', total - sum, total),
                    });
                }
            } else {
                characterChartData.push({
                    value: total,
                    label: _makeChartLabel('user', total, total),
                });
            }
            return characterChartData;
        }

        function _addToHist(hist, value, keyParam, label, startValue, mergeValues) {
            if (hist[keyParam]) {
                hist[keyParam].value = mergeValues(hist[keyParam].value, value);
                hist[keyParam].tip.push(label);
            } else {
                hist[keyParam] = {
                    value: startValue(value),
                    label: keyParam,
                    tip: [label]
                };
            }
        }

        function _countCharactersInStories(database, stats) {
            R.values(database.Stories).forEach((story) => {
                R.keys(story.characters).forEach((characterName) => {
                    stats[characterName]++;
                });
            });
        }

        _countCharacterSymbols = R.curry((groupTexts, database, stats) => {
            R.values(database.Stories).forEach((story) => {
                story.events.forEach((event) => {
                    R.keys(event.characters).forEach((characterName) => {
                        if (event.characters[characterName].text.length !== 0) {
                            stats[characterName] += _noWhiteSpaceLength(event.characters[characterName].text);
                        } else {
                            stats[characterName] += _noWhiteSpaceLength(event.text);
                        }
                    });
                });
            });
            R.keys(groupTexts).forEach((characterName) => {
                stats[characterName] += R.sum(groupTexts[characterName].map(R.pipe(R.prop('text'), _noWhiteSpaceLength)));
            });
        });

        function _makeLabel(characterName, stat) {
            return `${characterName} (${stat})`;
        }

        function _makeTip(keyParam, step, tipData) {
            return `${keyParam * step}-${((keyParam + 1) * step) - 1}: ${tipData.join(', ')}`;
        }

        function _getCharacterHist(database, statsCollector) {
            const characterList = R.keys(database.Characters);
            const stats = R.zipObj(characterList, R.repeat(0, characterList.length));

            statsCollector(database, stats);

            const array = R.values(stats);
            const step = _makeNumberStep(array);

            const hist = R.keys(stats).reduce((hist2, characterName) => {
                const keyParam = Math.floor(stats[characterName] / step);
                _addToHist(hist2, 1, keyParam, _makeLabel(characterName, stats[characterName]), R.always(1), R.add);
                return hist2;
            }, []);

            for (let i = 0; i < R.max(hist.length, 10); i++) {
                if (!hist[i]) {
                    hist[i] = null;
                } else {
                    hist[i].tip = _makeTip(i, step, hist[i].tip);
                }
            }
            return hist;
        }

        function _getEventCompletenessHist(database) {
            const hist = [];
            R.values(database.Stories).forEach((story) => {
                const storyCompleteness = _calcStoryCompleteness(story);
                const keyParam = Math.floor(10 * storyCompleteness);
                const label = `${story.name} (${(100 * storyCompleteness).toFixed(0)}%)`;
                _addToHist(hist, 1, keyParam, label, R.always(1), R.add);
            });
            for (let i = 0; i < 11; i++) {
                if (!hist[i]) {
                    hist[i] = null;
                } else {
                    hist[i].tip = hist[i].tip.join(', ');
                }
            }
            return hist;
        }

        function _getStoryAdaptationStats(story) {
            let finishedAdaptations = 0;
            let allAdaptations = 0;
            story.events.forEach((event) => {
                allAdaptations += Object.keys(event.characters).length;
                finishedAdaptations += R.values(event.characters).filter(R.prop('ready')).length;
            });
            return {
                finishedAdaptations,
                allAdaptations
            };
        }

        function _calcStoryCompleteness(story) {
            const stats = _getStoryAdaptationStats(story);
            return stats.allAdaptations !== 0 ? stats.finishedAdaptations / stats.allAdaptations : 0;
        }

        const calcPercent = (part, all) => ((part / (all === 0 ? 1 : all)) * 100).toFixed(1);

        function _getStoryCompleteness(database) {
            const allStories = Object.keys(database.Stories).length;
            const finishedStories = R.values(database.Stories).map(_getStoryAdaptationStats)
                .filter(stats => stats.allAdaptations === stats.finishedAdaptations && stats.allAdaptations !== 0)
                .length;
            return [calcPercent(finishedStories, allStories), finishedStories, allStories];
        }

        function _getGeneralCompleteness(database) {
            let finishedAdaptations = 0, allAdaptations = 0;

            R.values(database.Stories).map(_getStoryAdaptationStats).forEach((stats) => {
                finishedAdaptations += stats.finishedAdaptations;
                allAdaptations += stats.allAdaptations;
            });
            return [calcPercent(finishedAdaptations, allAdaptations), finishedAdaptations, allAdaptations];
        }

        const rel2bools = R.pipe(R.pick(['starterTextReady', 'enderTextReady']), R.values, R.filter(R.identity));

        function _getRelationCompleteness(database) {
            let finishedRelations = 0, allRelations = 0;
            allRelations = database.Relations.length * 2;
            finishedRelations = R.flatten(database.Relations.map(rel2bools)).length;
            return [calcPercent(finishedRelations, allRelations), finishedRelations, allRelations];
        }

        function _noWhiteSpaceLength(str) {
            return str.replace(/\s/g, '').length;
        }

        function _countTextCharacters(database) {
            const counts = {
                writerStories: 0,
                eventOrigins: 0,
                eventAdaptations: 0,
                groups: 0,
                relations: 0,
            };
            R.values(database.Stories).forEach((story) => {
                counts.writerStories += _noWhiteSpaceLength(story.story);
                story.events.forEach((event) => {
                    counts.eventOrigins += _noWhiteSpaceLength(event.text);
                    R.keys(event.characters).forEach((character) => {
                        counts.eventAdaptations += _noWhiteSpaceLength(event.characters[character].text);
                    });
                });
            });
            counts.groups = R.sum(R.values(database.Groups).map(R.compose(_noWhiteSpaceLength, R.prop('characterDescription'))));
            const extraFields = R.difference(Constants.relationFields, ['origin']);
            counts.relations = R.sum(R.flatten(database.Relations.map(R.pipe(
                R.omit(extraFields),
                R.values
            ))).map(_noWhiteSpaceLength));
            return counts;
        }

        function _countBindingStats(database) {
            const charNum = R.keys(database.Characters).length;
            const playerNum = R.keys(database.Players).length;
            const bindingNum = R.keys(database.ProfileBindings).length;

            return {
                freeCharacters: charNum - bindingNum,
                freePlayers: playerNum - bindingNum,
                bindingNum,
            };
        }

        function _getFirstLastEventTime(database) {
            let lastEvent = null, firstEvent = null;
            R.values(database.Stories).forEach((story) => {
                story.events.filter(event => event.time !== '').forEach((event) => {
                    const date = new Date(event.time);
                    if (lastEvent === null || date > lastEvent) {
                        lastEvent = date;
                    }
                    if (firstEvent === null || date < firstEvent) {
                        firstEvent = date;
                    }
                });
            });
            return [firstEvent, lastEvent];
        }

        function _getHistogram(database, keyParamDelegate) {
            const hist = [];
            R.values(database.Stories).forEach((story) => {
                const keyParam = keyParamDelegate(story);
                _addToHist(hist, 1, keyParam, story.name, R.always(1), R.add);
            });
            for (let i = 0; i < hist.length; i++) {
                if (!hist[i]) {
                    hist[i] = null;
                } else {
                    hist[i].tip = `${i}: ${hist[i].tip.join(', ')}`;
                }
            }
            return hist;
        }
    }

    callback2(statisticsAPI);
})(api => (typeof exports === 'undefined' ? (this.statisticsAPI = api) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function storyAdaptationsAPI(LocalDBMS, opts) {
        const {
            R, dbmsUtils, Constants, CU, PC
        } = opts;

        let _isStoryEmpty, _isStoryFinished;

        //events
        LocalDBMS.prototype.getFilteredStoryNames = function (showOnlyUnfinishedStories, callback) {
            PC.precondition(PC.isBoolean(showOnlyUnfinishedStories), callback, () => {
                let storyArray = Object.keys(this.database.Stories).sort(CU.charOrdA);
                const that = this;
                storyArray = storyArray.map(elem => ({
                    storyName: elem,
                    isFinished: _isStoryFinished(that.database, elem),
                    isEmpty: _isStoryEmpty(that.database, elem)
                }));

                if (showOnlyUnfinishedStories) {
                    storyArray = storyArray.filter(elem => !elem.isFinished || elem.isEmpty);
                }
                callback(null, storyArray);
            });
        };

        _isStoryEmpty = (database, storyName) => database.Stories[storyName].events.length === 0;

        dbmsUtils._isStoryEmpty = _isStoryEmpty;

        _isStoryFinished = (database, storyName) =>
            database.Stories[storyName].events.every(event =>
                !R.isEmpty(event.characters) && R.values(event.characters).every(adaptation => adaptation.ready));

        dbmsUtils._isStoryFinished = _isStoryFinished;

        //adaptations
        LocalDBMS.prototype.getStory = function (storyName, callback) {
            const chain = [PC.isString(storyName), PC.entityExists(storyName, R.keys(this.database.Stories))];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                callback(null, CU.clone(this.database.Stories[storyName]));
            });
        };

        const getValueCheck = function (type, value) {
            switch (type) {
            case 'text':
            case 'time':
                return PC.isString(value);
            case 'ready':
                return PC.isBoolean(value);
            default:
                throw new Error(`Unexpected type ${type}`);
            }
        };

        // preview, events
        LocalDBMS.prototype.setEventAdaptationProperty = function (
            storyName, eventIndex, characterName, type, value,
            callback
        ) {
            let chain = [PC.isString(storyName), PC.entityExists(storyName, R.keys(this.database.Stories)),
                PC.isNumber(eventIndex), PC.isString(type), PC.elementFromEnum(type, Constants.adaptationProperties),
                PC.isString(characterName)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const story = this.database.Stories[storyName];
                chain = [PC.entityExists(characterName, R.keys(story.characters)),
                    PC.isInRange(eventIndex, 0, story.events.length - 1), getValueCheck(type, value)];
                PC.precondition(PC.chainCheck(chain), callback, () => {
                    const event = story.events[eventIndex];
                    PC.precondition(PC.entityExists(characterName, R.keys(event.characters)), callback, () => {
                        event.characters[characterName][type] = value;
                        callback();
                    });
                });
            });
        };
    }
    callback2(storyAdaptationsAPI);
})(api => (typeof exports === 'undefined' ? (this.storyAdaptationsAPI = api) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names,prefer-rest-params */

((callback2) => {
    function storyBaseAPI(LocalDBMS, opts) {
        const {
            R, Errors, CU, PC
        } = opts;

        // stories, timeline
        LocalDBMS.prototype.getStoryNamesArray = function (callback) {
            callback(null, Object.keys(this.database.Stories).sort(CU.charOrdA));
        };
        // social network
        LocalDBMS.prototype.getAllStories = function (callback) {
            callback(null, CU.clone(this.database.Stories));
        };

        //stories
        LocalDBMS.prototype.getWriterStory = function (storyName, callback) {
            PC.precondition(PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), callback, () => {
                callback(null, this.database.Stories[storyName].story);
            });
        };
        //stories
        LocalDBMS.prototype.setWriterStory = function (storyName, value, callback) {
            const chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), PC.isString(value)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                this.database.Stories[storyName].story = value;
                callback();
            });
        };

        // stories
        LocalDBMS.prototype.createStory = function (storyName, callback) {
            PC.precondition(PC.createEntityCheck2(storyName, R.keys(this.database.Stories), 'entity-lifeless-name', 'entity-of-story'), callback, () => {
                this.database.Stories[storyName] = {
                    name: storyName,
                    story: '',
                    characters: {},
                    events: []
                };
                this.ee.trigger('createStory', arguments);
                callback();
            });
        };
        // stories
        LocalDBMS.prototype.renameStory = function (fromName, toName, callback) {
            PC.precondition(PC.renameEntityCheck(fromName, toName, R.keys(this.database.Stories)), callback, () => {
                const data = this.database.Stories[fromName];
                data.name = toName;
                this.database.Stories[toName] = data;
                delete this.database.Stories[fromName];
                this.ee.trigger('renameStory', arguments);
                callback();
            });
        };

        // stories
        LocalDBMS.prototype.removeStory = function (storyName, callback) {
            PC.precondition(PC.removeEntityCheck(storyName, R.keys(this.database.Stories)), callback, () => {
                delete this.database.Stories[storyName];
                this.ee.trigger('removeStory', arguments);
                callback();
            });
        };
    }
    callback2(storyBaseAPI);
})(api => (typeof exports === 'undefined' ? (this.storyBaseAPI = api) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function storyCharactersAPI(LocalDBMS, opts) {
        const {
            R, Errors, addListener, Constants, CU, PC
        } = opts;

        //event presence
        LocalDBMS.prototype.getStoryCharacterNamesArray = function (storyName, callback) {
            PC.precondition(PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), callback, () => {
                const localCharacters = this.database.Stories[storyName].characters;
                callback(null, Object.keys(localCharacters).sort(CU.charOrdA));
            });
        };

        //story characters
        LocalDBMS.prototype.getStoryCharacters = function (storyName, callback) {
            PC.precondition(PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), callback, () => {
                callback(null, CU.clone(this.database.Stories[storyName].characters));
            });
        };

        //story characters
        LocalDBMS.prototype.addStoryCharacter = function (storyName, characterName, callback) {
            const chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)),
                PC.entityExistsCheck(characterName, R.keys(this.database.Characters))];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const story = this.database.Stories[storyName];
                PC.precondition(PC.entityIsNotUsed(characterName, R.keys(story.characters)), callback, () => {
                    story.characters[characterName] = {
                        name: characterName,
                        inventory: '',
                        activity: {}
                    };

                    callback();
                });
            });
        };

        //story characters
        LocalDBMS.prototype.switchStoryCharacters = function (storyName, fromName, toName, callback) {
            let cond = PC.entityExistsCheck(storyName, R.keys(this.database.Stories));
            PC.precondition(cond, callback, () => {
                const story = this.database.Stories[storyName];
                cond = PC.switchEntityCheck(
                    fromName, toName, R.keys(this.database.Characters),
                    R.keys(story.characters)
                );
                PC.precondition(cond, callback, () => {
                    story.characters[toName] = story.characters[fromName];
                    story.characters[toName].name = toName;
                    delete story.characters[fromName];

                    story.events.forEach((event) => {
                        if (event.characters[fromName]) {
                            event.characters[toName] = event.characters[fromName];
                            delete event.characters[fromName];
                        }
                    });

                    callback();
                });
            });
        };

        //story characters
        LocalDBMS.prototype.removeStoryCharacter = function (storyName, characterName, callback) {
            const cond = PC.entityExistsCheck(storyName, R.keys(this.database.Stories));
            PC.precondition(cond, callback, () => {
                const story = this.database.Stories[storyName];
                PC.precondition(PC.entityExistsCheck(characterName, R.keys(story.characters)), callback, () => {
                    delete story.characters[characterName];
                    story.events.forEach((event) => {
                        delete event.characters[characterName];
                    });
                    callback();
                });
            });
        };

        // story characters
        LocalDBMS.prototype.updateCharacterInventory = function (storyName, characterName, inventory, callback) {
            const chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), PC.isString(inventory)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const story = this.database.Stories[storyName];
                PC.precondition(PC.entityExistsCheck(characterName, R.keys(story.characters)), callback, () => {
                    story.characters[characterName].inventory = inventory;
                    callback();
                });
            });
        };

        //story characters
        LocalDBMS.prototype.onChangeCharacterActivity = function (
            storyName, characterName, activityType, checked,
            callback
        ) {
            const chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), PC.isString(activityType),
                PC.elementFromEnum(activityType, Constants.characterActivityTypes), PC.isBoolean(checked)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const story = this.database.Stories[storyName];
                PC.precondition(PC.entityExistsCheck(characterName, R.keys(story.characters)), callback, () => {
                    const character = story.characters[characterName];
                    if (checked) {
                        character.activity[activityType] = true;
                    } else {
                        delete character.activity[activityType];
                    }
                    callback();
                });
            });
        };

        //event presence
        LocalDBMS.prototype.addCharacterToEvent = function (storyName, eventIndex, characterName, callback) {
            let chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), PC.isNumber(eventIndex)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const story = this.database.Stories[storyName];
                chain = [PC.entityExistsCheck(characterName, R.keys(story.characters)),
                    PC.isInRange(eventIndex, 0, story.events.length - 1)];
                PC.precondition(PC.chainCheck(chain), callback, () => {
                    const event = story.events[eventIndex];
                    PC.precondition(PC.entityIsNotUsed(characterName, R.keys(event.characters)), callback, () => {
                        event.characters[characterName] = {
                            text: '',
                            time: ''
                        };
                        callback();
                    });
                });
            });
        };

        // event presence
        LocalDBMS.prototype.removeCharacterFromEvent = function (storyName, eventIndex, characterName, callback) {
            let chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), PC.isNumber(eventIndex)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const story = this.database.Stories[storyName];
                chain = [PC.entityExistsCheck(characterName, R.keys(story.characters)),
                    PC.isInRange(eventIndex, 0, story.events.length - 1)];
                PC.precondition(PC.chainCheck(chain), callback, () => {
                    const event = story.events[eventIndex];
                    PC.precondition(PC.entityExists(characterName, R.keys(event.characters)), callback, () => {
                        delete this.database.Stories[storyName].events[eventIndex].characters[characterName];
                        callback();
                    });
                });
            });
        };

        function _renameCharacterInStories(type, fromName, toName) {
            if (type === 'player') return;
            const renameEventCharacter = (event) => {
                if (event.characters[fromName]) {
                    const data = event.characters[fromName];
                    event.characters[toName] = data;
                    delete event.characters[fromName];
                }
            };

            R.values(this.database.Stories).filter(story => story.characters[fromName] !== undefined)
                .forEach((story) => {
                    const data = story.characters[fromName];
                    data.name = toName;
                    story.characters[toName] = data;
                    delete story.characters[fromName];
                    story.events.forEach(renameEventCharacter);
                });
        }

        addListener('renameProfile', _renameCharacterInStories);

        function _removeCharacterFromStories(type, characterName) {
            if (type === 'player') return;
            const cleanEvent = (event) => {
                if (event.characters[characterName]) {
                    delete event.characters[characterName];
                }
            };

            R.values(this.database.Stories).forEach((story) => {
                if (story.characters[characterName]) {
                    delete story.characters[characterName];
                    story.events.forEach(cleanEvent);
                }
            });
        }

        addListener('removeProfile', _removeCharacterFromStories);
    }
    callback2(storyCharactersAPI);
})(api => (typeof exports === 'undefined' ? (this.storyCharactersAPI = api) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

/* eslint-disable func-names */

((callback2) => {
    function storyEventsAPI(LocalDBMS, opts) {
        const {
            R, Errors, Constants, CU, PC
        } = opts;

        //story events, event presence
        LocalDBMS.prototype.getStoryEvents = function (storyName, callback) {
            PC.precondition(PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), callback, () => {
                callback(null, CU.clone(this.database.Stories[storyName].events));
            });
        };

        //story events
        LocalDBMS.prototype.createEvent = function (storyName, eventName, selectedIndex, callback) {
            const chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), PC.isNumber(selectedIndex),
                PC.isString(eventName), PC.isNotEmptyString(eventName)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const story = this.database.Stories[storyName];
                PC.precondition(PC.isInRange(selectedIndex, 0, story.events.length), callback, () => {
                    const event = {
                        name: eventName,
                        text: '',
                        time: '',
                        characters: {}
                    };
                    story.events.splice(selectedIndex, 0, event);
                    callback();
                });
            });
        };

        //story events
        LocalDBMS.prototype.moveEvent = function (storyName, index, newIndex, callback) {
            let chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), PC.isNumber(index),
                PC.isNumber(newIndex)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const { events } = this.database.Stories[storyName];
                chain = [PC.isInRange(index, 0, events.length - 1), PC.isInRange(newIndex, 0, events.length)];
                PC.precondition(PC.chainCheck(chain), callback, () => {
                    if (newIndex > index) {
                        newIndex--;
                    }
                    const tmp = events[index];
                    events.splice(index, 1);
                    events.splice(newIndex, 0, tmp);
                    callback();
                });
            });
        };

        //story events
        LocalDBMS.prototype.cloneEvent = function (storyName, index, callback) {
            let chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), PC.isNumber(index)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const { events } = this.database.Stories[storyName];
                chain = [PC.isInRange(index, 0, events.length - 1)];
                PC.precondition(PC.chainCheck(chain), callback, () => {
                    events.splice(index, 0, CU.clone(events[index]));
                    callback();
                });
            });
        };

        //story events
        LocalDBMS.prototype.mergeEvents = function (storyName, index, callback) {
            let chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), PC.isNumber(index)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const { events } = this.database.Stories[storyName];
                chain = [PC.isInRange(index, 0, events.length - 2)];
                PC.precondition(PC.chainCheck(chain), callback, () => {
                    const event1 = events[index];
                    const event2 = events[index + 1];

                    event1.name += `/${event2.name}`;
                    event1.text += `\n\n${event2.text}`;
                    R.keys(event2.characters).forEach((characterName) => {
                        if (event1.characters[characterName]) {
                            event1.characters[characterName].text += `\n\n${event2.characters[characterName].text}`;
                            event1.characters[characterName].time += `/${event2.characters[characterName].time}`;
                            event1.characters[characterName].ready = false;
                        } else {
                            event1.characters[characterName] = event2.characters[characterName];
                        }
                    });
                    CU.removeFromArrayByIndex(events, index + 1);

                    callback();
                });
            });
        };

        //story events
        LocalDBMS.prototype.removeEvent = function (storyName, index, callback) {
            let chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), PC.isNumber(index)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const { events } = this.database.Stories[storyName];
                chain = [PC.isInRange(index, 0, events.length - 1)];
                PC.precondition(PC.chainCheck(chain), callback, () => {
                    CU.removeFromArrayByIndex(events, index);
                    callback();
                });
            });
        };

        // story events, preview, adaptations
        LocalDBMS.prototype.setEventOriginProperty = function (storyName, index, property, value, callback) {
            let chain = [PC.entityExistsCheck(storyName, R.keys(this.database.Stories)), PC.isNumber(index),
                PC.isString(property), PC.elementFromEnum(property, Constants.originProperties), PC.isString(value)];
            PC.precondition(PC.chainCheck(chain), callback, () => {
                const story = this.database.Stories[storyName];
                chain = [PC.isInRange(index, 0, story.events.length - 1)];
                PC.precondition(PC.chainCheck(chain), callback, () => {
                    story.events[index][property] = value;
                    callback();
                });
            });
        };
    }
    callback2(storyEventsAPI);
})(api => (typeof exports === 'undefined' ? (this.storyEventsAPI = api) : (module.exports = api)));

/*Copyright 2015 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

/* eslint-disable func-names */

((callback2) => {
    function storyViewAPI(LocalDBMS, opts) {
        const {
            R, dateFormat, CU, PC
        } = opts;

        const characterCheck = (characterName, database) => PC.chainCheck([PC.isString(characterName),
            PC.entityExists(characterName, R.keys(database.Characters))]);

        // preview
        LocalDBMS.prototype.getAllInventoryLists = function (characterName, callback) {
            PC.precondition(characterCheck(characterName, this.database), callback, () => {
                const array = R.values(this.database.Stories)
                    .filter(story => story.characters[characterName] !== undefined &&
                        story.characters[characterName].inventory !== '')
                    .map(story => ({
                        storyName: story.name,
                        inventory: story.characters[characterName].inventory
                    }));
                callback(null, array);
            });
        };

        // preview
        LocalDBMS.prototype.getCharacterEventGroupsByStory = function (characterName, callback) {
            PC.precondition(characterCheck(characterName, this.database), callback, () => {
                const eventGroups = [];

                let events;

                const that = this;
                Object.keys(this.database.Stories).filter(storyName =>
                    that.database.Stories[storyName].characters[characterName]).forEach((storyName) => {
                    events = [];

                    const tmpEvents = CU.clone(that.database.Stories[storyName].events);
                    tmpEvents.map((elem, i) => {
                        elem.index = i;
                        elem.storyName = storyName;
                        elem.isTimeEmpty = elem.time === '';
                        elem.time = elem.isTimeEmpty ? that.database.Meta.date : elem.time;
                        return elem;
                    }).filter(event => event.characters[characterName]).forEach((event) => {
                        events.push(event);
                    });

                    eventGroups.push({
                        storyName,
                        events
                    });
                });
                eventGroups.sort(CU.charOrdAFactory(R.prop('storyName')));
                callback(null, eventGroups);
            });
        };

        // preview
        LocalDBMS.prototype.getCharacterEventsByTime = function (characterName, callback) {
            PC.precondition(characterCheck(characterName, this.database), callback, () => {
                let allEvents = [];

                const that = this;
                Object.keys(this.database.Stories).filter(storyName =>
                    that.database.Stories[storyName].characters[characterName]).forEach((storyName) => {
                    const events = CU.clone(that.database.Stories[storyName].events);
                    allEvents = allEvents.concat(events.map((elem, i) => {
                        elem.index = i;
                        elem.storyName = storyName;
                        elem.isTimeEmpty = elem.time === '';
                        elem.time = elem.isTimeEmpty ? that.database.Meta.date : elem.time;
                        return elem;
                    }).filter(event => event.characters[characterName]));
                });

                allEvents.sort(CU.eventsByTime);
                callback(null, allEvents);
            });
        };

        // timeline
        LocalDBMS.prototype.getEventsTimeInfo = function (callback) {
            const result = R.flatten(R.values(CU.clone(this.database.Stories)).map(story => story.events.map((event, index) => R.merge(R.pick(['name', 'time'], event), {
                characters: R.keys(event.characters),
                storyName: story.name,
                index
            }))));

            callback(null, result);
        };

        // character filter
        LocalDBMS.prototype.getCharactersSummary = function (callback) {
            const characters = R.keys(this.database.Characters);
            const charactersInfo = {};
            characters.forEach((character) => {
                charactersInfo[character] = {
                    active: 0,
                    follower: 0,
                    defensive: 0,
                    passive: 0,
                    totalAdaptations: 0,
                    finishedAdaptations: 0,
                    totalStories: 0
                };
            });

            R.values(this.database.Stories).forEach((story) => {
                R.values(story.characters).forEach((storyCharacter) => {
                    const characterInfo = charactersInfo[storyCharacter.name];
                    characterInfo.totalStories++;
                    R.toPairs(storyCharacter.activity).forEach((activity) => {
                        if (activity[1] === true) {
                            characterInfo[activity[0]]++;
                        }
                    });
                });
                story.events.forEach((event) => {
                    R.toPairs(event.characters).forEach((eventCharacter) => {
                        const characterInfo = charactersInfo[eventCharacter[0]];
                        characterInfo.totalAdaptations++;
                        if (eventCharacter[1].ready) {
                            characterInfo.finishedAdaptations++;
                        }
                    });
                });
            });
            R.values(charactersInfo).forEach((characterInfo) => {
                characterInfo.completeness = Math.round((characterInfo.finishedAdaptations * 100) /
                    (characterInfo.totalAdaptations !== 0 ? characterInfo.totalAdaptations : 1));
            });
            callback(null, charactersInfo);
        };

        // character profile
        LocalDBMS.prototype.getCharacterReport = function (characterName, callback) {
            PC.precondition(characterCheck(characterName, this.database), callback, () => {
                const characterReport = R.values(this.database.Stories)
                    .filter(story => story.characters[characterName] !== undefined)
                    .map((story) => {
                        const charEvents = story.events.filter(event => event.characters[characterName] !== undefined);

                        const finishedAdaptations = charEvents
                            .filter(event => event.characters[characterName].ready === true).length;

                        let meets = {};
                        charEvents.forEach((event) => {
                            const chars = R.keys(event.characters);
                            meets = R.merge(meets, R.zipObj(chars, R.repeat(true, chars.length)));
                        });

                        delete meets[characterName];
                        meets = R.keys(meets).sort(CU.charOrdA);


                        return {
                            storyName: story.name,
                            inventory: story.characters[characterName].inventory,
                            activity: story.characters[characterName].activity,
                            meets,
                            totalAdaptations: charEvents.length,
                            finishedAdaptations
                        };
                    });
                characterReport.sort(CU.charOrdAFactory(R.prop('storyName')));

                callback(null, characterReport);
            });
        };
    }
    callback2(storyViewAPI);
})(api => (typeof exports === 'undefined' ? (this.storyViewAPI = api) : (module.exports = api)));

/*Copyright 2017 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
    limitations under the License. */

'use strict';

((callback2) => {
    function textSearchAPI(LocalDBMS, opts) {
        const {
            R, Constants, Errors, CU, PC
        } = opts;

        const searchers = {};

        //        LocalDBMS.prototype.getTextsTest = function(searchStr, textTypes, caseSensitive, callback){
        //            var errPrint = function(err){
        //                console.log(err);
        //            };
        //            var okPrint = function(){
        //                console.log('OK');
        //            };
        //            this.getTexts(123, null, null, errPrint, okPrint);
        //            this.getTexts('23', true, null, errPrint, okPrint);
        //            this.getTexts('23', ['window'], null, errPrint, okPrint);
        //            this.getTexts('23', [], '123', errPrint, okPrint);
        //            callback('test result');
        //        };

//  [
//      {
//          name: 'searchStr',
//          check: [{
//              type: 'isString'
//          }]
//      },
//      {
//          name: 'textTypes',
//          check: [{
//              type: 'isArray',
//              subtype: 'string'
//          }, {
//              type: 'elementsFromEnum',
//              arr: (searchers) => R.keys(searchers)
//          }]
//      },
//      {
//          name: 'caseSensitive',
//          check: [{
//              type: 'isBoolean'
//          }]
//      },
//  ]
        // eslint-disable-next-line func-names
        LocalDBMS.prototype.getTexts = function (searchStr, textTypes, caseSensitive, callback) {
            const textTypesPrecondition = PC.elementsFromEnum(R.__, R.keys(searchers));
            const check = PC.chainCheck([PC.isString(searchStr), PC.isArray(textTypes),
                textTypesPrecondition(textTypes), PC.isBoolean(caseSensitive)]);
            PC.precondition(check, callback, () => {
                let test;
                if (caseSensitive) {
                    test = text => (text.indexOf(searchStr) !== -1);
                } else {
                    searchStr = searchStr.toLowerCase();
                    test = text => (text.toLowerCase().indexOf(searchStr) !== -1);
                }
                callback(null, textTypes.map(textType => ({
                    textType,
                    result: searchers[textType](textType, test, this.database)
                })));
            });
        };

        const format = (name, type, text) => ({
            name,
            type,
            text
        });

        searchers.writerStory = (textType, test, database) => R.values(database.Stories)
            .filter(story => test(story.story))
            .map(story => format(story.name, 'text', story.story));

        searchers.eventOrigins = (textType, test, database) => R.flatten(R.values(database.Stories)
            .map(story => story.events
                .filter(event => test(event.text))
                .map(event => format(`${story.name}/${event.name}`, 'text', event.text))));

        searchers.eventAdaptations = (textType, test, database) => R.flatten(R.values(database.Stories)
            .map(story => story.events
                .map(event => R.keys(event.characters)
                    .filter(char => test(event.characters[char].text))
                    .map(char => format(
                        `${story.name}/${event.name}/${char}`, 'text',
                        event.characters[char].text
                    )))));

        const profileSearch = R.curry((profiles, structure, textType, test, database) => {
            const items = database[structure].filter(item => item.type === 'string' || item.type === 'text');
            return R.flatten(R.values(database[profiles])
                .map(profile => items.filter(item => test(profile[item.name]))
                    .map(item => format(`${profile.name}/${item.name}`, item.type, profile[item.name]))));
        });
        searchers.characterProfiles = profileSearch('Characters', 'CharacterProfileStructure');
        searchers.playerProfiles = profileSearch('Players', 'PlayerProfileStructure');

        searchers.relations = (textType, test, database) => {
            let relations = R.clone(database.Relations);
            relations = relations.map(R.omit(R.difference(Constants.relationFields, ['origin']))).map((rel) => {
                R.difference(R.keys(rel), ['origin']).forEach((key, i) => {
                    rel[`char${i}`] = key;
                });
                return rel;
            });
            return R.flatten(relations.map(rel => [
                format(`${rel.char0}/${rel.char1}`, 'text', rel[rel.char0]),
                format(`${rel.char0} ? ${rel.char1}`, 'text', rel.origin),
                format(`${rel.char1}/${rel.char0}`, 'text', rel[rel.char1]),
            ])).filter(obj => test(obj.text));
        };

        searchers.groups = (textType, test, database) => {
            const groups = database.Groups;
            return R.flatten(R.values(groups).map((group) => {
                const arr = [];
                if (test(group.masterDescription)) {
                    arr.push(format(`${group.name}/writer`, 'text', group.masterDescription));
                }
                if (test(group.characterDescription)) {
                    arr.push(format(`${group.name}/character`, 'text', group.characterDescription));
                }
                return arr;
            }));
        };
    }
    callback2(textSearchAPI);
})(api => (typeof exports === 'undefined' ? (this.textSearchAPI = api) : (module.exports = api)));

/*Copyright 2015, 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

(function(exports){

    exports.data = {
            "Meta": {
                "name": "Властелин колец",
                "date": "3019/02/27 00:00",
                "preGameDate": "3018/01/01 00:00",
                "description": "События фильма, как основа для ролевой игры. В этой базе изложен первый фильм из трилогии Властелин колец. Хронология событий взята из книги.",
                "saveTime": "Sun Jul 22 2018 15:48:37 GMT+0500 (Екатеринбург, стандартное время)"
              },
              "Characters": {
                "Фродо": {
                  "name": "Фродо",
                  "Пол": "М",
                  "Раса": "хоббит",
                  "Биография": "Хоббит, волею судеб ставший хранителем Единого Кольца, принадлежащего Тёмному Властелину. ",
                  "Вес, кг.": 64,
                  "Умеет петь": true,
                  "Снаряжение": "",
                  "Статус": "Свободна",
                  "Блок": "Светлый",
                  "Народ Гондора": false,
                  "Народ Рохана": false,
                  "Оружие": "каштаны"
                },
                "Сэм": {
                  "name": "Сэм",
                  "Пол": "М",
                  "Раса": "хоббит",
                  "Биография": "Садовник, слуга и верный товарищ Фродо.",
                  "Вес, кг.": 57,
                  "Умеет петь": true,
                  "Снаряжение": "Кастрюли",
                  "Статус": "Свободна",
                  "Блок": "Светлый",
                  "Народ Гондора": false,
                  "Народ Рохана": false,
                  "Оружие": "каштаны"
                },
                "Мерри": {
                  "name": "Мерри",
                  "Пол": "М",
                  "Раса": "хоббит",
                  "Биография": "Друг Фродо, взятый в поход за компанию.",
                  "Вес, кг.": 57,
                  "Умеет петь": true,
                  "Снаряжение": "",
                  "Статус": "Свободна",
                  "Блок": "Светлый",
                  "Народ Гондора": false,
                  "Народ Рохана": false,
                  "Оружие": "каштаны"
                },
                "Арагорн": {
                  "name": "Арагорн",
                  "Пол": "М",
                  "Раса": "человек",
                  "Биография": "Последний вождь следопытов и первый король Воссоединённого Королевства, прямой потомок северной ветви королевского рода Элендила (по линии Исилдура, её старшей ветви — династии Эмлайта Артэдайнского).\nАрагорн стал величайшим из Людей своей эпохи, возглавлял Людей Запада в войне против сил Саурона, помог уничтожить Кольцо Всевластия (был одним из Девяти его Хранителей), воссоединил королевства Арнора и Гондора. ",
                  "Вес, кг.": 80,
                  "Умеет петь": true,
                  "Снаряжение": "",
                  "Статус": "Занята",
                  "Блок": "Светлый",
                  "Народ Гондора": true,
                  "Народ Рохана": false,
                  "Оружие": "меч,лук,нож"
                },
                "Леголас": {
                  "name": "Леголас",
                  "Пол": "М",
                  "Раса": "эльф",
                  "Биография": "Сын Трандуила, короля эльфов Северного Лихолесья.",
                  "Вес, кг.": 57,
                  "Умеет петь": true,
                  "Снаряжение": "",
                  "Статус": "Свободна",
                  "Блок": "Светлый",
                  "Народ Гондора": false,
                  "Народ Рохана": false,
                  "Оружие": "лук,эльфийские ножи"
                },
                "Гимли": {
                  "name": "Гимли",
                  "Пол": "М",
                  "Раса": "гном",
                  "Биография": "Представитель одного из свободных народов Средиземья (гномов), объединившихся для борьбы со Злом. ",
                  "Вес, кг.": 80,
                  "Умеет петь": false,
                  "Снаряжение": "",
                  "Статус": "Свободна",
                  "Блок": "Светлый",
                  "Народ Гондора": false,
                  "Народ Рохана": false,
                  "Оружие": "топор"
                },
                "Саурон": {
                  "name": "Саурон",
                  "Пол": "М",
                  "Раса": "другое",
                  "Биография": "Низший дух из свиты Вала Аулэ. Саурон был одним из первых Майар, которые приняли сторону Мелькора, став одним из самых лояльных и самых ужасных его сподвижников, но после Войны Гнева и поражения своего господина Саурон возвысился до величайшего врага Свободных народов Средиземья на протяжении Второй и Третьей эпох.",
                  "Вес, кг.": 1,
                  "Умеет петь": false,
                  "Снаряжение": "палантир",
                  "Статус": "Свободна",
                  "Блок": "Тёмный",
                  "Народ Гондора": false,
                  "Народ Рохана": false,
                  "Оружие": ""
                },
                "Саруман": {
                  "name": "Саруман",
                  "Пол": "М",
                  "Раса": "майар",
                  "Биография": "Могущественнейший маг Ордена Истари, глава Белого совета. ",
                  "Вес, кг.": 68,
                  "Умеет петь": false,
                  "Снаряжение": "палантир",
                  "Статус": "Свободна",
                  "Блок": "Тёмный",
                  "Народ Гондора": false,
                  "Народ Рохана": false,
                  "Оружие": "посох,магия"
                },
                "Боромир": {
                  "name": "Боромир",
                  "Пол": "М",
                  "Раса": "человек",
                  "Биография": "Старший сын и наследник наместника Гондора Дэнетора II и его жены Финдуилас, брат Фарамира.",
                  "Вес, кг.": 90,
                  "Умеет петь": false,
                  "Снаряжение": "Рог Гондора",
                  "Статус": "Занята",
                  "Блок": "Нейтрал",
                  "Народ Гондора": true,
                  "Народ Рохана": false,
                  "Оружие": "меч,лук"
                },
                "Элронд": {
                  "name": "Элронд",
                  "Пол": "М",
                  "Раса": "эльф",
                  "Биография": "Сын полуэльфа Эарендила (в свою очередь, сына эльфийки Идриль и человека Туора) и полуэльфийки Эльвинг (дочери Диора, полуэльфа, и эльфийки Нимлот), брат Элроса, муж Келебриан — дочери Галадриэли и Келеборна, отец Арвен, Элладана и Элрохира. ",
                  "Вес, кг.": 72,
                  "Умеет петь": false,
                  "Снаряжение": "кольцо Вилью",
                  "Статус": "Свободна",
                  "Блок": "Светлый",
                  "Народ Гондора": false,
                  "Народ Рохана": false,
                  "Оружие": ""
                },
                "Арвен": {
                  "name": "Арвен",
                  "Пол": "Ж",
                  "Раса": "эльф",
                  "Биография": "Дочь Элронда, внучка Галадриэль.",
                  "Вес, кг.": 55,
                  "Умеет петь": true,
                  "Снаряжение": "",
                  "Статус": "Занята",
                  "Блок": "Светлый",
                  "Народ Гондора": false,
                  "Народ Рохана": false,
                  "Оружие": ""
                },
                "Галадриэль": {
                  "name": "Галадриэль",
                  "Пол": "Ж",
                  "Раса": "эльф",
                  "Биография": "Могущественнейшая из эльфийских владык, оставшихся в Средиземье после Войны Гнева. Владычица Лориэна.",
                  "Вес, кг.": 53,
                  "Умеет петь": false,
                  "Снаряжение": "кольцо Нэнью",
                  "Статус": "Занята",
                  "Блок": "Светлый",
                  "Народ Гондора": false,
                  "Народ Рохана": false,
                  "Оружие": ""
                },
                "Голлум": {
                  "name": "Голлум",
                  "Пол": "М",
                  "Раса": "другое",
                  "Биография": "Существо небольшого роста, крайне тощее и с большими светящимися глазами. Упоминается, что в прошлом он жил на поверхности. Голлум ранее был хоббитом, но он не любил солнце и стремился в самую глубь.",
                  "Вес, кг.": 34,
                  "Умеет петь": false,
                  "Снаряжение": "",
                  "Статус": "Свободна",
                  "Блок": "Тёмный",
                  "Народ Гондора": false,
                  "Народ Рохана": false,
                  "Оружие": ""
                },
                "Бильбо": {
                  "name": "Бильбо",
                  "Пол": "М",
                  "Раса": "хоббит",
                  "Биография": "Дядя Фродо Бэггинса.",
                  "Вес, кг.": 73,
                  "Умеет петь": false,
                  "Снаряжение": "",
                  "Статус": "На обсуждении",
                  "Блок": "Светлый",
                  "Народ Гондора": false,
                  "Народ Рохана": false,
                  "Оружие": "меч,каштаны"
                },
                "Назгул": {
                  "name": "Назгул",
                  "Пол": "М",
                  "Раса": "другое",
                  "Биография": "Девять владык из расы людей, порабощённых Кольцом Всевластия и ставших слугами Саурона.",
                  "Вес, кг.": 0,
                  "Умеет петь": true,
                  "Снаряжение": "",
                  "Статус": "Свободна",
                  "Блок": "Тёмный",
                  "Народ Гондора": false,
                  "Народ Рохана": false,
                  "Оружие": ""
                },
                "Пиппин": {
                  "name": "Пиппин",
                  "Пол": "М",
                  "Раса": "хоббит",
                  "Биография": "Друг Фродо, взятый в поход за компанию.",
                  "Вес, кг.": 53,
                  "Умеет петь": true,
                  "Снаряжение": "",
                  "Статус": "Свободна",
                  "Блок": "Светлый",
                  "Народ Гондора": false,
                  "Народ Рохана": false,
                  "Оружие": "каштаны"
                },
                "Гэндальф": {
                  "name": "Гэндальф",
                  "Пол": "М",
                  "Раса": "майар",
                  "Биография": "Могущественный волшебник.",
                  "Вес, кг.": 82,
                  "Умеет петь": false,
                  "Снаряжение": "кольцо Нарья",
                  "Статус": "Свободна",
                  "Блок": "Светлый",
                  "Народ Гондора": false,
                  "Народ Рохана": false,
                  "Оружие": "посох,магия"
                }
              },
              "Stories": {
                "Начало пути": {
                  "name": "Начало пути",
                  "story": "Гэндальф активно узнает информацию о кольце.\nГэндальф отправляет Фродо в Бри. Фродо бежит от черных всадников (защита).\nВ спутники к Фродо набиваются Сэм, Мерри и Пиппин.\nСаруман активно пленяет Гэндальфа. Гэндальф активно сбегает.\nАрагорн пассивно ждет хоббитов в Гарцующем пони. Потом он их защищает от назгулов.\nНазгулы активно преследуют Фродо и компанию.\nСаурон пассивно ждет когда Фродо оденет кольцо и таким образом укажет на себя.\nАрвен активно спасает Фродо от назгулов. Элронд пассивно ждет Фродо, чтобы его вылечить.\n\nВ свой очередной день рождения Бильбо устраивает праздник, и таинственно исчезает, оставляя все свои вещи племяннику Фродо. В том числе неизвестное кольцо.\n\nГэндальф чувствует черную магию в кольце и отправляется в Минас-Тирит, для получения большей информации.\n\nСаурон узнает от Голлума у кого сейчас находится кольцо и отправляет за ним назгулов.\n\nГэндальф возвращается в Шир, чтобы предупредить Фродо об опасности, древние зло пробудилось и за Фродо отправлены черные всадники. Гэндальф проверяет кольцо и оно оказывается тем самым кольцом. Гэндальф отправляет Фродо в Бри в таверну Гарцующий пони. Этот разговор услышал Сэм и за это его добавили к пати.\n\nГэндальф отправляется к Саруману, чтобы выработать план действий, но Саруман уже на темной стороне.\n\nПо пути из Шира Фродо и Сэм встречают Мерри и Пипина, ворующих овощи. Внезапно появляются назгулы, и Мерри с Пиппином присоединяются к пати.\n\nПартия приходит в Бри, и останавливается в Гарцующем пони. Гэндальфа там нет. Фродо случайно одевает кольцо, под действием кольца. Это видит Бродяжник. Бродяжник объясняет, что он друг и отводит хоббитов в другой ночлег.\n\nНочью назгулы приходят в гарцующий пони и разносят комнату хоббитов, которых там нет.\n\nНазгулы настигают хоббитов в развалинах Амон Сул. Один из них ранит Фродо. Бродяжник прогоняет назгулов. Появляется Арвен, везет Фродо в Ривенделл, спасаясь от назгулов.\n\nАрвен привозит Фродо в Ривенделл. Назгулы не могут перейти реку на границе Ривенделла.\n\nФродо исцеляют, он встречается с Бильбо, получает у него еще часть наследства - меч и кольчугу и собирается идти домой, считая свою миссию выполненной.",
                  "characters": {
                    "Арагорн": {
                      "name": "Арагорн",
                      "inventory": "",
                      "activity": {
                        "passive": true,
                        "follower": true
                      }
                    },
                    "Арвен": {
                      "name": "Арвен",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    },
                    "Бильбо": {
                      "name": "Бильбо",
                      "inventory": "",
                      "activity": {
                        "passive": true
                      }
                    },
                    "Мерри": {
                      "name": "Мерри",
                      "inventory": "",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Фродо": {
                      "name": "Фродо",
                      "inventory": "кольцо, жало, мифриловая кольчуга",
                      "activity": {
                        "defensive": true
                      }
                    },
                    "Сэм": {
                      "name": "Сэм",
                      "inventory": "",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Назгул": {
                      "name": "Назгул",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    },
                    "Саурон": {
                      "name": "Саурон",
                      "inventory": "",
                      "activity": {
                        "passive": true
                      }
                    },
                    "Саруман": {
                      "name": "Саруман",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    },
                    "Элронд": {
                      "name": "Элронд",
                      "inventory": "",
                      "activity": {
                        "passive": true
                      }
                    },
                    "Пиппин": {
                      "name": "Пиппин",
                      "inventory": "",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Гэндальф": {
                      "name": "Гэндальф",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    }
                  },
                  "events": [
                    {
                      "name": "День рождения Бильбо",
                      "text": "В свой очередной день рождения Бильбо устраивает праздник, и таинственно исчезает, оставляя все свои вещи племяннику Фродо. В том числе неизвестное кольцо.",
                      "time": "3001/09/22 21:00",
                      "characters": {
                        "Мерри": {
                          "text": "Старик Бильбо закатил отличный праздник поводу своего 111 летия. А потом просто исчез на глазах у всех прямо со сцены. Никто ничего не понял, но больше никто не видел Бильбо в Шире, а Торба-на-Круче досталась Фродо.",
                          "time": "22 сентября 3001",
                          "ready": true
                        },
                        "Сэм": {
                          "text": "Старик Бильбо закатил отличный праздник поводу своего 111 летия. А потом просто исчез на глазах у всех прямо со сцены. Никто ничего не понял, но больше никто не видел Бильбо в Шире, а Торба-на-Круче досталась Фродо.",
                          "time": "22 сентября 3001",
                          "ready": true
                        },
                        "Фродо": {
                          "text": "Старик Бильбо закатил отличный праздник поводу своего 111 летия. А потом просто исчез на глазах у всех прямо со сцены. Никто ничего не понял, но больше никто не видел Бильбо в Шире. Он оставил все свое имущество мне, включая странное кольцо с которым он никогда не расставался.",
                          "time": "22 сентября 3001",
                          "ready": true
                        },
                        "Бильбо": {
                          "text": "Что ж, я прожил долгую жизнь и мне кажется, что мой век подходит к концу. Поэтому я отправляюсь к эльфам после своего очередного дня рождения. Правда, с изчезновением в конце праздничной речи как-то неловко получилось, кольцо прямо само прыгнула на палец. ",
                          "time": "22 сентября 3001",
                          "ready": true
                        },
                        "Пиппин": {
                          "text": "Старик Бильбо закатил отличный праздник поводу своего 111 летия. А потом просто исчез на глазах у всех прямо со сцены. Никто ничего не понял, но больше никто не видел Бильбо в Шире, а Торба-на-Круче досталась Фродо.",
                          "time": "22 сентября 3001",
                          "ready": true
                        },
                        "Гэндальф": {
                          "text": "Я всегда знал, что Бильбо не обычный хоббит. Хотя конечно его последняя выходка с исчезновением во время праздника мне не понраву, все же у него хватило духа и сил перебраться к эльфам.",
                          "time": "22 сентября 3001",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Подозрения Гэндальфа",
                      "text": "Гэндальф чувствует черную магию в кольце и отправляется в Минас-Тирит, для получения большей информации.",
                      "time": "3001/09/23 12:00",
                      "characters": {
                        "Фродо": {
                          "text": "Обычно я носил кольцо, доставшееся мне от Бильбо при себе, но надеквал его крайне редко . Вообще жизни пошла обычным чередом, Гэндальф куда-то исчез.",
                          "time": "23 сентября 3001",
                          "ready": true
                        },
                        "Бильбо": {
                          "text": "Сколько раз я себе говорил - не слушай Гэндальфа, старику в очередной раз удалось меня уговорить, поэтому я оставил свое прелестное кольцо Фродо. Эх, как оно без меня?",
                          "time": "23 сентября 3001",
                          "ready": true
                        },
                        "Гэндальф": {
                          "text": "Меня очень беспокоит кольцо Билььо. Вещь содержащая сильную магию, к тому же он так к нему привязался. С трудом я уговорил его оставить кольцо Фродо. Надо попытаться узнать что же это за кольцо.",
                          "time": "23 сентября 3001",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Назгулы",
                      "text": "Саурон узнает от Голлума у кого сейчас находится кольцо и отправляет за ним назгулов.",
                      "time": "3018/03/02 15:00",
                      "characters": {
                        "Саурон": {
                          "text": "От этой твари я узнал нынешнего владельца кольца, это какой-то хоббит из Шира и отправил за ним назгулов. Кстати, кто такие эти хоббиты?",
                          "time": "2 марта 3018",
                          "ready": true
                        },
                        "Назгул": {
                          "text": "Повелитель отправил нас в Шир. Мы должны разыскать владельца кольца и забрать его.",
                          "time": "2 марта 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Начало пути Фродо",
                      "text": "Гэндальф возвращается в Шир, чтобы предупредить Фродо об опасности, древние зло пробудилось и за Фродо отправлены черные всадники. Гэндальф проверяет кольцо и оно оказывается тем самым кольцом. Гэндальф отправляет Фродо в Бри в таверну Гарцующий пони. Этот разговор услышал Сэм и за это его добавили к пати.",
                      "time": "3018/04/13 20:00",
                      "characters": {
                        "Фродо": {
                          "text": "Вернувшись домой я встретил взволнованного Гэндальфа. Он попросил меня достать кольцо Бильбо и бросить его в огонь. К моему удивлению, вынутое из огня кольцо оказалось холодным и на его поверхности проступили странные письмена. Геэндальф сказал, что только одно кольцо реагирует так на огонь - кольцо Саурона. Как оказалось Саурон не умер, вновь набирает силу и ищет это кольцо. За мной отправлены черные всадники и мне надо бежать. Наш разговор подслушал Сэм и Гэндальф отправил его со мной. Мы идём в Бри, он должен нас встретить там.",
                          "time": "4 апреля 3018",
                          "ready": true
                        },
                        "Сэм": {
                          "text": "Поздним вечером я подстригал кусты у открытого окна и вдруг услышал разговор хозяина и Гэндальфа. Голос Гэндальфа был очень напряжен и я не удержался и решить узнать о чем они говорят. Я понял, что кольцо Бильбо действительно существует и что это очень необычное кольцо и что его ищет сам Саурон, который оказывается не умер. Я так заслушался, что забыл о стрижке, а Гэндальф заметил, что ножницы не звенят. Он поймал меня, я сознался, что все слышал и он отправил меня вместе с Фродо в Бри.",
                          "time": "4 апреля 3018",
                          "ready": true
                        },
                        "Гэндальф": {
                          "text": "В Минас-Тирит я узнал, что это может быть то самое кольцо Саурона. Обеспокоенный я вернулся в Шир, как бы мне хотелось, чтобы это не было правдой, но Фродо при мне проверил кольцо, бросив его в огонь и на нем проступили письмена. Я слышал о черных всадниках, движущихся в сторону Шира. Я отправил Фродо в Бри, надеюсь я успею вернуться к тому моменту, когда он будет там. Мне срочно надо посоветоваться с Саруманом. Наш разговор подслушал Сэм, а мне ни в коем случае не хотелось отпускать Фродо одного. Что-то должно напоминать Фродо о доме и потмогать  противостоять власти кольца, так что Сэм попал под раздачу. Уверен, он справится.",
                          "time": "4 апреля 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Гэндальфа пленит Саруман",
                      "text": "Гэндальф отправляется к Саруману, чтобы выработать план действий, но Саруман уже на темной стороне.",
                      "time": "3018/07/10 16:00",
                      "characters": {
                        "Саруман": {
                          "text": "Я узрел вечную тьму в палантире и понял, что это мой путь. Визит Гэндальфа не был неожиданностью. Повелитель тьмы велел заставить Гэндальфа прикмнуть к нам, но он смог сбежать. Тем хуже для него.",
                          "time": "10 июля 3018",
                          "ready": true
                        },
                        "Гэндальф": {
                          "text": "Я прибыл к Саруману, чтобы обсудить что мы можем предпринять. Но как оказалось, Саруман перешёл на сторону Саурона. Он пленил меня и запер на крыше Ортханка. Чудом меня спас орёл. В назначенное время в Бри я уже не попаду.",
                          "time": "10 июля 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Мерри и Пипин",
                      "text": "По пути из Шира Фродо и Сэм встречают Мерри и Пипина, ворующих овощи. Внезапно появляются назгулы, и Мерри с Пиппином присоединяются к пати.",
                      "time": "3018/04/17 13:00",
                      "characters": {
                        "Сэм": {
                          "text": "Пиппин и Мерри как всегда убегали от разозленного фермера по полю, когда случайно наткнулись на нас. Нам пришлось бежать вместе с нами, не думаю что фермер стал бы разбираться кто был не виноват. Убежав от фермера мы вышли на дорогу и вдруг почуствовали холод. Мы спрятались и в этот момент на дороге показался черный всадник. Фродо рассказал, что всадников несколько и они преследуют его и что ему позарез нужно в Бри. Мерри и Пиппин присоединились к нам.",
                          "time": "17 апреля 3018",
                          "ready": true
                        },
                        "Фродо": {
                          "text": "Пиппин и Мерри убегали от разозленного фермера по полю, когда случайно наткнулись на нас. Нам пришлось бежать вместе с нами, не думаю что фермер стал бы разбираться кто был не виноват. Убежав от фермера мы вышли на дорогу и вдруг почуствовали холод. Мы спрятались и в этот момент на дороге показался черный всадник. Я рассказал, что всадников несколько и они преследуют меня и что мы идем в Бри. Мерри и Пиппин присоединились к нам.",
                          "time": "17 апреля 3018",
                          "ready": true
                        },
                        "Мерри": {
                          "text": "Я и Пиппин убегали от разозленного фермера по полю, когда случайно наткнулись на Сэма и Фродо. Им пришлось бежать вместе с нами, не думаю что фермер стал бы разбираться кто был не виноват. Убежав от фермера, мы вышли на дорогу и вдруг почуствовали холод. Мы спрятались и в этот момент на дороге показался черный всадник. Фродо рассказал, что всадников несколько и они преследуют его и что ему позарез нужно в Бри. Мы пошли с Фродо и Сэмом.",
                          "time": "17 апреля 3018",
                          "ready": true
                        },
                        "Пиппин": {
                          "text": "Я и Мерри убегали от разозленного фермера по полю, когда случайно наткнулись на Сэма и Фродо. Им пришлось бежать вместе с нами, не думаю что фермер стал бы разбираться кто был не виноват. Убежав от фермера мы вышли на дорогу и вдруг почуствовали холод. Мы спрятались и в этот момент на дороге показался черный всадник. Фродо рассказал, что всадников несколько и они преследуют его и что ему позарез нужно в Бри. Мы пошли с Фродо и Сэмом.",
                          "time": "17 апреля 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Гарцующий пони",
                      "text": "Партия приходит в Бри, и останавливается в Гарцующем пони. Гэндальфа там нет. Фродо случайно надевает кольцо, под действием кольца. Это видит Бродяжник. Бродяжник объясняет, что он друг и отводит хоббитов в другой ночлег.",
                      "time": "3018/09/30 20:00",
                      "characters": {
                        "Арагорн": {
                          "text": "В Бри пришла стайка хоббитов. Какие же они все таки нелепые. Я знал, что они должны прийти, но решил выждать. Жаль что я не подошел сразу - Фродо одел кольцо прямо посреди зала. Теперь Саурон, а значит и назгулы точно знают где их искать. \nТак или иначе я представился и увел их на другой ночлег. Можно не сомневаться назгулы придут сегодня ночью.",
                          "time": "30 сентября 3018",
                          "ready": true
                        },
                        "Мерри": {
                          "text": "Мы пришли в Бри в Гарцующий пони. Гэндальфа не было. Мы не знали что делать и решили остаться на ночлег. Вдруг Фродо стало плохо и он исчез точно так же как Бильбо на своем дне рождения. Мы не поняли что произошло, мы искали Фродо и не могли найти. Вдруг мы увидели как человек утаскивает Фродо. Мы пошли за ним, собирались драться. Оказалось, что это Бродяжник, друг Гэндальфа, который будет охранять нас. Бродяжник сказал, что в Гарцующем пони останавливаться опасно и отвел нас на другой ночлег.",
                          "time": "30 сентября 3018",
                          "ready": true
                        },
                        "Сэм": {
                          "text": "Мы пришли в Бри в Гарцующий пони. Гэндальфа не было. Мы не знали что делать и решили остаться на ночлег. Вдруг Фродо стало плохо и он исчез точно так же как Бильбо на своем дне рождения. Мы не поняли что произошло, мы искали Фродо и не могли найти. Вдруг мы увидели как человек утаскивает Фродо. Мы пошли за ним, собирались драться. Оказалось, что это Бродяжник, друг Гэндальфа, который будет охранять нас. Бродяжник сказал, что в Гарцующем пони останавливаться опасно и отвел нас на другой ночлег.",
                          "time": "30 сентября 3018",
                          "ready": true
                        },
                        "Фродо": {
                          "text": "Мы пришли в Бри в Гарцующий пони. Гэндальфа не было. Мы не знали что делать и решили остаться на ночлег. Вдруг я почуствовал непреодолимое желание одеть кольцо и сделал это. Мир потерял краски, вместо людей были только силуэты и среди всего на меня смотрело огромное огненное око. В ужасе я снял кольцо. Никто на меня не смотрел, поэтому я подумал, что все хорошо, но неожиданное меня схватил человек и утащил в одну из внтуренних комнат. Это оказался Бродяжник, друг Гэндальфа, встретивший нас. Он был очень зол на меня, за то что я одел кольцо - у Саурона везде глаза и уши. Мои друзья попытались спасти меня от Бродяжника, но я объяснил им, что он друг. Бродяжник сказал, что в Гарцующем пони останавливаться опасно и отвел на другой ночлег.",
                          "time": "30 сентября 3018",
                          "ready": true
                        },
                        "Пиппин": {
                          "text": "Мы пришли в Бри в Гарцующий пони. Гэндальфа не было. Мы не знали что делать и решили остаться на ночлег. Вдруг Фродо стало плохо и он исчез точно так же как Бильбо на своем дне рождения. Мы не поняли что произошло, мы искали Фродо и не могли найти. Вдруг мы увидели как человек утаскивает Фродо. Мы пошли за ним, собирались драться. Оказалось, что это Бродяжник, друг Гэндальфа, который будет охранять нас. Бродяжник сказал, что в Гарцующем пони останавливаться опасно и отвел нас на другой ночлег.",
                          "time": "30 сентября 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Ночное нападение",
                      "text": "Ночью назгулы приходят в гарцующий пони и разносят комнату хоббитов, которых там нет.",
                      "time": "3018/09/31 04:00",
                      "characters": {
                        "Арагорн": {
                          "text": "Ночью из Гарцующего пони доносились странные звуки и вопли, как в последствии оказалось комната хоббитов была вверхдном, а кровати проткнуты мечами. Что ж, в этот раз назгулы ошиблись. Нужно уходить из Бри.",
                          "time": "1 октября 3018",
                          "ready": true
                        },
                        "Мерри": {
                          "text": "Ночью из Гарцующего пони доносились странные звуки и вопли, как в последствии оказалось комната хоббитов была вверхдном, а кровати проткнуты мечами. Мне страшно, но я должен идти с Фродо, ему угрожает большая опасность.",
                          "time": "1 октября 3018",
                          "ready": true
                        },
                        "Сэм": {
                          "text": "Ночью из Гарцующего пони доносились странные звуки и вопли, как в последствии оказалось комната хоббитов была вверхдном, а кровати проткнуты мечами. Мне страшно, но я должен идти с Фродо, ему угрожает большая опасность.",
                          "time": "1 октября 3018",
                          "ready": true
                        },
                        "Фродо": {
                          "text": "Ночью из Гарцующего пони доносились странные звуки и вопли, как в последствии оказалось комната хоббитов была вверхдном, а кровати проткнуты мечами. Мне страшно, но мы должны идти, кольцо - моя ноша, никто другой с этим не справится.",
                          "time": "1 октября 3018",
                          "ready": true
                        },
                        "Назгул": {
                          "text": "Ночью мы пришли в таверну где были те, кто нам нужен. Их не было в комнате. Мы бы с радостью вырезали весь город, но где-то здесь скрывается Бродяжник и только он может нам помешать. Время есть, мы подождем, когда хоббит снова оденет кольцо и выдаст себя.",
                          "time": "1 октября 3018",
                          "ready": true
                        },
                        "Пиппин": {
                          "text": "Ночью из Гарцующего пони доносились странные звуки и вопли, как в последствии оказалось комната хоббитов была вверхдном, а кровати проткнуты мечами. Мне страшно, но я должен идти с Фродо, ему угрожает большая опасность.",
                          "time": "1 октября 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Амон Сул",
                      "text": "Назгулы настигают хоббитов в развалинах Амон Сул. Один из них ранит Фродо. Бродяжник прогоняет назгулов. Появляется Арвен, везет Фродо в Ривенделл, спасаясь от назгулов.",
                      "time": "3018/10/04 03:30",
                      "characters": {
                        "Арагорн": {
                          "text": "Я отправился в дозор и очень зря. Назгулы прокрались мимо меня. С трудом я успел их прогнать, но они ранили Фродо. Я смогу его спасти. Неожиданно появилась Арвен. Она забрала у меня Фродо. Надеюсь черные всадники не смогут догнать их на пути в Ривендел.",
                          "time": "4 октября 3018",
                          "ready": true
                        },
                        "Арвен": {
                          "text": "Я почуствовала холод и боль в далеке и примчалась в это место. Бродяжник только отбил нападение назгулов, а хранитель кольца был ранен. Вся надежда на моего коня. Успеть бы доскакать",
                          "time": "4 октября 3018",
                          "ready": true
                        },
                        "Мерри": {
                          "text": "Бродяжник ушёл в дозор. Неожиданно нас окружили назгулы. Мы пытались драться, но они просто раскидали нас. Они ранили Фродо и наконец вернулся Бродяжник. Бродяжник отбил нападение. Он попытался как-то обработать рану Фродо, как вдруг появилась эльфийка. Значит недалеко Ривендел. Она забрала Фродо с собой. Надеюсь, что с Фродо все будет хорошо.",
                          "time": "4 октября 3018",
                          "ready": true
                        },
                        "Сэм": {
                          "text": "Бродяжник ушёл в дозор. Неожиданно нас окружили назгулы. Мы пытались драться, но они просто раскидали нас. Они ранили Фродо и наконец вернулся бродяжник. Бродяжник отбил нападение. Он попытался как-то обработать рану Фродо, как вдруг появилась эльфийка. Значит недалеко Ривендел. Она забрала Фродо с собой. Надеюсь, что с Фродо все будет хорошо.",
                          "time": "4 октября 3018",
                          "ready": true
                        },
                        "Фродо": {
                          "text": "Бродяжник ушёл в дозор. Неожиданно нас окружили назгулы. Мы пытались драться, но они просто раскидали нас. Они ранили меня и наконец вернулся бродяжник. Бродяжник отбил нападение. Он попытался как-то обработать мою рану, как вдруг появилась эльфийка. Значит недалеко Ривендел. Она забрала меня с собой. ",
                          "time": "4 октября 3018",
                          "ready": true
                        },
                        "Назгул": {
                          "text": "Мы окружили хоббитов, мы чувствовали силу кольца, и тут пришел Бродяжник. Он отбил наше нападение. Мы успели ранить хранителя, он долго не продержится. И тут появилась эта эльфийка...",
                          "time": "4 октября 3018",
                          "ready": true
                        },
                        "Пиппин": {
                          "text": "Бродяжник ушёл в дозор. Неожиданно нас окружили назгулы. Мы пытались драться, но они просто раскидали нас. Они ранили Фродо и наконец вернулся бродяжник. Бродяжник отбил нападение. Он попытался как-то обработать рану Фродо, как вдруг появилась эльфийка. Значит недалеко Ривендел. Она забрала Фродо с собой. Надеюсь, что с Фродо все будет хорошо.",
                          "time": "4 октября 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Ривенделл",
                      "text": "Арвен привозит Фродо в Ривенделл. Назгулы не могут перейти реку на границе Ривенделла.",
                      "time": "3018/10/20 15:00",
                      "characters": {
                        "Арагорн": {
                          "text": "Мы отправились вслед за Фродо и Арвен в Ривендел так быстро как могли. К счастью они успели, а тела лошадей черных всадников были найдены ниже по течению. Какое-то время они нас не побеспокоят. Нам дали кров. Здесь же был Гэндальф. Элронд вылечит Фродо, а пока будем ждать когда Фродо поправится и мы сможем собрать совет кольца.",
                          "time": "20 октября 3018",
                          "ready": true
                        },
                        "Бильбо": {
                          "text": "Я узнал, что мой племенник и несколько его друзей пришли в Ривендел. Смелые. Надеюсь он навестит меня. Возможно, что ему предстоит дальняя дорога, и пара предметов, которые я взял с собой... Больше мне не пригодяться, я уже дошел до Ривендела. Как же здесь все-таки красиво.",
                          "time": "20 октября 3018",
                          "ready": true
                        },
                        "Мерри": {
                          "text": "Мы отправились вслед за Фродо и Арвен в Ривендел так быстро как могли. К счастью они успели, а тела лошадей черных всадников были найдены ниже по течению. Какое-то время они нас не побеспокоят. Нам дали кров. Здесь же был Гэндальф. Элронд вылечит Фродо, а пока будем ждать когда Фродо поправится.",
                          "time": "20 октября 3018",
                          "ready": true
                        },
                        "Сэм": {
                          "text": "Мы отправились вслед за Фродо и Арвен в Ривендел так быстро как могли. К счастью они успели, а тела лошадей черных всадников были найдены ниже по течению. Какое-то время они нас не побеспокоят. Нам дали кров. Здесь же был Гэндальф. Элронд вылечит Фродо, а пока будем ждать когда Фродо поправится.",
                          "time": "20 октября 3018",
                          "ready": true
                        },
                        "Фродо": {
                          "text": "Я не помню как мы оказались в Ривенделе. Но в себя я пришел уже там. Все мои спутники уже были здесь.",
                          "time": "20 октября 3018",
                          "ready": true
                        },
                        "Элронд": {
                          "text": "Арвен успела спасти Фродо, я залечу его рану, но на это уйдет время. Черные всадники не могут пройти в Ривендел и мы в этом убедились. Что ж, скоро мы соберем совет и решим что делать с этим кольцом.",
                          "time": "20 октября 3018",
                          "ready": true
                        },
                        "Арвен": {
                          "text": "Я забрала Фродо с собой и мы с большим трудом успели перейти реку на границе Ривендела. Черные всадники осмелились вступить в воду и река смела их. В ближайшее время они не побеспокоят Фродо. Отец вылечил Фродо, но раны нанесенные призрачным клинком не могут быть вылечены полностью никогда.",
                          "time": "20 октября 3018",
                          "ready": true
                        },
                        "Пиппин": {
                          "text": "Мы отправились вслед за Фродо и Арвен в Ривендел так быстро как могли. К счастью они успели, а тела лошадей черных всадников были найдены ниже по течению. Какое-то время они нас не побеспокоят. Нам дали кров. Здесь же был Гэндальф. Элронд вылечит Фродо, а пока будем ждать когда Фродо поправится.",
                          "time": "20 октября 3018",
                          "ready": true
                        },
                        "Назгул": {
                          "text": "Эльфийка везла Фродо в Ривендел и преуспела. Мы не смогли пересечь его границу, древняя магия все ещё сильна. Тёмный властелин велел возвращаться в Мордор. Там мы узнаем, что нам делать дальше.",
                          "time": "20 октября 3018",
                          "ready": true
                        },
                        "Гэндальф": {
                          "text": "Арвен успела спасти Фродо, Элронд залечит его рану, но на это уйдет время. Черные всадники не могут пройти в Ривендел и мы в этом убедились. Жаль, что Саруман выступил против нас. Теперь Ортханк оплот орков и кто знает, на что способен Саруман в черной магии. Что ж, скоро мы соберем совет и решим что делать с этим кольцом.",
                          "time": "20 октября 3018",
                          "ready": true
                        }
                      }
                    },
                    {
                      "name": "Кольцо в Ривенделле",
                      "text": "Фродо исцеляют, он встречается с Бильбо, получает у него еще часть наследства - меч и кольчугу.",
                      "time": "3018/12/24 16:00",
                      "characters": {
                        "Фродо": {
                          "text": "Я посетил Бильбо в Ривенделе. Он как-то постарел за это небольшое время. Бильбо передал мне свой меч и кольчугу - волшебные вещи. Не хотелось бы, чтобы они пригодились, но лучше с ними чем без них. Бильбо очень хотел посмотреть на своё кольцо и внезапно сильно разозлился, когда я отказал. Он был просто сам не свой и так же быстро он остыл. Теперь я знаю как выглядит печать кольца на хранителе, слишком долго хранившем его.",
                          "time": "24 декабря 3018",
                          "ready": true
                        },
                        "Бильбо": {
                          "text": "Фродо посетил меня и я отдал последнюю часть моего наследства - меч и кольчугу. Они сослужили мне хорошую службу, пусть теперь помогут ему. Когда я увидел краешек кольца я попросил Фродо дать мне его подержать, но он спрятал его. Я впал в ярость, и очень быстро остыл. Не знаю что меня нашло.",
                          "time": "24 декабря 3018",
                          "ready": true
                        }
                      }
                    }
                  ]
                },
                "Арвен и Арагорн": {
                  "name": "Арвен и Арагорн",
                  "story": "Любовная линия Арвен и Арагорна. Оба активно вздыхают друг об дружке.",
                  "characters": {
                    "Арагорн": {
                      "name": "Арагорн",
                      "inventory": "брошь Арвен",
                      "activity": {
                        "active": true
                      }
                    },
                    "Арвен": {
                      "name": "Арвен",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    }
                  },
                  "events": [
                    {
                      "name": "Брошь",
                      "text": "Арвен и Арагорн. Арвен дает Арагорну свою брошь.",
                      "time": "3018/10/25 02:00",
                      "characters": {
                        "Арагорн": {
                          "text": "",
                          "time": ""
                        },
                        "Арвен": {
                          "text": "",
                          "time": ""
                        }
                      }
                    }
                  ]
                },
                "История Сарумана": {
                  "name": "История Сарумана",
                  "story": "Саурон и Саруман активно работают над своими темными планами. Саруман собирает армию орков и создает урук-хаев.",
                  "characters": {
                    "Саруман": {
                      "name": "Саруман",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    },
                    "Саурон": {
                      "name": "Саурон",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    }
                  },
                  "events": [
                    {
                      "name": "Уничтожение рощи",
                      "text": "Саруман начинает культивировать орков и дает приказ уничтожить рощу вокруг Ортханка. Так же он выводит Урук-Хаев.",
                      "time": "3018/07/13 18:00",
                      "characters": {
                        "Саруман": {
                          "text": "",
                          "time": ""
                        },
                        "Саурон": {
                          "text": "",
                          "time": ""
                        }
                      }
                    }
                  ]
                },
                "Братство кольца": {
                  "name": "Братство кольца",
                  "story": "В этой истории активно идет вперед Фродо. Все остальные его сопровождают, за исключением Боромира, который активно думает как получить кольцо в Гондор. Братству активно противостоит Саруман. Элронд знает о том, что братство выдвинулось в сторону роковой горы. Галандриэль же ждет когда братство дойдет до Лориена. ",
                  "characters": {
                    "Арагорн": {
                      "name": "Арагорн",
                      "inventory": "ножны, плащ с брошью",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Боромир": {
                      "name": "Боромир",
                      "inventory": "золотой пояс, плащ с брошью",
                      "activity": {
                        "follower": true,
                        "active": true
                      }
                    },
                    "Галадриэль": {
                      "name": "Галадриэль",
                      "inventory": "",
                      "activity": {
                        "passive": true
                      }
                    },
                    "Гимли": {
                      "name": "Гимли",
                      "inventory": "прядь волос Галадриэли, плащ с брошью",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Леголас": {
                      "name": "Леголас",
                      "inventory": "лук и колчан стрел, плащ с брошью",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Мерри": {
                      "name": "Мерри",
                      "inventory": "серебряные пояс, плащ с брошью",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Пиппин": {
                      "name": "Пиппин",
                      "inventory": "серебряные пояс, плащ с брошью",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Сэм": {
                      "name": "Сэм",
                      "inventory": "шкатулка благословленной земли, плащ с брошью",
                      "activity": {
                        "follower": true
                      }
                    },
                    "Фродо": {
                      "name": "Фродо",
                      "inventory": "фиал, плащ с брошью",
                      "activity": {
                        "active": true
                      }
                    },
                    "Элронд": {
                      "name": "Элронд",
                      "inventory": "",
                      "activity": {
                        "passive": true
                      }
                    },
                    "Саруман": {
                      "name": "Саруман",
                      "inventory": "",
                      "activity": {
                        "active": true
                      }
                    },
                    "Гэндальф": {
                      "name": "Гэндальф",
                      "inventory": "",
                      "activity": {
                        "follower": true
                      }
                    }
                  },
                  "events": [
                    {
                      "name": "Совет",
                      "text": "На совете обозначена проблема уничтожения кольца. Кольцо необходимо бросить в Ородруин, но никто не в силе взять на себя эту ношу. Фродо вызывается сделать это. Проводить его берутся Арагорн, Леголас, Гимли, Боромир, Гэндальф и его друзья из Шира. Так появляется братство кольца.",
                      "time": "3018/10/25 17:00",
                      "characters": {
                        "Арагорн": {
                          "text": "",
                          "time": ""
                        },
                        "Боромир": {
                          "text": "",
                          "time": ""
                        },
                        "Гимли": {
                          "text": "",
                          "time": ""
                        },
                        "Леголас": {
                          "text": "",
                          "time": ""
                        },
                        "Мерри": {
                          "text": "",
                          "time": ""
                        },
                        "Пиппин": {
                          "text": "",
                          "time": ""
                        },
                        "Сэм": {
                          "text": "",
                          "time": ""
                        },
                        "Фродо": {
                          "text": "",
                          "time": ""
                        },
                        "Элронд": {
                          "text": "",
                          "time": ""
                        },
                        "Гэндальф": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Путь по земле",
                      "text": "Первая дорога перекрыта патрулями Саурона.",
                      "time": "3019/01/08 13:00",
                      "characters": {
                        "Арагорн": {
                          "text": "",
                          "time": ""
                        },
                        "Боромир": {
                          "text": "",
                          "time": ""
                        },
                        "Гимли": {
                          "text": "",
                          "time": ""
                        },
                        "Леголас": {
                          "text": "",
                          "time": ""
                        },
                        "Мерри": {
                          "text": "",
                          "time": ""
                        },
                        "Пиппин": {
                          "text": "",
                          "time": ""
                        },
                        "Сэм": {
                          "text": "",
                          "time": ""
                        },
                        "Фродо": {
                          "text": "",
                          "time": ""
                        },
                        "Саруман": {
                          "text": "",
                          "time": ""
                        },
                        "Гэндальф": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Путь в горы",
                      "text": "Магия Сарумана не дает братству пройти через снежные перевалы в горах.",
                      "time": "3019/01/12 16:00",
                      "characters": {
                        "Арагорн": {
                          "text": "",
                          "time": ""
                        },
                        "Боромир": {
                          "text": "",
                          "time": ""
                        },
                        "Гимли": {
                          "text": "",
                          "time": ""
                        },
                        "Леголас": {
                          "text": "",
                          "time": ""
                        },
                        "Мерри": {
                          "text": "",
                          "time": ""
                        },
                        "Пиппин": {
                          "text": "",
                          "time": ""
                        },
                        "Сэм": {
                          "text": "",
                          "time": ""
                        },
                        "Фродо": {
                          "text": "",
                          "time": ""
                        },
                        "Саруман": {
                          "text": "",
                          "time": ""
                        },
                        "Гэндальф": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Путь в Морию",
                      "text": "Братство спускается в Морию. При входе они пробуждают кракена, который рушит врата Мории, как только они в нее заходят. Тут же они находят тела гномов и понимают, что Мория захвачена орками.",
                      "time": "3019/01/13 18:00",
                      "characters": {
                        "Арагорн": {
                          "text": "",
                          "time": ""
                        },
                        "Боромир": {
                          "text": "",
                          "time": ""
                        },
                        "Гимли": {
                          "text": "",
                          "time": ""
                        },
                        "Леголас": {
                          "text": "",
                          "time": ""
                        },
                        "Мерри": {
                          "text": "",
                          "time": ""
                        },
                        "Пиппин": {
                          "text": "",
                          "time": ""
                        },
                        "Сэм": {
                          "text": "",
                          "time": ""
                        },
                        "Фродо": {
                          "text": "",
                          "time": ""
                        },
                        "Гэндальф": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Мория",
                      "text": "Гэндальф показывает Фродо Голлума и говорит, что он давно идет за ними.\nПипин роняет ведро в колодец у могилы Балина, тем самым выдавая себя оркам. Принимают бой. Приходит Балрог.",
                      "time": "3019/01/14 21:00",
                      "characters": {
                        "Арагорн": {
                          "text": "",
                          "time": ""
                        },
                        "Боромир": {
                          "text": "",
                          "time": ""
                        },
                        "Гимли": {
                          "text": "",
                          "time": ""
                        },
                        "Леголас": {
                          "text": "",
                          "time": ""
                        },
                        "Мерри": {
                          "text": "",
                          "time": ""
                        },
                        "Пиппин": {
                          "text": "",
                          "time": ""
                        },
                        "Сэм": {
                          "text": "",
                          "time": ""
                        },
                        "Фродо": {
                          "text": "",
                          "time": ""
                        },
                        "Гэндальф": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Выход из Мории",
                      "text": "Гэндальф остается защищать мост от Балрога и падает в пропасть вместе с ним. Все остальные выходят из Мории и попадают в Лотлориен к Галадриэли.",
                      "time": "3019/01/15 16:00",
                      "characters": {
                        "Арагорн": {
                          "text": "",
                          "time": ""
                        },
                        "Боромир": {
                          "text": "",
                          "time": ""
                        },
                        "Гимли": {
                          "text": "",
                          "time": ""
                        },
                        "Леголас": {
                          "text": "",
                          "time": ""
                        },
                        "Мерри": {
                          "text": "",
                          "time": ""
                        },
                        "Пиппин": {
                          "text": "",
                          "time": ""
                        },
                        "Сэм": {
                          "text": "",
                          "time": ""
                        },
                        "Фродо": {
                          "text": "",
                          "time": ""
                        },
                        "Гэндальф": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Зеркало Галадриэли",
                      "text": "Галадриэль показывает Фродо будущее в своем зеркале.",
                      "time": "3019/02/14 21:30",
                      "characters": {
                        "Галадриэль": {
                          "text": "",
                          "time": ""
                        },
                        "Фродо": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Покидая Лотлориен",
                      "text": "Братству кольца помогают припасами и пропускают через Лотлориен. Нимбос, фиал, накидки.",
                      "time": "3019/02/16 12:00",
                      "characters": {
                        "Арагорн": {
                          "text": "",
                          "time": ""
                        },
                        "Боромир": {
                          "text": "",
                          "time": ""
                        },
                        "Гимли": {
                          "text": "",
                          "time": ""
                        },
                        "Леголас": {
                          "text": "",
                          "time": ""
                        },
                        "Мерри": {
                          "text": "",
                          "time": ""
                        },
                        "Пиппин": {
                          "text": "",
                          "time": ""
                        },
                        "Сэм": {
                          "text": "",
                          "time": ""
                        },
                        "Фродо": {
                          "text": "",
                          "time": ""
                        },
                        "Галадриэль": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Урук-Хаи",
                      "text": "Саруман отправляет отряд Урук-Хаев в погоню за хранителем кольца.",
                      "time": "3019/01/10 00:00",
                      "characters": {
                        "Саруман": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Водопад",
                      "text": "Братство останавливается перед водопадом.",
                      "time": "3019/02/25 16:00",
                      "characters": {
                        "Арагорн": {
                          "text": "",
                          "time": ""
                        },
                        "Боромир": {
                          "text": "",
                          "time": ""
                        },
                        "Гимли": {
                          "text": "",
                          "time": ""
                        },
                        "Леголас": {
                          "text": "",
                          "time": ""
                        },
                        "Мерри": {
                          "text": "",
                          "time": ""
                        },
                        "Пиппин": {
                          "text": "",
                          "time": ""
                        },
                        "Сэм": {
                          "text": "",
                          "time": ""
                        },
                        "Фродо": {
                          "text": "",
                          "time": ""
                        }
                      }
                    },
                    {
                      "name": "Развилка",
                      "text": "Боромир пытается отнять у Фродо кольцо. В этот момент на них нападают Урук-Хаи, убивают Боромира, хватают Мерри и Пипина и убегают к Саруману. Фродо решает идти дальше в одиночку, но Сэм не отстает. Остальные хоронят Боромира и отправляются в погоню за отрядом Урук-Хаев.",
                      "time": "3019/02/26 17:20",
                      "characters": {
                        "Арагорн": {
                          "text": "",
                          "time": ""
                        },
                        "Боромир": {
                          "text": "",
                          "time": ""
                        },
                        "Гимли": {
                          "text": "",
                          "time": ""
                        },
                        "Леголас": {
                          "text": "",
                          "time": ""
                        },
                        "Мерри": {
                          "text": "",
                          "time": ""
                        },
                        "Пиппин": {
                          "text": "",
                          "time": ""
                        },
                        "Сэм": {
                          "text": "",
                          "time": ""
                        },
                        "Фродо": {
                          "text": "",
                          "time": ""
                        }
                      }
                    }
                  ]
                }
              },
              "Settings": {
                "BriefingPreview": {
                  "characterName": "Арагорн"
                },
                "Stories": {
                  "storyName": "Начало пути"
                },
                "CharacterProfile": {
                  "characterName": "Арагорн"
                },
                "Events": {
                  "storyName": "Начало пути",
                  "characterNames": [
                    "Арагорн"
                  ],
                  "eventIndexes": [],
                  "selectedFilter": "adaptationFilterByCharacter"
                },
                "GroupProfile": {
                  "groupName": "Темный блок"
                },
                "ProfileEditor": {
                  "character": "Боромир",
                  "player": ""
                },
                "Adaptations": {
                  "storyName": "Братство кольца",
                  "characterNames": [
                    "Арагорн",
                    "Боромир",
                    "Галадриэль",
                    "Гимли",
                    "Гэндальф",
                    "Леголас",
                    "Мерри",
                    "Пиппин",
                    "Саруман",
                    "Сэм",
                    "Фродо",
                    "Элронд"
                  ],
                  "eventIndexes": [],
                  "selectedFilter": "adaptationFilterByCharacter"
                }
              },
              "Version": "0.7.2",
              "Log": [
                [
                  "user",
                  "Thu Oct 13 2016 19:09:25 GMT+0500 (Pakistan Standard Time)",
                  "createProfileItem",
                  "[\"Блок\",\"enum\",\"_\",true,11]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:09:55 GMT+0500 (Pakistan Standard Time)",
                  "updateDefaultValue",
                  "[\"Блок\",\"Тёмный,Светлый,Нейтрал\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:10:09 GMT+0500 (Pakistan Standard Time)",
                  "moveProfileItem",
                  "[11,0]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:12:30 GMT+0500 (Pakistan Standard Time)",
                  "createGroup",
                  "[\"Светлый блок\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:12:37 GMT+0500 (Pakistan Standard Time)",
                  "createGroup",
                  "[\"Темный блок\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:12:47 GMT+0500 (Pakistan Standard Time)",
                  "createGroup",
                  "[\"Нейтралы\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:12:58 GMT+0500 (Pakistan Standard Time)",
                  "createGroup",
                  "[\"Эльфы\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:13:52 GMT+0500 (Pakistan Standard Time)",
                  "saveFilterToGroup",
                  "[\"Нейтралы\",[{\"type\":\"enum\",\"name\":\"profile-Блок\",\"selectedOptions\":{\"Нейтрал\":true}}]]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:13:55 GMT+0500 (Pakistan Standard Time)",
                  "saveFilterToGroup",
                  "[\"Светлый блок\",[{\"type\":\"enum\",\"name\":\"profile-Блок\",\"selectedOptions\":{\"Светлый\":true}}]]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:13:59 GMT+0500 (Pakistan Standard Time)",
                  "saveFilterToGroup",
                  "[\"Темный блок\",[{\"type\":\"enum\",\"name\":\"profile-Блок\",\"selectedOptions\":{\"Тёмный\":true}}]]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:14:05 GMT+0500 (Pakistan Standard Time)",
                  "saveFilterToGroup",
                  "[\"Эльфы\",[{\"type\":\"enum\",\"name\":\"profile-Раса\",\"selectedOptions\":{\"эльф\":true}}]]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:16:26 GMT+0500 (Pakistan Standard Time)",
                  "addBoardGroup",
                  "[\"Нейтралы\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:16:29 GMT+0500 (Pakistan Standard Time)",
                  "addBoardGroup",
                  "[\"Светлый блок\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:16:31 GMT+0500 (Pakistan Standard Time)",
                  "addBoardGroup",
                  "[\"Темный блок\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:16:33 GMT+0500 (Pakistan Standard Time)",
                  "addBoardGroup",
                  "[\"Эльфы\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:16:47 GMT+0500 (Pakistan Standard Time)",
                  "createResource",
                  "[\"Кольцо Всевластья\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:17:14 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Темный блок\",\"resource-Кольцо Всевластья\",\"Стремится захватить\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:17:27 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Светлый блок\",\"resource-Кольцо Всевластья\",\"Стремится уничтожить\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:17:50 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Нейтралы\",\"resource-Кольцо Всевластья\",\"Стремятся эффективно использовать\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:18:15 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Светлый блок\",\"group-Темный блок\",\"Хочет уничтожить\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:18:20 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Темный блок\",\"group-Светлый блок\",\"Хочет уничтожить\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:19:40 GMT+0500 (Pakistan Standard Time)",
                  "saveFilterToGroup",
                  "[\"Эльфы\",[{\"type\":\"enum\",\"name\":\"profile-Блок\",\"selectedOptions\":{\"Светлый\":true}},{\"type\":\"enum\",\"name\":\"profile-Раса\",\"selectedOptions\":{\"эльф\":true}}]]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:20:25 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Темный блок\",\"group-Нейтралы\",\"Хочет поработить\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:20:54 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Светлый блок\",\"group-Нейтралы\",\"Хочет присоединить\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:21:37 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Эльфы\",\"group-Светлый блок\",\"Направляют\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:22:00 GMT+0500 (Pakistan Standard Time)",
                  "createGroup",
                  "[\"Народ Рохана\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:22:04 GMT+0500 (Pakistan Standard Time)",
                  "createGroup",
                  "[\"Народ Гондора\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:22:11 GMT+0500 (Pakistan Standard Time)",
                  "addBoardGroup",
                  "[\"Народ Гондора\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:22:13 GMT+0500 (Pakistan Standard Time)",
                  "addBoardGroup",
                  "[\"Народ Рохана\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:22:51 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Народ Гондора\",\"group-Народ Рохана\",\"Союзники\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:22:54 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Народ Рохана\",\"group-Народ Гондора\",\"Союзники\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:23:20 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Народ Гондора\",\"group-Светлый блок\",\"Склоняются\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:23:24 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Народ Рохана\",\"group-Светлый блок\",\"Склоняются\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:26:04 GMT+0500 (Pakistan Standard Time)",
                  "createResource",
                  "[\"Шахты Мории\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:26:18 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Темный блок\",\"resource-Шахты Мории\",\"Контролирует\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:26:47 GMT+0500 (Pakistan Standard Time)",
                  "addEdge",
                  "[\"group-Народ Гондора\",\"resource-Шахты Мории\",\"Хочет захватить\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:31:26 GMT+0500 (Pakistan Standard Time)",
                  "createCharacter",
                  "[\"Народ Гондора\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:31:30 GMT+0500 (Pakistan Standard Time)",
                  "createCharacter",
                  "[\"Народ Рохана\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:31:40 GMT+0500 (Pakistan Standard Time)",
                  "createProfileItem",
                  "[\"Народ Гондора\",\"checkbox\",false,true,12]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:31:46 GMT+0500 (Pakistan Standard Time)",
                  "createProfileItem",
                  "[\"Народ Рохана\",\"checkbox\",false,true,13]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:32:36 GMT+0500 (Pakistan Standard Time)",
                  "saveFilterToGroup",
                  "[\"Народ Гондора\",[{\"type\":\"checkbox\",\"name\":\"profile-Народ Гондора\",\"selectedOptions\":{\"true\":true}}]]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Thu Oct 13 2016 19:32:53 GMT+0500 (Pakistan Standard Time)",
                  "saveFilterToGroup",
                  "[\"Народ Рохана\",[{\"type\":\"checkbox\",\"name\":\"profile-Народ Рохана\",\"selectedOptions\":{\"true\":true}}]]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:04:01 GMT+0500 (Pakistan Standard Time)",
                  "createProfile",
                  "[\"player\",\"Аркадий\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:04:16 GMT+0500 (Pakistan Standard Time)",
                  "createProfile",
                  "[\"player\",\"Белла\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:04:34 GMT+0500 (Pakistan Standard Time)",
                  "createProfile",
                  "[\"player\",\"Вальдемар\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:04:57 GMT+0500 (Pakistan Standard Time)",
                  "createProfile",
                  "[\"player\",\"Галина\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:05:08 GMT+0500 (Pakistan Standard Time)",
                  "createProfileItem",
                  "[\"player\",\"Город\",\"enum\",0]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:05:47 GMT+0500 (Pakistan Standard Time)",
                  "updateDefaultValue",
                  "[\"player\",\"Город\",\"Мск,Спб,Че,Екат,НН,Нвсб,другое\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:05:51 GMT+0500 (Pakistan Standard Time)",
                  "changeProfileItemPlayerAccess",
                  "[\"player\",\"Город\",\"write\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:06:10 GMT+0500 (Pakistan Standard Time)",
                  "createProfileItem",
                  "[\"player\",\"Способ связи\",\"multiEnum\",1]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:06:27 GMT+0500 (Pakistan Standard Time)",
                  "updateDefaultValue",
                  "[\"player\",\"Способ связи\",\"Мессенджеры,телефон,\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:06:29 GMT+0500 (Pakistan Standard Time)",
                  "changeProfileItemPlayerAccess",
                  "[\"player\",\"Способ связи\",\"write\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:05 GMT+0500 (Pakistan Standard Time)",
                  "updateDefaultValue",
                  "[\"player\",\"Способ связи\",\"Мессенджеры,телефон,телеграф,дымовые сигналы,почта,электронная почта\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:07 GMT+0500 (Pakistan Standard Time)",
                  "doExportProfileItemChange",
                  "[\"player\",\"Способ связи\",false]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:08 GMT+0500 (Pakistan Standard Time)",
                  "doExportProfileItemChange",
                  "[\"player\",\"Город\",false]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:18 GMT+0500 (Pakistan Standard Time)",
                  "createBinding",
                  "[\"Арагорн\",\"Аркадий\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:21 GMT+0500 (Pakistan Standard Time)",
                  "createBinding",
                  "[\"Арвен\",\"Белла\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:22 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Аркадий\",\"Способ связи\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:28 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Аркадий\",\"Способ связи\",\"multiEnum\",\"дымовые сигналы\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:30 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Белла\",\"Способ связи\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:32 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Белла\",\"Город\",\"enum\",\"Екат\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:34 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Белла\",\"Способ связи\",\"multiEnum\",\"телефон\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:35 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Белла\",\"Способ связи\",\"multiEnum\",\"телефон,почта\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:37 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Вальдемар\",\"Способ связи\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:39 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Вальдемар\",\"Город\",\"enum\",\"Че\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:44 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Вальдемар\",\"Способ связи\",\"multiEnum\",\"Мессенджеры\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:46 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Галина\",\"Способ связи\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:07:49 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Галина\",\"Город\",\"enum\",\"НН\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:08:38 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Аркадий\",\"Способ связи\",\"multiEnum\",\"дымовые сигналы\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:20:56 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Аркадий\",\"Способ связи\",\"multiEnum\",\"дымовые сигналы\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:25:02 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Аркадий\",\"Способ связи\",\"multiEnum\",\"дымовые сигналы\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Mon May 22 2017 15:25:11 GMT+0500 (Pakistan Standard Time)",
                  "removeProfileItem",
                  "[\"character\",1,\"Игрок\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:11:03 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Аркадий\",\"Способ связи\",\"multiEnum\",\"дымовые сигналы\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:11:19 GMT+0500 (Pakistan Standard Time)",
                  "removeProfileItem",
                  "[\"character\",12,\"Народ Рохана\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:11:22 GMT+0500 (Pakistan Standard Time)",
                  "removeProfileItem",
                  "[\"character\",11,\"Народ Гондора\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:11:26 GMT+0500 (Pakistan Standard Time)",
                  "removeProfileItem",
                  "[\"character\",10,\"Картинка сайт\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:11:29 GMT+0500 (Pakistan Standard Time)",
                  "removeProfileItem",
                  "[\"character\",9,\"Картинка ВК\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:11:39 GMT+0500 (Pakistan Standard Time)",
                  "createProfileItem",
                  "[\"character\",\"Оружие2\",\"multiEnum\",5]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:11:45 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Арагорн\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:11:45 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Аркадий\",\"Способ связи\",\"multiEnum\",\"дымовые сигналы\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:11:50 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Арагорн\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:11:58 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Арвен\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:11:58 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Белла\",\"Способ связи\",\"multiEnum\",\"телефон,почта\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:12:03 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Бильбо\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:12:07 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Боромир\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:12:09 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Галадриэль\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:12:12 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Гендальф\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:12:16 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Гимли\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:12:20 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Голлум\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:12:24 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Леголас\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:12:27 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Мерри\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:12:33 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Назгул\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:12:37 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Народ Гондора\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:12:41 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Народ Рохана\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:12:46 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Пиппин\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:12:49 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Саруман\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:12:53 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Саурон\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:12:57 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Сэм\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:13:02 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Фродо\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:13:05 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Элронд\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:13:25 GMT+0500 (Pakistan Standard Time)",
                  "updateDefaultValue",
                  "[\"character\",\"Оружие2\",\"меч,лук,нож,каштаны,посох,магия,топор\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:13:28 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Элронд\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:13:37 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Арагорн\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:13:37 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Аркадий\",\"Способ связи\",\"multiEnum\",\"дымовые сигналы\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:13:40 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Арагорн\",\"Оружие2\",\"multiEnum\",\"меч\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:13:41 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Арагорн\",\"Оружие2\",\"multiEnum\",\"меч,лук\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:13:43 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Арагорн\",\"Оружие2\",\"multiEnum\",\"меч,лук,нож\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:13:46 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Арвен\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:13:46 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Белла\",\"Способ связи\",\"multiEnum\",\"телефон,почта\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:13:50 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Бильбо\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:13:53 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Бильбо\",\"Оружие2\",\"multiEnum\",\"меч\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:13:54 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Бильбо\",\"Оружие2\",\"multiEnum\",\"меч,каштаны\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:14:03 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Боромир\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:14:05 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Боромир\",\"Оружие2\",\"multiEnum\",\"меч\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:14:06 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Боромир\",\"Оружие2\",\"multiEnum\",\"меч,лук\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:14:08 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Галадриэль\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:14:11 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Гендальф\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:14:13 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Гендальф\",\"Оружие2\",\"multiEnum\",\"посох\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:14:14 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Гендальф\",\"Оружие2\",\"multiEnum\",\"посох,магия\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:14:16 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Гимли\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:14:18 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Гимли\",\"Оружие2\",\"multiEnum\",\"топор\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:14:22 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Голлум\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:14:25 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Леголас\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:14:28 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Леголас\",\"Оружие2\",\"multiEnum\",\"лук\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:14:39 GMT+0500 (Pakistan Standard Time)",
                  "updateDefaultValue",
                  "[\"character\",\"Оружие2\",\"меч,лук,нож,каштаны,посох,магия,топор,эльфийские ножи\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:14:42 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Леголас\",\"Оружие2\",\"multiEnum\",\"лук\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:14:46 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Леголас\",\"Оружие2\",\"multiEnum\",\"лук,эльфийские ножи\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:14:48 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Мерри\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:14:50 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Мерри\",\"Оружие2\",\"multiEnum\",\"каштаны\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:14:52 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Назгул\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:14:55 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Народ Гондора\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:14:58 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Народ Рохана\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:15:03 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Пиппин\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:15:05 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Пиппин\",\"Оружие2\",\"multiEnum\",\"каштаны\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:15:09 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Саруман\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:15:15 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Саруман\",\"Оружие2\",\"multiEnum\",\"посох\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:15:16 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Саруман\",\"Оружие2\",\"multiEnum\",\"посох,магия\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:15:20 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Саурон\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:15:24 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Сэм\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:15:26 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Сэм\",\"Оружие2\",\"multiEnum\",\"каштаны\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:15:30 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Фродо\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:15:33 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Фродо\",\"Оружие2\",\"multiEnum\",\"каштаны\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:15:36 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Элронд\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:15:50 GMT+0500 (Pakistan Standard Time)",
                  "createProfileItem",
                  "[\"character\",\"Народ Гондора\",\"enum\",10]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:15:58 GMT+0500 (Pakistan Standard Time)",
                  "createProfileItem",
                  "[\"character\",\"Народ Рохана\",\"checkbox\",11]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:16:02 GMT+0500 (Pakistan Standard Time)",
                  "changeProfileItemType",
                  "[\"character\",\"Народ Гондора\",\"checkbox\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:16:07 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Элронд\",\"Оружие2\",\"multiEnum\",\"\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:16:09 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Арагорн\",\"Оружие2\",\"multiEnum\",\"меч,лук,нож\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:16:09 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"player\",\"Аркадий\",\"Способ связи\",\"multiEnum\",\"дымовые сигналы\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:16:13 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Арагорн\",\"Народ Гондора\",\"checkbox\",true]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:16:15 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Боромир\",\"Оружие2\",\"multiEnum\",\"меч,лук\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:16:17 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Боромир\",\"Народ Гондора\",\"checkbox\",true]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:16:31 GMT+0500 (Pakistan Standard Time)",
                  "removeProfile",
                  "[\"character\",\"Народ Гондора\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:16:31 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Боромир\",\"Оружие2\",\"multiEnum\",\"меч,лук\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:16:36 GMT+0500 (Pakistan Standard Time)",
                  "removeProfile",
                  "[\"character\",\"Народ Рохана\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:16:36 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Боромир\",\"Оружие2\",\"multiEnum\",\"меч,лук\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:16:50 GMT+0500 (Pakistan Standard Time)",
                  "removeProfileItem",
                  "[\"character\",4,\"Оружие\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:16:53 GMT+0500 (Pakistan Standard Time)",
                  "renameProfileItem",
                  "[\"character\",\"Оружие\",\"Оружие2\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:16:56 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Боромир\",\"Оружие\",\"multiEnum\",\"меч,лук\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:16:56 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Боромир\",\"Оружие\",\"multiEnum\",\"меч,лук\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:17:01 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Боромир\",\"Оружие\",\"multiEnum\",\"меч,лук\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:17:39 GMT+0500 (Pakistan Standard Time)",
                  "saveFilterToGroup",
                  "[\"Народ Гондора\",[{\"type\":\"checkbox\",\"name\":\"profile-Народ Гондора\",\"selectedOptions\":{\"true\":true}}]]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:17:50 GMT+0500 (Pakistan Standard Time)",
                  "saveFilterToGroup",
                  "[\"Народ Рохана\",[{\"type\":\"checkbox\",\"name\":\"profile-Народ Рохана\",\"selectedOptions\":{\"true\":true}}]]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:18:17 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Боромир\",\"Оружие\",\"multiEnum\",\"меч,лук\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:19:16 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Боромир\",\"Оружие\",\"multiEnum\",\"меч,лук\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:29:02 GMT+0500 (Pakistan Standard Time)",
                  "renameProfile",
                  "[\"character\",\"Гендальф\",\"Гэндальф\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:29:02 GMT+0500 (Pakistan Standard Time)",
                  "updateProfileField",
                  "[\"character\",\"Боромир\",\"Оружие\",\"multiEnum\",\"меч,лук\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:29:47 GMT+0500 (Pakistan Standard Time)",
                  "setMasterStory",
                  "[\"Начало пути\",\"Гэндальф активно узнает информацию о кольце.\\nГэндальф отправляет Фродо в Бри. Фродо бежит от черных всадников (защита).\\nВ спутники к Фродо набиваются Сэм, Мерри и Пиппин.\\nСаруман активно пленяет Гэндальфа. Гэндальф активно сбегает.\\nАрагорн пассивно ждет хоббитов в Гарцующем пони. Потом он их защищает от назгулов.\\nНазгулы активно преследуют Фродо и компанию.\\nСаурон пассивно ждет когда Фродо оденет кольцо и таким образом укажет на себя.\\nАрвен активно спасает Фродо от назгулов. Элронд пассивно ждет Фродо, чтобы его вылечить.\\n\\nВ свой очередной день рождения Бильбо устраивает праздник, и таинственно исчезает, оставляя все свои вещи племяннику Фродо. В том числе неизвестное кольцо.\\n\\nГендальф чувствует черную магию в кольце и отправляется в Минас-Тирит, для получения большей информации.\\n\\nСаурон узнает от Голлума у кого сейчас находится кольцо и отправляет за ним назгулов.\\n\\nГэндальф возвращается в Шир, чтобы предупредить Фродо об опасности, древние зло пробудилось и за Фродо отправлены черные всадники. Гендальф проверяет кольцо и оно оказывается тем самым кольцом. Гендальф отправляет Фродо в Бри в таверну Гарцующий пони. Этот разговор услышал Сэм и за это его добавили к пати.\\n\\nГэндальф отправляется к Саруману, чтобы выработать план действий, но Саруман уже на темной стороне.\\n\\nПо пути из Шира Фродо и Сэм встречают Мерри и Пипина, ворующих овощи. Внезапно появляются назгулы, и Мерри с Пиппином присоединяются к пати.\\n\\nПартия приходит в Бри, и останавливается в Гарцующем пони. Гэндальфа там нет. Фродо случайно одевает кольцо, под действием кольца. Это видит Бродяжник. Бродяжник объясняет, что он друг и отводит хоббитов в другой ночлег.\\n\\nНочью назгулы приходят в гарцующий пони и разносят комнату хоббитов, которых там нет.\\n\\nНазгулы настигают хоббитов в развалинах Амон Сул. Один из них ранит Фродо. Бродяжник прогоняет назгулов. Появляется Арвен, везет Фродо в Ривенделл, спасаясь от назгулов.\\n\\nАрвен привозит Фродо в Ривенделл. Назгулы не могут перейти реку на границе Ривенделла.\\n\\nФродо исцеляют, он встречается с Бильбо, получает у него еще часть наследства - меч и кольчугу и собирается идти домой, считая свою миссию выполненной.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:31:23 GMT+0500 (Pakistan Standard Time)",
                  "setMasterStory",
                  "[\"Начало пути\",\"Гэндальф активно узнает информацию о кольце.\\nГэндальф отправляет Фродо в Бри. Фродо бежит от черных всадников (защита).\\nВ спутники к Фродо набиваются Сэм, Мерри и Пиппин.\\nСаруман активно пленяет Гэндальфа. Гэндальф активно сбегает.\\nАрагорн пассивно ждет хоббитов в Гарцующем пони. Потом он их защищает от назгулов.\\nНазгулы активно преследуют Фродо и компанию.\\nСаурон пассивно ждет когда Фродо оденет кольцо и таким образом укажет на себя.\\nАрвен активно спасает Фродо от назгулов. Элронд пассивно ждет Фродо, чтобы его вылечить.\\n\\nВ свой очередной день рождения Бильбо устраивает праздник, и таинственно исчезает, оставляя все свои вещи племяннику Фродо. В том числе неизвестное кольцо.\\n\\nГэндальф чувствует черную магию в кольце и отправляется в Минас-Тирит, для получения большей информации.\\n\\nСаурон узнает от Голлума у кого сейчас находится кольцо и отправляет за ним назгулов.\\n\\nГэндальф возвращается в Шир, чтобы предупредить Фродо об опасности, древние зло пробудилось и за Фродо отправлены черные всадники. Гэндальф проверяет кольцо и оно оказывается тем самым кольцом. Гэндальф отправляет Фродо в Бри в таверну Гарцующий пони. Этот разговор услышал Сэм и за это его добавили к пати.\\n\\nГэндальф отправляется к Саруману, чтобы выработать план действий, но Саруман уже на темной стороне.\\n\\nПо пути из Шира Фродо и Сэм встречают Мерри и Пипина, ворующих овощи. Внезапно появляются назгулы, и Мерри с Пиппином присоединяются к пати.\\n\\nПартия приходит в Бри, и останавливается в Гарцующем пони. Гэндальфа там нет. Фродо случайно одевает кольцо, под действием кольца. Это видит Бродяжник. Бродяжник объясняет, что он друг и отводит хоббитов в другой ночлег.\\n\\nНочью назгулы приходят в гарцующий пони и разносят комнату хоббитов, которых там нет.\\n\\nНазгулы настигают хоббитов в развалинах Амон Сул. Один из них ранит Фродо. Бродяжник прогоняет назгулов. Появляется Арвен, везет Фродо в Ривенделл, спасаясь от назгулов.\\n\\nАрвен привозит Фродо в Ривенделл. Назгулы не могут перейти реку на границе Ривенделла.\\n\\nФродо исцеляют, он встречается с Бильбо, получает у него еще часть наследства - меч и кольчугу и собирается идти домой, считая свою миссию выполненной.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:31:50 GMT+0500 (Pakistan Standard Time)",
                  "setEventOriginProperty",
                  "[\"Начало пути\",1,\"text\",\"Гэндальф чувствует черную магию в кольце и отправляется в Минас-Тирит, для получения большей информации.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:31:53 GMT+0500 (Pakistan Standard Time)",
                  "setEventAdaptationProperty",
                  "[\"Начало пути\",1,\"Бильбо\",\"text\",\"Сколько раз я себе говорил - не слушай Гэндальфа, старику в очередной раз удалось меня уговорить, поэтому я оставил свое прелестное кольцо Фродо. Эх, как оно без меня?\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:31:58 GMT+0500 (Pakistan Standard Time)",
                  "setEventOriginProperty",
                  "[\"Начало пути\",3,\"text\",\"Гэндальф возвращается в Шир, чтобы предупредить Фродо об опасности, древние зло пробудилось и за Фродо отправлены черные всадники. Гэндальф проверяет кольцо и оно оказывается тем самым кольцом. Гэндальф отправляет Фродо в Бри в таверну Гарцующий пони. Этот разговор услышал Сэм и за это его добавили к пати.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:32:01 GMT+0500 (Pakistan Standard Time)",
                  "setEventAdaptationProperty",
                  "[\"Начало пути\",3,\"Фродо\",\"text\",\"Вернувшись домой я встретил взволнованного Гэндальфа. Он попросил меня достать кольцо Бильбо и бросить его в огонь. К моему удивлению, вынутое из огня кольцо оказалось холодным и на его поверхности проступили странные письмена. Геэндальф сказал, что только одно кольцо реагирует так на огонь - кольцо Саурона. Как оказалось Саурон не умер, вновь набирает силу и ищет это кольцо. За мной отправлены черные всадники и мне надо бежать. Наш разговор подслушал Сэм и Гендальф отправил его со мной. Мы идём в Бри, он должен нас встретить там.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:32:07 GMT+0500 (Pakistan Standard Time)",
                  "setEventAdaptationProperty",
                  "[\"Начало пути\",3,\"Сэм\",\"text\",\"Поздним вечером я подстригал кусты у открытого окна и вдруг услышал разговор хозяина и Гэндальфа. Голос Гэндальфа был очень напряжен и я не удержался и решить узнать о чем они говорят. Я понял, что кольцо Бильбо действительно существует и что это очень необычное кольцо и что его ищет сам Саурон, который оказывается не умер. Я так заслушался, что забыл о стрижке, а Гэндальф заметил, что ножницы не звенят. Он поймал меня, я сознался, что все слышал и он отправил меня вместе с Фродо в Бри.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:32:10 GMT+0500 (Pakistan Standard Time)",
                  "setEventAdaptationProperty",
                  "[\"Начало пути\",3,\"Фродо\",\"text\",\"Вернувшись домой я встретил взволнованного Гэндальфа. Он попросил меня достать кольцо Бильбо и бросить его в огонь. К моему удивлению, вынутое из огня кольцо оказалось холодным и на его поверхности проступили странные письмена. Геэндальф сказал, что только одно кольцо реагирует так на огонь - кольцо Саурона. Как оказалось Саурон не умер, вновь набирает силу и ищет это кольцо. За мной отправлены черные всадники и мне надо бежать. Наш разговор подслушал Сэм и Гэндальф отправил его со мной. Мы идём в Бри, он должен нас встретить там.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:32:12 GMT+0500 (Pakistan Standard Time)",
                  "setEventOriginProperty",
                  "[\"Начало пути\",4,\"text\",\"Гэндальф отправляется к Саруману, чтобы выработать план действий, но Саруман уже на темной стороне.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:32:20 GMT+0500 (Pakistan Standard Time)",
                  "setEventAdaptationProperty",
                  "[\"Начало пути\",4,\"Саруман\",\"text\",\"Я узрел вечную тьму в палантире и понял, что это мой путь. Визит Гэндальфа не был неожиданностью. Повелитель тьмы велел заставить Гэндальфа прикмнуть к нам, но он смог сбежать. Тем хуже для него.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:32:21 GMT+0500 (Pakistan Standard Time)",
                  "setEventOriginProperty",
                  "[\"Начало пути\",6,\"text\",\"Партия приходит в Бри, и останавливается в Гарцующем пони. Гэндальфа там нет. Фродо случайно надевает кольцо, под действием кольца. Это видит Бродяжник. Бродяжник объясняет, что он друг и отводит хоббитов в другой ночлег.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:32:23 GMT+0500 (Pakistan Standard Time)",
                  "setEventAdaptationProperty",
                  "[\"Начало пути\",6,\"Мерри\",\"text\",\"Мы пришли в Бри в Гарцующий пони. Гэндальфа не было. Мы не знали что делать и решили остаться на ночлег. Вдруг Фродо стало плохо и он исчез точно так же как Бильбо на своем дне рождения. Мы не поняли что произошло, мы искали Фродо и не могли найти. Вдруг мы увидели как человек утаскивает Фродо. Мы пошли за ним, собирались драться. Оказалось, что это Бродяжник, друг Гендальфа, который будет охранять нас. Бродяжник сказал, что в Гарцующем пони останавливаться опасно и отвел нас на другой ночлег.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:32:24 GMT+0500 (Pakistan Standard Time)",
                  "setEventAdaptationProperty",
                  "[\"Начало пути\",6,\"Фродо\",\"text\",\"Мы пришли в Бри в Гарцующий пони. Гэндальфа не было. Мы не знали что делать и решили остаться на ночлег. Вдруг я почуствовал непреодолимое желание одеть кольцо и сделал это. Мир потерял краски, вместо людей были только силуэты и среди всего на меня смотрело огромное огненное око. В ужасе я снял кольцо. Никто на меня не смотрел, поэтому я подумал, что все хорошо, но неожиданное меня схватил человек и утащил в одну из внтуренних комнат. Это оказался Бродяжник, друг Гендальфа, встретивший нас. Он был очень зол на меня, за то что я одел кольцо - у Саурона везде глаза и уши. Мои друзья попытались спасти меня от Бродяжника, но я объяснил им, что он друг. Бродяжник сказал, что в Гарцующем пони останавливаться опасно и отвел на другой ночлег.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:32:27 GMT+0500 (Pakistan Standard Time)",
                  "setEventAdaptationProperty",
                  "[\"Начало пути\",6,\"Сэм\",\"text\",\"Мы пришли в Бри в Гарцующий пони. Гэндальфа не было. Мы не знали что делать и решили остаться на ночлег. Вдруг Фродо стало плохо и он исчез точно так же как Бильбо на своем дне рождения. Мы не поняли что произошло, мы искали Фродо и не могли найти. Вдруг мы увидели как человек утаскивает Фродо. Мы пошли за ним, собирались драться. Оказалось, что это Бродяжник, друг Гендальфа, который будет охранять нас. Бродяжник сказал, что в Гарцующем пони останавливаться опасно и отвел нас на другой ночлег.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:32:31 GMT+0500 (Pakistan Standard Time)",
                  "setEventAdaptationProperty",
                  "[\"Начало пути\",6,\"Пиппин\",\"text\",\"Мы пришли в Бри в Гарцующий пони. Гэндальфа не было. Мы не знали что делать и решили остаться на ночлег. Вдруг Фродо стало плохо и он исчез точно так же как Бильбо на своем дне рождения. Мы не поняли что произошло, мы искали Фродо и не могли найти. Вдруг мы увидели как человек утаскивает Фродо. Мы пошли за ним, собирались драться. Оказалось, что это Бродяжник, друг Гендальфа, который будет охранять нас. Бродяжник сказал, что в Гарцующем пони останавливаться опасно и отвел нас на другой ночлег.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:32:33 GMT+0500 (Pakistan Standard Time)",
                  "setEventAdaptationProperty",
                  "[\"Начало пути\",9,\"Арагорн\",\"text\",\"Мы отправились вслед за Фродо и Арвен в Ривендел так быстро как могли. К счастью они успели, а тела лошадей черных всадников были найдены ниже по течению. Какое-то время они нас не побеспокоят. Нам дали кров. Здесь же был Гэндальф. Элронд вылечит Фродо, а пока будем ждать когда Фродо поправится и мы сможем собрать совет кольца.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:32:37 GMT+0500 (Pakistan Standard Time)",
                  "setEventAdaptationProperty",
                  "[\"Начало пути\",9,\"Мерри\",\"text\",\"Мы отправились вслед за Фродо и Арвен в Ривендел так быстро как могли. К счастью они успели, а тела лошадей черных всадников были найдены ниже по течению. Какое-то время они нас не побеспокоят. Нам дали кров. Здесь же был Гэндальф. Элронд вылечит Фродо, а пока будем ждать когда Фродо поправится.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:32:40 GMT+0500 (Pakistan Standard Time)",
                  "setEventAdaptationProperty",
                  "[\"Начало пути\",9,\"Сэм\",\"text\",\"Мы отправились вслед за Фродо и Арвен в Ривендел так быстро как могли. К счастью они успели, а тела лошадей черных всадников были найдены ниже по течению. Какое-то время они нас не побеспокоят. Нам дали кров. Здесь же был Гэндальф. Элронд вылечит Фродо, а пока будем ждать когда Фродо поправится.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:32:54 GMT+0500 (Pakistan Standard Time)",
                  "setEventAdaptationProperty",
                  "[\"Начало пути\",9,\"Пиппин\",\"text\",\"Мы отправились вслед за Фродо и Арвен в Ривендел так быстро как могли. К счастью они успели, а тела лошадей черных всадников были найдены ниже по течению. Какое-то время они нас не побеспокоят. Нам дали кров. Здесь же был Гэндальф. Элронд вылечит Фродо, а пока будем ждать когда Фродо поправится.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:33:12 GMT+0500 (Pakistan Standard Time)",
                  "setEventOriginProperty",
                  "[\"Начало пути\",1,\"name\",\"Подозрения Гэндальфа\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:33:17 GMT+0500 (Pakistan Standard Time)",
                  "setEventOriginProperty",
                  "[\"Начало пути\",4,\"name\",\"Гэндальфа пленит Саруман\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:33:45 GMT+0500 (Pakistan Standard Time)",
                  "setEventAdaptationProperty",
                  "[\"Начало пути\",6,\"Мерри\",\"text\",\"Мы пришли в Бри в Гарцующий пони. Гэндальфа не было. Мы не знали что делать и решили остаться на ночлег. Вдруг Фродо стало плохо и он исчез точно так же как Бильбо на своем дне рождения. Мы не поняли что произошло, мы искали Фродо и не могли найти. Вдруг мы увидели как человек утаскивает Фродо. Мы пошли за ним, собирались драться. Оказалось, что это Бродяжник, друг Гэндальфа, который будет охранять нас. Бродяжник сказал, что в Гарцующем пони останавливаться опасно и отвел нас на другой ночлег.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:33:50 GMT+0500 (Pakistan Standard Time)",
                  "setEventAdaptationProperty",
                  "[\"Начало пути\",6,\"Фродо\",\"text\",\"Мы пришли в Бри в Гарцующий пони. Гэндальфа не было. Мы не знали что делать и решили остаться на ночлег. Вдруг я почуствовал непреодолимое желание одеть кольцо и сделал это. Мир потерял краски, вместо людей были только силуэты и среди всего на меня смотрело огромное огненное око. В ужасе я снял кольцо. Никто на меня не смотрел, поэтому я подумал, что все хорошо, но неожиданное меня схватил человек и утащил в одну из внтуренних комнат. Это оказался Бродяжник, друг Гэндальфа, встретивший нас. Он был очень зол на меня, за то что я одел кольцо - у Саурона везде глаза и уши. Мои друзья попытались спасти меня от Бродяжника, но я объяснил им, что он друг. Бродяжник сказал, что в Гарцующем пони останавливаться опасно и отвел на другой ночлег.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:33:51 GMT+0500 (Pakistan Standard Time)",
                  "setEventAdaptationProperty",
                  "[\"Начало пути\",6,\"Пиппин\",\"text\",\"Мы пришли в Бри в Гарцующий пони. Гэндальфа не было. Мы не знали что делать и решили остаться на ночлег. Вдруг Фродо стало плохо и он исчез точно так же как Бильбо на своем дне рождения. Мы не поняли что произошло, мы искали Фродо и не могли найти. Вдруг мы увидели как человек утаскивает Фродо. Мы пошли за ним, собирались драться. Оказалось, что это Бродяжник, друг Гэндальфа, который будет охранять нас. Бродяжник сказал, что в Гарцующем пони останавливаться опасно и отвел нас на другой ночлег.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:33:55 GMT+0500 (Pakistan Standard Time)",
                  "setEventAdaptationProperty",
                  "[\"Начало пути\",6,\"Сэм\",\"text\",\"Мы пришли в Бри в Гарцующий пони. Гэндальфа не было. Мы не знали что делать и решили остаться на ночлег. Вдруг Фродо стало плохо и он исчез точно так же как Бильбо на своем дне рождения. Мы не поняли что произошло, мы искали Фродо и не могли найти. Вдруг мы увидели как человек утаскивает Фродо. Мы пошли за ним, собирались драться. Оказалось, что это Бродяжник, друг Гэндальфа, который будет охранять нас. Бродяжник сказал, что в Гарцующем пони останавливаться опасно и отвел нас на другой ночлег.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:34:36 GMT+0500 (Pakistan Standard Time)",
                  "setEventOriginProperty",
                  "[\"Братство кольца\",0,\"text\",\"На совете обозначена проблема уничтожения кольца. Кольцо необходимо бросить в Ородруин, но никто не в силе взять на себя эту ношу. Фродо вызывается сделать это. Проводить его берутся Арагорн, Леголас, Гимли, Боромир, Гэндальф и его друзья из Шира. Так появляется братство кольца.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:34:39 GMT+0500 (Pakistan Standard Time)",
                  "setEventOriginProperty",
                  "[\"Братство кольца\",4,\"text\",\"Гэндальф показывает Фродо Голлума и говорит, что он давно идет за ними.\\nПипин роняет ведро в колодец у могилы Балина, тем самым выдавая себя оркам. Принимают бой. Приходит Балрог.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 15:34:41 GMT+0500 (Pakistan Standard Time)",
                  "setEventOriginProperty",
                  "[\"Братство кольца\",5,\"text\",\"Гэндальф остается защищать мост от Балрога и падает в пропасть вместе с ним. Все остальные выходят из Мории и попадают в Лотлориен к Галадриэли.\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 21:05:10 GMT+0500 (Pakistan Standard Time)",
                  "createGroup",
                  "[\"Мечники и лучники\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sat May 12 2018 21:05:25 GMT+0500 (Pakistan Standard Time)",
                  "saveFilterToGroup",
                  "[\"Мечники и лучники\",[{\"type\":\"multiEnum\",\"name\":\"profile-Оружие\",\"condition\":\"some\",\"selectedOptions\":{\"меч\":true,\"лук\":true}}]]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:45:46 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Sun Jul 22 2018 15:45:46 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:46:19 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Тип коммуникации\",\"Вербальный\",\"Невербальный\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:46:19 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Тип коммуникации\",\"Вербальный\",\"Невербальный\"]",
                  "[\"Sun Jul 22 2018 15:46:19 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:46:32 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Открытость\",\"Прозрачность\",\"Тайна\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:46:32 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Открытость\",\"Прозрачность\",\"Тайна\"]",
                  "[\"Sun Jul 22 2018 15:46:32 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:46:46 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Сценография\",\"Полная реалистичность (360 градусов)\",\"Символизм\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:46:46 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Сценография\",\"Полная реалистичность (360 градусов)\",\"Символизм\"]",
                  "[\"Sun Jul 22 2018 15:46:46 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:47:00 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Ответственность за создание персонажа\",\"Игрок\",\"Мастер\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:47:00 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Ответственность за создание персонажа\",\"Игрок\",\"Мастер\"]",
                  "[\"Sun Jul 22 2018 15:47:00 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:47:09 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Ответственность за создание культуры\",\"Игрок\",\"Мастер\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:47:09 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Ответственность за создание культуры\",\"Игрок\",\"Мастер\"]",
                  "[\"Sun Jul 22 2018 15:47:09 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:47:17 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Мотивация игроков\",\"Соревнование\",\"Сотрудничество\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:47:17 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Мотивация игроков\",\"Соревнование\",\"Сотрудничество\"]",
                  "[\"Sun Jul 22 2018 15:47:17 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:47:29 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Персонаж как маска (bleed-in)\",\"Дистанцирование\",\"Игра в себя\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:47:29 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Персонаж как маска (bleed-in)\",\"Дистанцирование\",\"Игра в себя\"]",
                  "[\"Sun Jul 22 2018 15:47:29 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:47:36 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Давление на игрока\",\"Реальное\",\"Изображаемое\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:47:36 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Давление на игрока\",\"Реальное\",\"Изображаемое\"]",
                  "[\"Sun Jul 22 2018 15:47:36 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:47:45 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Соответствие сеттингу\",\"Играбельность\",\"Точность\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:47:45 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Соответствие сеттингу\",\"Играбельность\",\"Точность\"]",
                  "[\"Sun Jul 22 2018 15:47:45 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:47:53 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Игровая механика\",\"Явная\",\"Скрытая\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:47:53 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Игровая механика\",\"Явная\",\"Скрытая\"]",
                  "[\"Sun Jul 22 2018 15:47:53 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:48:05 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Представление темы\",\"Симуляция\",\"Абстракция\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:48:05 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Представление темы\",\"Симуляция\",\"Абстракция\"]",
                  "[\"Sun Jul 22 2018 15:48:05 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:48:13 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Стиль управления игрой\",\"Активный\",\"Пассивный\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:48:13 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Стиль управления игрой\",\"Активный\",\"Пассивный\"]",
                  "[\"Sun Jul 22 2018 15:48:13 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:48:23 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Ваш бегунок?\",\"Максимум\",\"Минимум\"]",
                  "[\"begin\"]"
                ],
                [
                  "user",
                  "Sun Jul 22 2018 15:48:23 GMT+0500 (Екатеринбург, стандартное время)",
                  "createSlider",
                  "[\"Ваш бегунок?\",\"Максимум\",\"Минимум\"]",
                  "[\"Sun Jul 22 2018 15:48:23 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ]
              ],
              "Groups": {
                "Светлый блок": {
                  "name": "Светлый блок",
                  "masterDescription": "Стремятся уничтожить Саурона и последствия его деятельности в Арде.",
                  "characterDescription": "",
                  "filterModel": [
                    {
                      "type": "enum",
                      "name": "profile-Блок",
                      "selectedOptions": {
                        "Светлый": true
                      }
                    }
                  ],
                  "doExport": true
                },
                "Темный блок": {
                  "name": "Темный блок",
                  "masterDescription": "Стремятся захватить власть над Ардой.",
                  "characterDescription": "",
                  "filterModel": [
                    {
                      "type": "enum",
                      "name": "profile-Блок",
                      "selectedOptions": {
                        "Тёмный": true
                      }
                    }
                  ],
                  "doExport": true
                },
                "Нейтралы": {
                  "name": "Нейтралы",
                  "masterDescription": "Имеющие свободный выбор и не сделавшие его.",
                  "characterDescription": "",
                  "filterModel": [
                    {
                      "type": "enum",
                      "name": "profile-Блок",
                      "selectedOptions": {
                        "Нейтрал": true
                      }
                    }
                  ],
                  "doExport": true
                },
                "Эльфы": {
                  "name": "Эльфы",
                  "masterDescription": "Валим в Валинор.",
                  "characterDescription": "",
                  "filterModel": [
                    {
                      "type": "enum",
                      "name": "profile-Блок",
                      "selectedOptions": {
                        "Светлый": true
                      }
                    },
                    {
                      "type": "enum",
                      "name": "profile-Раса",
                      "selectedOptions": {
                        "эльф": true
                      }
                    }
                  ],
                  "doExport": true
                },
                "Народ Рохана": {
                  "name": "Народ Рохана",
                  "masterDescription": "",
                  "characterDescription": "Рохан - государство у северных границ Гондора, его союзник. Также встречается название Риддермарк (англ. Riddermark) или Марка. Жители этого степного края к северу от Гондора и северо-западу от Мордора зовутся рохиррим.\n\nВ XIII веке Третьей Эпохи короли Гондора заключили союз с людьми Рованиона как с народом, родственным дунэдайн Первой Эпохи.\n\nВ XXI веке Третьей Эпохи потомки тех людей, зовущие себя Эотеод, перекочевали от верховьев Андуина к северу Лихолесья, уничтожив по пути остатки воинства королевства Ангмар. Там у них произошла ссора с гномами по поводу сокровищ дракона Скаты, освобождённых одним из князей Эотеода, Фрамом.\n\nПозже, в 2509 году, Кирион, наместник Гондора, призывает Эотеод на помощь в отражении атаки людей северо-востока Средиземья и орков Мордора. Эорл Юный отвечает на призыв и, неожиданно для всех явившись на поле битвы при Келебранте, громит армию орков. В награду Эорл получает поля Каленардона и переселятся туда вместе со всем своим народом. Эта земля изначально была частью Гондора, но после опустошительной чумы 1636 года оставалась практически незаселённой.\n\nПервая линия королей Рохана продолжалась 249 лет, пока в 2758 году Т. Э. страна не подверглась нашествию дунландцев под командованием Вульфа, сына Фреки. Король Хельм Молоторукий укрылся в Хорнбурге до прибытия помощи из Гондора, и находился в осаде около года. Сыновья Хельма погибли раньше него, так что после его гибели племянник Хельма Фреалаф начал вторую линию королей, продлившуюся до конца Третьей Эпохи.",
                  "filterModel": [
                    {
                      "type": "checkbox",
                      "name": "profile-Народ Рохана",
                      "selectedOptions": {
                        "true": true
                      }
                    }
                  ],
                  "doExport": true
                },
                "Народ Гондора": {
                  "name": "Народ Гондора",
                  "masterDescription": "",
                  "characterDescription": "Гондор - южное государство нуменорцев в Средиземье. Основано Элендилом после гибели Нуменора в 3320 году В. Э. на берегу залива Белфалас к западу от Мордора, со столицей в городе Осгилиат.\n\nХотя первоначально столицей Гондора был Осгилиат, в 1640 году Т. Э. столица была перенесена в Минас-Анор (изначально опорную крепость на правом берегу Андуина). Из крепостей и городов Гондора известны Осгилиат, Минас Анор (Минас Тирит), Минас Итиль (Минас Моргул), Дол Амрот, Пеларгир-на-Андуине, Лебеннин, Изенгард (был отдан во владение Саруману), а также крепость на острове Каир Андрос.\n\nДо создания Последнего Союза и войны с Сауроном Гондором совместно управляли двое сыновей Элендила — Исилдур и Анарион. После того, как Элендил и Анарион погибли во время осады Барад-Дура, правление перешло к сыну Анариона — королю Менельдилу, которого возвёл на трон Южного королевства его дядя Исилдур, недолгое время спустя после этого погибший в Ирисной Низине в пойме Андуина. Таким образом, потомки Анариона были королями Гондора долгое время — вплоть до последнего законного представителя южной династии, Эарнура.\n\nКогда Эарнур погиб в Минас Моргуле в 2050 году Т. Э., правление принял наместник короля Мардил Верный. Поскольку не было уверенности, что Эарнур погиб, Мардил и другие Наместники Гондора клялись управлять страной «до возвращения короля». Данное возвращение состоялось спустя почти тысячу лет, когда в 3019 году Т. Э. права на трон Гондора предъявил Арагорн или Элессар, сын Араторна, прямой потомок Исилдура, старшего брата Анариона, и одновременно — самого Анариона (ибо последний король Арнора, Арведуи, был женат на дочери гондорского короля Ондогера).",
                  "filterModel": [
                    {
                      "type": "checkbox",
                      "name": "profile-Народ Гондора",
                      "selectedOptions": {
                        "true": true
                      }
                    }
                  ],
                  "doExport": true
                },
                "Мечники и лучники": {
                  "name": "Мечники и лучники",
                  "masterDescription": "",
                  "characterDescription": "",
                  "filterModel": [
                    {
                      "type": "multiEnum",
                      "name": "profile-Оружие",
                      "condition": "some",
                      "selectedOptions": {
                        "меч": true,
                        "лук": true
                      }
                    }
                  ],
                  "doExport": true
                }
              },
              "InvestigationBoard": {
                "groups": {
                  "Нейтралы": {
                    "name": "Нейтралы",
                    "notes": ""
                  },
                  "Светлый блок": {
                    "name": "Светлый блок",
                    "notes": ""
                  },
                  "Темный блок": {
                    "name": "Темный блок",
                    "notes": ""
                  },
                  "Эльфы": {
                    "name": "Эльфы",
                    "notes": ""
                  },
                  "Народ Гондора": {
                    "name": "Народ Гондора",
                    "notes": ""
                  },
                  "Народ Рохана": {
                    "name": "Народ Рохана",
                    "notes": ""
                  }
                },
                "resources": {
                  "Кольцо Всевластья": {
                    "name": "Кольцо Всевластья"
                  },
                  "Шахты Мории": {
                    "name": "Шахты Мории"
                  }
                },
                "relations": {
                  "group-Нейтралы": {
                    "resource-Кольцо Всевластья": "Стремятся эффективно использовать"
                  },
                  "group-Светлый блок": {
                    "resource-Кольцо Всевластья": "Стремится уничтожить",
                    "group-Темный блок": "Хочет уничтожить",
                    "group-Нейтралы": "Хочет присоединить"
                  },
                  "group-Темный блок": {
                    "resource-Кольцо Всевластья": "Стремится захватить",
                    "group-Светлый блок": "Хочет уничтожить",
                    "group-Нейтралы": "Хочет поработить",
                    "resource-Шахты Мории": "Контролирует"
                  },
                  "group-Эльфы": {
                    "group-Светлый блок": "Направляют"
                  },
                  "group-Народ Гондора": {
                    "group-Народ Рохана": "Союзники",
                    "group-Светлый блок": "Склоняются",
                    "resource-Шахты Мории": "Хочет захватить"
                  },
                  "group-Народ Рохана": {
                    "group-Народ Гондора": "Союзники",
                    "group-Светлый блок": "Склоняются"
                  }
                }
              },
              "Relations": [
                {
                  "origin": "",
                  "starterTextReady": false,
                  "enderTextReady": false,
                  "essence": [],
                  "Арагорн": "Зайка моя.",
                  "Арвен": "Мой лапушок.",
                  "starter": "Арагорн",
                  "ender": "Арвен"
                },
                {
                  "origin": "",
                  "starterTextReady": false,
                  "enderTextReady": false,
                  "essence": [],
                  "Арагорн": "Уважаю старика.",
                  "Гэндальф": "",
                  "starter": "Арагорн",
                  "ender": "Гэндальф"
                },
                {
                  "origin": "",
                  "starterTextReady": false,
                  "enderTextReady": false,
                  "essence": [],
                  "Саурон": "Не быть тебе королём.Не быть тебе королём.Не быть тебе королём.Не быть тебе королём.Не быть тебе королём.Не быть тебе королём.Не быть тебе королём.Не быть тебе королём.Не быть тебе королём.Не быть тебе королём.Не быть тебе королём.Не быть тебе королём.",
                  "Арагорн": "",
                  "starter": "Саурон",
                  "ender": "Арагорн"
                }
              ],
              "CharacterProfileStructure": [
                {
                  "name": "Блок",
                  "type": "enum",
                  "value": "Тёмный,Светлый,Нейтрал",
                  "doExport": true,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                },
                {
                  "name": "Статус",
                  "type": "enum",
                  "value": "Свободна,Занята,На обсуждении",
                  "doExport": true,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                },
                {
                  "name": "Раса",
                  "type": "enum",
                  "value": "человек,эльф,гном,орк,хоббит,майар,другое",
                  "doExport": true,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                },
                {
                  "name": "Пол",
                  "type": "enum",
                  "value": "не важно,М,Ж",
                  "doExport": true,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                },
                {
                  "name": "Оружие",
                  "type": "multiEnum",
                  "value": "меч,лук,нож,каштаны,посох,магия,топор,эльфийские ножи",
                  "doExport": true,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                },
                {
                  "name": "Снаряжение",
                  "type": "string",
                  "value": "",
                  "doExport": true,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                },
                {
                  "name": "Вес, кг.",
                  "type": "number",
                  "value": 0,
                  "doExport": true,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                },
                {
                  "name": "Умеет петь",
                  "type": "checkbox",
                  "value": false,
                  "doExport": false,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                },
                {
                  "name": "Биография",
                  "type": "text",
                  "value": "",
                  "doExport": true,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                },
                {
                  "name": "Народ Гондора",
                  "type": "checkbox",
                  "value": false,
                  "doExport": true,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                },
                {
                  "name": "Народ Рохана",
                  "type": "checkbox",
                  "value": false,
                  "doExport": true,
                  "playerAccess": "hidden",
                  "showInRoleGrid": false
                }
              ],
              "PlayerProfileStructure": [
                {
                  "name": "Город",
                  "type": "enum",
                  "value": "Мск,Спб,Че,Екат,НН,Нвсб,другое",
                  "doExport": false,
                  "playerAccess": "write",
                  "showInRoleGrid": false
                },
                {
                  "name": "Способ связи",
                  "type": "multiEnum",
                  "value": "Мессенджеры,телефон,телеграф,дымовые сигналы,почта,электронная почта",
                  "doExport": false,
                  "playerAccess": "write",
                  "showInRoleGrid": false
                }
              ],
              "Players": {
                "Аркадий": {
                  "name": "Аркадий",
                  "Город": "Мск",
                  "Способ связи": "дымовые сигналы"
                },
                "Белла": {
                  "name": "Белла",
                  "Город": "Екат",
                  "Способ связи": "телефон,почта"
                },
                "Вальдемар": {
                  "name": "Вальдемар",
                  "Город": "Че",
                  "Способ связи": "Мессенджеры"
                },
                "Галина": {
                  "name": "Галина",
                  "Город": "НН",
                  "Способ связи": ""
                }
              },
              "ProfileBindings": {
                "Арагорн": "Аркадий",
                "Арвен": "Белла"
              },
              "Gears": {
                "nodes": [],
                "edges": [],
                "settings": {
                  "physicsEnabled": false,
                  "showNotes": false
                }
              },
              "Sliders": [
                {
                  "name": "Тип коммуникации",
                  "top": "Вербальный",
                  "bottom": "Невербальный",
                  "value": 0
                },
                {
                  "name": "Открытость",
                  "top": "Прозрачность",
                  "bottom": "Тайна",
                  "value": 0
                },
                {
                  "name": "Сценография",
                  "top": "Полная реалистичность (360 градусов)",
                  "bottom": "Символизм",
                  "value": 0
                },
                {
                  "name": "Ответственность за создание персонажа",
                  "top": "Игрок",
                  "bottom": "Мастер",
                  "value": 0
                },
                {
                  "name": "Ответственность за создание культуры",
                  "top": "Игрок",
                  "bottom": "Мастер",
                  "value": 0
                },
                {
                  "name": "Мотивация игроков",
                  "top": "Соревнование",
                  "bottom": "Сотрудничество",
                  "value": 0
                },
                {
                  "name": "Персонаж как маска (bleed-in)",
                  "top": "Дистанцирование",
                  "bottom": "Игра в себя",
                  "value": 0
                },
                {
                  "name": "Давление на игрока",
                  "top": "Реальное",
                  "bottom": "Изображаемое",
                  "value": 0
                },
                {
                  "name": "Соответствие сеттингу",
                  "top": "Играбельность",
                  "bottom": "Точность",
                  "value": 0
                },
                {
                  "name": "Игровая механика",
                  "top": "Явная",
                  "bottom": "Скрытая",
                  "value": 0
                },
                {
                  "name": "Представление темы",
                  "top": "Симуляция",
                  "bottom": "Абстракция",
                  "value": 0
                },
                {
                  "name": "Стиль управления игрой",
                  "top": "Активный",
                  "bottom": "Пассивный",
                  "value": 0
                },
                {
                  "name": "Ваш бегунок?",
                  "top": "Максимум",
                  "bottom": "Минимум",
                  "value": 0
                }
              ]
            };

})(typeof exports === 'undefined'? this['DemoBase']={}: exports);
/*Copyright 2015, 2016 Timofey Rechkalov <ntsdk@yandex.ru>, Maria Sidekhmenova <matilda_@list.ru>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License. */

"use strict";

'use strict';

((exports) => {
    exports.data = {
            "Meta": {
                "name": "",
                "date": "1970/01/01 00:00",
                "preGameDate": "1970/01/01 00:00",
                "description": "",
                "saveTime": "Sun Jul 22 2018 15:51:33 GMT+0500 (Екатеринбург, стандартное время)"
              },
              "Characters": {},
              "Stories": {},
              "Settings": {
                "BriefingPreview": {},
                "Stories": {},
                "CharacterProfile": {}
              },
              "Version": "0.7.2",
              "Log": [
                [
                  "user",
                  "Sun Jul 22 2018 15:51:31 GMT+0500 (Екатеринбург, стандартное время)",
                  "setDatabase",
                  "[]",
                  "[\"Sun Jul 22 2018 15:51:31 GMT+0500 (Екатеринбург, стандартное время)\",\"OK\"]"
                ]
              ],
              "Groups": {},
              "InvestigationBoard": {
                "groups": {},
                "resources": {},
                "relations": {}
              },
              "Relations": [],
              "CharacterProfileStructure": [],
              "PlayerProfileStructure": [],
              "Players": {},
              "ProfileBindings": {},
              "Gears": {
                "nodes": [],
                "edges": [],
                "settings": {
                  "physicsEnabled": false,
                  "showNotes": false
                }
              },
              "Sliders": [
                  {
                      "name": "Тип коммуникации",
                      "top": "Вербальный",
                      "bottom": "Невербальный",
                      "value": 0
                    },
                    {
                      "name": "Открытость",
                      "top": "Прозрачность",
                      "bottom": "Тайна",
                      "value": 0
                    },
                    {
                      "name": "Сценография",
                      "top": "Полная реалистичность (360 градусов)",
                      "bottom": "Символизм",
                      "value": 0
                    },
                    {
                      "name": "Ответственность за создание персонажа",
                      "top": "Игрок",
                      "bottom": "Мастер",
                      "value": 0
                    },
                    {
                      "name": "Ответственность за создание культуры",
                      "top": "Игрок",
                      "bottom": "Мастер",
                      "value": 0
                    },
                    {
                      "name": "Мотивация игроков",
                      "top": "Соревнование",
                      "bottom": "Сотрудничество",
                      "value": 0
                    },
                    {
                      "name": "Персонаж как маска (bleed-in)",
                      "top": "Дистанцирование",
                      "bottom": "Игра в себя",
                      "value": 0
                    },
                    {
                      "name": "Давление на игрока",
                      "top": "Реальное",
                      "bottom": "Изображаемое",
                      "value": 0
                    },
                    {
                      "name": "Соответствие сеттингу",
                      "top": "Играбельность",
                      "bottom": "Точность",
                      "value": 0
                    },
                    {
                      "name": "Игровая механика",
                      "top": "Явная",
                      "bottom": "Скрытая",
                      "value": 0
                    },
                    {
                      "name": "Представление темы",
                      "top": "Симуляция",
                      "bottom": "Абстракция",
                      "value": 0
                    },
                    {
                      "name": "Стиль управления игрой",
                      "top": "Активный",
                      "bottom": "Пассивный",
                      "value": 0
                    },
                    {
                      "name": "Ваш бегунок?",
                      "top": "Максимум",
                      "bottom": "Минимум",
                      "value": 0
                    }
                  ]
            };
})(typeof exports === 'undefined' ? this.EmptyBase = {} : exports);


//# sourceMappingURL=data:application/json;charset=utf8;base64,
